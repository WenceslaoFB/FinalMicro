
MicroFin1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009014  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  080091a8  080091a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093dc  080093dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093e4  080093e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093e4  080093e4  000193e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080093ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000010  080093fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008f4  080093fc  000208f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013865  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c2  00000000  00000000  000338a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00035c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00036d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b16  00000000  00000000  00037d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001476f  00000000  00000000  0004f89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b06d  00000000  00000000  0006400d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff07a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f8  00000000  00000000  000ff0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009190 	.word	0x08009190

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08009190 	.word	0x08009190

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a17      	ldr	r2, [pc, #92]	; (8000544 <HAL_UART_RxCpltCallback+0x6c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d111      	bne.n	800050e <HAL_UART_RxCpltCallback+0x36>
		indexW_RxESP++;
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <HAL_UART_RxCpltCallback+0x70>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	3301      	adds	r3, #1
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_UART_RxCpltCallback+0x70>)
 80004f6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,(uint8_t *) &bufferRxESP[indexW_RxESP], 1);
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <HAL_UART_RxCpltCallback+0x70>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_UART_RxCpltCallback+0x74>)
 8000502:	4413      	add	r3, r2
 8000504:	2201      	movs	r2, #1
 8000506:	4619      	mov	r1, r3
 8000508:	4811      	ldr	r0, [pc, #68]	; (8000550 <HAL_UART_RxCpltCallback+0x78>)
 800050a:	f007 fe08 	bl	800811e <HAL_UART_Receive_IT>
	}

	if(huart->Instance==USART2){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <HAL_UART_RxCpltCallback+0x7c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d111      	bne.n	800053c <HAL_UART_RxCpltCallback+0x64>
		indexW_PC_RX++;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_UART_RxCpltCallback+0x80>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	3301      	adds	r3, #1
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <HAL_UART_RxCpltCallback+0x80>)
 8000524:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,(uint8_t *) &buffer_PC_RX[indexW_PC_RX], 1);
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_UART_RxCpltCallback+0x80>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	461a      	mov	r2, r3
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_UART_RxCpltCallback+0x84>)
 8000530:	4413      	add	r3, r2
 8000532:	2201      	movs	r2, #1
 8000534:	4619      	mov	r1, r3
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <HAL_UART_RxCpltCallback+0x78>)
 8000538:	f007 fdf1 	bl	800811e <HAL_UART_Receive_IT>
	}
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40011000 	.word	0x40011000
 8000548:	20000843 	.word	0x20000843
 800054c:	20000540 	.word	0x20000540
 8000550:	200001b8 	.word	0x200001b8
 8000554:	40004400 	.word	0x40004400
 8000558:	20000847 	.word	0x20000847
 800055c:	20000740 	.word	0x20000740

08000560 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	indexADC++;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_ADC_ConvCpltCallback+0x34>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	3301      	adds	r3, #1
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_ADC_ConvCpltCallback+0x34>)
 8000574:	701a      	strb	r2, [r3, #0]
	if(indexADC == 32)
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <HAL_ADC_ConvCpltCallback+0x34>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b20      	cmp	r3, #32
 800057e:	d102      	bne.n	8000586 <HAL_ADC_ConvCpltCallback+0x26>
		indexADC=0;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_ADC_ConvCpltCallback+0x34>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]

}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000868 	.word	0x20000868

08000598 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d132      	bne.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x78>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADCData[indexADC],8);
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80005b4:	4413      	add	r3, r2
 80005b6:	2208      	movs	r2, #8
 80005b8:	4619      	mov	r1, r3
 80005ba:	481a      	ldr	r0, [pc, #104]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80005bc:	f002 ffe2 	bl	8003584 <HAL_ADC_Start_DMA>

		time100ms--;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	3b01      	subs	r3, #1
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80005cc:	701a      	strb	r2, [r3, #0]
		if(!time100ms){
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d107      	bne.n	80005e8 <HAL_TIM_PeriodElapsedCallback+0x50>
			time100ms=200;
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	701a      	strb	r2, [r3, #0]
			ON100MS = 1;
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80005e0:	7813      	ldrb	r3, [r2, #0]
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	7013      	strb	r3, [r2, #0]
		}
		time10ms--;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	3b01      	subs	r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005f4:	701a      	strb	r2, [r3, #0]
		if(!time10ms){
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d107      	bne.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x78>
			time10ms=20;
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000602:	2214      	movs	r2, #20
 8000604:	701a      	strb	r2, [r3, #0]
			ON10MS = 1;
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000608:	7813      	ldrb	r3, [r2, #0]
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	7013      	strb	r3, [r2, #0]
		}

	}
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40000800 	.word	0x40000800
 800061c:	20000868 	.word	0x20000868
 8000620:	20000240 	.word	0x20000240
 8000624:	2000002c 	.word	0x2000002c
 8000628:	20000849 	.word	0x20000849
 800062c:	2000089c 	.word	0x2000089c
 8000630:	2000084a 	.word	0x2000084a

08000634 <DecodeAnsESP>:


void DecodeAnsESP(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	static uint8_t i=0,k=1,cmdPosInBuff;
//	bufferDebug[indexW_Debug]=bufferRxESP[indexR_RxESP];
//	indexW_Debug++;
	switch(AT){
 8000638:	4ba4      	ldr	r3, [pc, #656]	; (80008cc <DecodeAnsESP+0x298>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b07      	cmp	r3, #7
 800063e:	f200 8617 	bhi.w	8001270 <DecodeAnsESP+0xc3c>
 8000642:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <DecodeAnsESP+0x14>)
 8000644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000648:	08000669 	.word	0x08000669
 800064c:	080006e3 	.word	0x080006e3
 8000650:	080007b7 	.word	0x080007b7
 8000654:	08000831 	.word	0x08000831
 8000658:	080008ab 	.word	0x080008ab
 800065c:	08000a85 	.word	0x08000a85
 8000660:	08000b05 	.word	0x08000b05
 8000664:	08000fe3 	.word	0x08000fe3
		case 0:
			if(bufferRxESP[indexR_RxESP]==ANS_CWMODE[i]){
 8000668:	4b99      	ldr	r3, [pc, #612]	; (80008d0 <DecodeAnsESP+0x29c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	4b98      	ldr	r3, [pc, #608]	; (80008d4 <DecodeAnsESP+0x2a0>)
 8000672:	5c9b      	ldrb	r3, [r3, r2]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b98      	ldr	r3, [pc, #608]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4619      	mov	r1, r3
 800067c:	4b97      	ldr	r3, [pc, #604]	; (80008dc <DecodeAnsESP+0x2a8>)
 800067e:	5c5b      	ldrb	r3, [r3, r1]
 8000680:	429a      	cmp	r2, r3
 8000682:	d11a      	bne.n	80006ba <DecodeAnsESP+0x86>
				i++;
 8000684:	4b94      	ldr	r3, [pc, #592]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b92      	ldr	r3, [pc, #584]	; (80008d8 <DecodeAnsESP+0x2a4>)
 800068e:	701a      	strb	r2, [r3, #0]
				if(i==19){
 8000690:	4b91      	ldr	r3, [pc, #580]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b13      	cmp	r3, #19
 8000696:	f040 85ed 	bne.w	8001274 <DecodeAnsESP+0xc40>
					AT++;
 800069a:	4b8c      	ldr	r3, [pc, #560]	; (80008cc <DecodeAnsESP+0x298>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b8a      	ldr	r3, [pc, #552]	; (80008cc <DecodeAnsESP+0x298>)
 80006a4:	701a      	strb	r2, [r3, #0]
					i=0;
 80006a6:	4b8c      	ldr	r3, [pc, #560]	; (80008d8 <DecodeAnsESP+0x2a4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 80006ac:	4a8c      	ldr	r2, [pc, #560]	; (80008e0 <DecodeAnsESP+0x2ac>)
 80006ae:	7813      	ldrb	r3, [r2, #0]
 80006b0:	f043 0310 	orr.w	r3, r3, #16
 80006b4:	7013      	strb	r3, [r2, #0]
					readyToSend=1;
					i=0;
					break;
				}
			}
			break;
 80006b6:	f000 bddd 	b.w	8001274 <DecodeAnsESP+0xc40>
				if(!timeOut2){
 80006ba:	4b8a      	ldr	r3, [pc, #552]	; (80008e4 <DecodeAnsESP+0x2b0>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	f040 85d8 	bne.w	8001274 <DecodeAnsESP+0xc40>
					indexR_RxESP=indexW_RxESP;
 80006c4:	4b88      	ldr	r3, [pc, #544]	; (80008e8 <DecodeAnsESP+0x2b4>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b81      	ldr	r3, [pc, #516]	; (80008d0 <DecodeAnsESP+0x29c>)
 80006cc:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 80006ce:	4a84      	ldr	r2, [pc, #528]	; (80008e0 <DecodeAnsESP+0x2ac>)
 80006d0:	7813      	ldrb	r3, [r2, #0]
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	7013      	strb	r3, [r2, #0]
					i=0;
 80006d8:	4b7f      	ldr	r3, [pc, #508]	; (80008d8 <DecodeAnsESP+0x2a4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
					break;
 80006de:	f000 bdd8 	b.w	8001292 <DecodeAnsESP+0xc5e>

		case 1:
			if(bufferRxESP[indexR_RxESP]==AUTOMATIC_WIFI_CONNECTED[i]){
 80006e2:	4b7b      	ldr	r3, [pc, #492]	; (80008d0 <DecodeAnsESP+0x29c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b7a      	ldr	r3, [pc, #488]	; (80008d4 <DecodeAnsESP+0x2a0>)
 80006ec:	5c9b      	ldrb	r3, [r3, r2]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b79      	ldr	r3, [pc, #484]	; (80008d8 <DecodeAnsESP+0x2a4>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4b7d      	ldr	r3, [pc, #500]	; (80008ec <DecodeAnsESP+0x2b8>)
 80006f8:	5c5b      	ldrb	r3, [r3, r1]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d117      	bne.n	800072e <DecodeAnsESP+0xfa>
				i++;
 80006fe:	4b76      	ldr	r3, [pc, #472]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b74      	ldr	r3, [pc, #464]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000708:	701a      	strb	r2, [r3, #0]
				if(i==29){
 800070a:	4b73      	ldr	r3, [pc, #460]	; (80008d8 <DecodeAnsESP+0x2a4>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b1d      	cmp	r3, #29
 8000710:	f040 85b2 	bne.w	8001278 <DecodeAnsESP+0xc44>
					AT=3;
 8000714:	4b6d      	ldr	r3, [pc, #436]	; (80008cc <DecodeAnsESP+0x298>)
 8000716:	2203      	movs	r2, #3
 8000718:	701a      	strb	r2, [r3, #0]
					i=0;
 800071a:	4b6f      	ldr	r3, [pc, #444]	; (80008d8 <DecodeAnsESP+0x2a4>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000720:	4a6f      	ldr	r2, [pc, #444]	; (80008e0 <DecodeAnsESP+0x2ac>)
 8000722:	7813      	ldrb	r3, [r2, #0]
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	7013      	strb	r3, [r2, #0]
					readyToSend=1;
					indexR_RxESP=indexW_RxESP;
					break;
				}
			}
			break;
 800072a:	f000 bda5 	b.w	8001278 <DecodeAnsESP+0xc44>
				if(bufferRxESP[indexR_RxESP]==WIFI_DISCONNECT[i]){
 800072e:	4b68      	ldr	r3, [pc, #416]	; (80008d0 <DecodeAnsESP+0x29c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	4b67      	ldr	r3, [pc, #412]	; (80008d4 <DecodeAnsESP+0x2a0>)
 8000738:	5c9b      	ldrb	r3, [r3, r2]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b66      	ldr	r3, [pc, #408]	; (80008d8 <DecodeAnsESP+0x2a4>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	4b6b      	ldr	r3, [pc, #428]	; (80008f0 <DecodeAnsESP+0x2bc>)
 8000744:	5c5b      	ldrb	r3, [r3, r1]
 8000746:	429a      	cmp	r2, r3
 8000748:	d123      	bne.n	8000792 <DecodeAnsESP+0x15e>
					i++;
 800074a:	4b63      	ldr	r3, [pc, #396]	; (80008d8 <DecodeAnsESP+0x2a4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b61      	ldr	r3, [pc, #388]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000754:	701a      	strb	r2, [r3, #0]
					if(i==17){
 8000756:	4b60      	ldr	r3, [pc, #384]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b11      	cmp	r3, #17
 800075c:	f040 858c 	bne.w	8001278 <DecodeAnsESP+0xc44>
						AT=0;
 8000760:	4b5a      	ldr	r3, [pc, #360]	; (80008cc <DecodeAnsESP+0x298>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
						i=0;
 8000766:	4b5c      	ldr	r3, [pc, #368]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
						readyToSend=1;
 800076c:	4a5c      	ldr	r2, [pc, #368]	; (80008e0 <DecodeAnsESP+0x2ac>)
 800076e:	7813      	ldrb	r3, [r2, #0]
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	7013      	strb	r3, [r2, #0]
						HAL_UART_AbortReceive_IT(&huart1);
 8000776:	485f      	ldr	r0, [pc, #380]	; (80008f4 <DecodeAnsESP+0x2c0>)
 8000778:	f007 fd02 	bl	8008180 <HAL_UART_AbortReceive_IT>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);//Reset ESP8266
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	485d      	ldr	r0, [pc, #372]	; (80008f8 <DecodeAnsESP+0x2c4>)
 8000784:	f004 f974 	bl	8004a70 <HAL_GPIO_WritePin>
						timeOut=20;
 8000788:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <DecodeAnsESP+0x2c8>)
 800078a:	2214      	movs	r2, #20
 800078c:	701a      	strb	r2, [r3, #0]
			break;
 800078e:	f000 bd73 	b.w	8001278 <DecodeAnsESP+0xc44>
					AT=2;
 8000792:	4b4e      	ldr	r3, [pc, #312]	; (80008cc <DecodeAnsESP+0x298>)
 8000794:	2202      	movs	r2, #2
 8000796:	701a      	strb	r2, [r3, #0]
					i=0;
 8000798:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <DecodeAnsESP+0x2a4>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 800079e:	4a50      	ldr	r2, [pc, #320]	; (80008e0 <DecodeAnsESP+0x2ac>)
 80007a0:	7813      	ldrb	r3, [r2, #0]
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	7013      	strb	r3, [r2, #0]
					indexR_RxESP=indexW_RxESP;
 80007a8:	4b4f      	ldr	r3, [pc, #316]	; (80008e8 <DecodeAnsESP+0x2b4>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b48      	ldr	r3, [pc, #288]	; (80008d0 <DecodeAnsESP+0x29c>)
 80007b0:	701a      	strb	r2, [r3, #0]
					break;
 80007b2:	f000 bd6e 	b.w	8001292 <DecodeAnsESP+0xc5e>
		case 2:
			if(bufferRxESP[indexR_RxESP]==ANS_CWJAP_MEGA[i]){
 80007b6:	4b46      	ldr	r3, [pc, #280]	; (80008d0 <DecodeAnsESP+0x29c>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	4b45      	ldr	r3, [pc, #276]	; (80008d4 <DecodeAnsESP+0x2a0>)
 80007c0:	5c9b      	ldrb	r3, [r3, r2]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b44      	ldr	r3, [pc, #272]	; (80008d8 <DecodeAnsESP+0x2a4>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <DecodeAnsESP+0x2cc>)
 80007cc:	5c5b      	ldrb	r3, [r3, r1]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d11a      	bne.n	8000808 <DecodeAnsESP+0x1d4>
				i++;
 80007d2:	4b41      	ldr	r3, [pc, #260]	; (80008d8 <DecodeAnsESP+0x2a4>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <DecodeAnsESP+0x2a4>)
 80007dc:	701a      	strb	r2, [r3, #0]

				if(i==LONG_ANS_CWJAP_MEGA){
 80007de:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <DecodeAnsESP+0x2a4>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b46      	cmp	r3, #70	; 0x46
 80007e4:	f040 854a 	bne.w	800127c <DecodeAnsESP+0xc48>
					AT++;
 80007e8:	4b38      	ldr	r3, [pc, #224]	; (80008cc <DecodeAnsESP+0x298>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b36      	ldr	r3, [pc, #216]	; (80008cc <DecodeAnsESP+0x298>)
 80007f2:	701a      	strb	r2, [r3, #0]
					i=0;
 80007f4:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <DecodeAnsESP+0x2a4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 80007fa:	4a39      	ldr	r2, [pc, #228]	; (80008e0 <DecodeAnsESP+0x2ac>)
 80007fc:	7813      	ldrb	r3, [r2, #0]
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	7013      	strb	r3, [r2, #0]
					readyToSend=1;
					i=0;
					break;
				}
			}
			break;
 8000804:	f000 bd3a 	b.w	800127c <DecodeAnsESP+0xc48>
				if(!timeOut2){
 8000808:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <DecodeAnsESP+0x2b0>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	f040 8535 	bne.w	800127c <DecodeAnsESP+0xc48>
					indexR_RxESP=indexW_RxESP;
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <DecodeAnsESP+0x2b4>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <DecodeAnsESP+0x29c>)
 800081a:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 800081c:	4a30      	ldr	r2, [pc, #192]	; (80008e0 <DecodeAnsESP+0x2ac>)
 800081e:	7813      	ldrb	r3, [r2, #0]
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	7013      	strb	r3, [r2, #0]
					i=0;
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
					break;
 800082c:	f000 bd31 	b.w	8001292 <DecodeAnsESP+0xc5e>
		case 3:
			if(bufferRxESP[indexR_RxESP]==ANS_CIPMUX[i]){
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <DecodeAnsESP+0x29c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <DecodeAnsESP+0x2a0>)
 800083a:	5c9b      	ldrb	r3, [r3, r2]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	4619      	mov	r1, r3
 8000844:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <DecodeAnsESP+0x2d0>)
 8000846:	5c5b      	ldrb	r3, [r3, r1]
 8000848:	429a      	cmp	r2, r3
 800084a:	d11a      	bne.n	8000882 <DecodeAnsESP+0x24e>
				i++;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <DecodeAnsESP+0x2a4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000856:	701a      	strb	r2, [r3, #0]
				if(i==19){
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <DecodeAnsESP+0x2a4>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b13      	cmp	r3, #19
 800085e:	f040 850f 	bne.w	8001280 <DecodeAnsESP+0xc4c>
					AT+=2;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <DecodeAnsESP+0x298>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3302      	adds	r3, #2
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <DecodeAnsESP+0x298>)
 800086c:	701a      	strb	r2, [r3, #0]
					i=0;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <DecodeAnsESP+0x2a4>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000874:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <DecodeAnsESP+0x2ac>)
 8000876:	7813      	ldrb	r3, [r2, #0]
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	7013      	strb	r3, [r2, #0]
					readyToSend=1;
					i=0;
					break;
				}
			}
			break;
 800087e:	f000 bcff 	b.w	8001280 <DecodeAnsESP+0xc4c>
				if(!timeOut2){
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <DecodeAnsESP+0x2b0>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	f040 84fa 	bne.w	8001280 <DecodeAnsESP+0xc4c>
					indexR_RxESP=indexW_RxESP;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <DecodeAnsESP+0x2b4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <DecodeAnsESP+0x29c>)
 8000894:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <DecodeAnsESP+0x2ac>)
 8000898:	7813      	ldrb	r3, [r2, #0]
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	7013      	strb	r3, [r2, #0]
					i=0;
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <DecodeAnsESP+0x2a4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
					break;
 80008a6:	f000 bcf4 	b.w	8001292 <DecodeAnsESP+0xc5e>
		case 4:
			switch(decodeCIFSR){
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <DecodeAnsESP+0x2d4>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	f200 84e8 	bhi.w	8001284 <DecodeAnsESP+0xc50>
 80008b4:	a201      	add	r2, pc, #4	; (adr r2, 80008bc <DecodeAnsESP+0x288>)
 80008b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ba:	bf00      	nop
 80008bc:	0800090d 	.word	0x0800090d
 80008c0:	08000979 	.word	0x08000979
 80008c4:	080009bd 	.word	0x080009bd
 80008c8:	08000a1b 	.word	0x08000a1b
 80008cc:	20000848 	.word	0x20000848
 80008d0:	20000842 	.word	0x20000842
 80008d4:	20000540 	.word	0x20000540
 80008d8:	200008e9 	.word	0x200008e9
 80008dc:	08009240 	.word	0x08009240
 80008e0:	2000089c 	.word	0x2000089c
 80008e4:	2000084c 	.word	0x2000084c
 80008e8:	20000843 	.word	0x20000843
 80008ec:	080092f0 	.word	0x080092f0
 80008f0:	08009310 	.word	0x08009310
 80008f4:	200001b8 	.word	0x200001b8
 80008f8:	40020400 	.word	0x40020400
 80008fc:	2000084b 	.word	0x2000084b
 8000900:	08009254 	.word	0x08009254
 8000904:	0800929c 	.word	0x0800929c
 8000908:	20000853 	.word	0x20000853
				case 0:
					if(bufferRxESP[indexR_RxESP]==CIFSR[i]){
 800090c:	4b9b      	ldr	r3, [pc, #620]	; (8000b7c <DecodeAnsESP+0x548>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	461a      	mov	r2, r3
 8000914:	4b9a      	ldr	r3, [pc, #616]	; (8000b80 <DecodeAnsESP+0x54c>)
 8000916:	5c9b      	ldrb	r3, [r3, r2]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b9a      	ldr	r3, [pc, #616]	; (8000b84 <DecodeAnsESP+0x550>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4619      	mov	r1, r3
 8000920:	4b99      	ldr	r3, [pc, #612]	; (8000b88 <DecodeAnsESP+0x554>)
 8000922:	5c5b      	ldrb	r3, [r3, r1]
 8000924:	429a      	cmp	r2, r3
 8000926:	d114      	bne.n	8000952 <DecodeAnsESP+0x31e>
						i++;
 8000928:	4b96      	ldr	r3, [pc, #600]	; (8000b84 <DecodeAnsESP+0x550>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b94      	ldr	r3, [pc, #592]	; (8000b84 <DecodeAnsESP+0x550>)
 8000932:	701a      	strb	r2, [r3, #0]

						if(i==10){
 8000934:	4b93      	ldr	r3, [pc, #588]	; (8000b84 <DecodeAnsESP+0x550>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b0a      	cmp	r3, #10
 800093a:	f040 8098 	bne.w	8000a6e <DecodeAnsESP+0x43a>
							decodeCIFSR++;
 800093e:	4b93      	ldr	r3, [pc, #588]	; (8000b8c <DecodeAnsESP+0x558>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b91      	ldr	r3, [pc, #580]	; (8000b8c <DecodeAnsESP+0x558>)
 8000948:	701a      	strb	r2, [r3, #0]
							i=0;
 800094a:	4b8e      	ldr	r3, [pc, #568]	; (8000b84 <DecodeAnsESP+0x550>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
							i=0;
							break;
						}
					}
					break;
 8000950:	e08d      	b.n	8000a6e <DecodeAnsESP+0x43a>
						if(!timeOut2){
 8000952:	4b8f      	ldr	r3, [pc, #572]	; (8000b90 <DecodeAnsESP+0x55c>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	f040 8089 	bne.w	8000a6e <DecodeAnsESP+0x43a>
							indexR_RxESP=indexW_RxESP;
 800095c:	4b8d      	ldr	r3, [pc, #564]	; (8000b94 <DecodeAnsESP+0x560>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b86      	ldr	r3, [pc, #536]	; (8000b7c <DecodeAnsESP+0x548>)
 8000964:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000966:	4a8c      	ldr	r2, [pc, #560]	; (8000b98 <DecodeAnsESP+0x564>)
 8000968:	7813      	ldrb	r3, [r2, #0]
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	7013      	strb	r3, [r2, #0]
							i=0;
 8000970:	4b84      	ldr	r3, [pc, #528]	; (8000b84 <DecodeAnsESP+0x550>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
							break;
 8000976:	e084      	b.n	8000a82 <DecodeAnsESP+0x44e>
				case 1:
					if(bufferRxESP[indexR_RxESP]==CIFSR_STAIP[i]){
 8000978:	4b80      	ldr	r3, [pc, #512]	; (8000b7c <DecodeAnsESP+0x548>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	4b7f      	ldr	r3, [pc, #508]	; (8000b80 <DecodeAnsESP+0x54c>)
 8000982:	5c9b      	ldrb	r3, [r3, r2]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b7f      	ldr	r3, [pc, #508]	; (8000b84 <DecodeAnsESP+0x550>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	4b83      	ldr	r3, [pc, #524]	; (8000b9c <DecodeAnsESP+0x568>)
 800098e:	5c5b      	ldrb	r3, [r3, r1]
 8000990:	429a      	cmp	r2, r3
 8000992:	d16f      	bne.n	8000a74 <DecodeAnsESP+0x440>
						i++;
 8000994:	4b7b      	ldr	r3, [pc, #492]	; (8000b84 <DecodeAnsESP+0x550>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b79      	ldr	r3, [pc, #484]	; (8000b84 <DecodeAnsESP+0x550>)
 800099e:	701a      	strb	r2, [r3, #0]
						if(i==13){
 80009a0:	4b78      	ldr	r3, [pc, #480]	; (8000b84 <DecodeAnsESP+0x550>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b0d      	cmp	r3, #13
 80009a6:	d165      	bne.n	8000a74 <DecodeAnsESP+0x440>
							decodeCIFSR++;
 80009a8:	4b78      	ldr	r3, [pc, #480]	; (8000b8c <DecodeAnsESP+0x558>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b76      	ldr	r3, [pc, #472]	; (8000b8c <DecodeAnsESP+0x558>)
 80009b2:	701a      	strb	r2, [r3, #0]
							i=0;
 80009b4:	4b73      	ldr	r3, [pc, #460]	; (8000b84 <DecodeAnsESP+0x550>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
						}
					}
					break;
 80009ba:	e05b      	b.n	8000a74 <DecodeAnsESP+0x440>
				case 2:
					espIP[i]=bufferRxESP[indexR_RxESP];
 80009bc:	4b6f      	ldr	r3, [pc, #444]	; (8000b7c <DecodeAnsESP+0x548>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4619      	mov	r1, r3
 80009c4:	4b6f      	ldr	r3, [pc, #444]	; (8000b84 <DecodeAnsESP+0x550>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b6d      	ldr	r3, [pc, #436]	; (8000b80 <DecodeAnsESP+0x54c>)
 80009cc:	5c5b      	ldrb	r3, [r3, r1]
 80009ce:	b2d9      	uxtb	r1, r3
 80009d0:	4b73      	ldr	r3, [pc, #460]	; (8000ba0 <DecodeAnsESP+0x56c>)
 80009d2:	5499      	strb	r1, [r3, r2]
					i++;
 80009d4:	4b6b      	ldr	r3, [pc, #428]	; (8000b84 <DecodeAnsESP+0x550>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b69      	ldr	r3, [pc, #420]	; (8000b84 <DecodeAnsESP+0x550>)
 80009de:	701a      	strb	r2, [r3, #0]
					lengthIP++;
 80009e0:	4b70      	ldr	r3, [pc, #448]	; (8000ba4 <DecodeAnsESP+0x570>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b6e      	ldr	r3, [pc, #440]	; (8000ba4 <DecodeAnsESP+0x570>)
 80009ea:	701a      	strb	r2, [r3, #0]
					if((bufferRxESP[indexR_RxESP]=='"')&&(lengthIP>1)){
 80009ec:	4b63      	ldr	r3, [pc, #396]	; (8000b7c <DecodeAnsESP+0x548>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b62      	ldr	r3, [pc, #392]	; (8000b80 <DecodeAnsESP+0x54c>)
 80009f6:	5c9b      	ldrb	r3, [r3, r2]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b22      	cmp	r3, #34	; 0x22
 80009fc:	d13d      	bne.n	8000a7a <DecodeAnsESP+0x446>
 80009fe:	4b69      	ldr	r3, [pc, #420]	; (8000ba4 <DecodeAnsESP+0x570>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d939      	bls.n	8000a7a <DecodeAnsESP+0x446>
						i=0;
 8000a06:	4b5f      	ldr	r3, [pc, #380]	; (8000b84 <DecodeAnsESP+0x550>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
						decodeCIFSR++;
 8000a0c:	4b5f      	ldr	r3, [pc, #380]	; (8000b8c <DecodeAnsESP+0x558>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b5d      	ldr	r3, [pc, #372]	; (8000b8c <DecodeAnsESP+0x558>)
 8000a16:	701a      	strb	r2, [r3, #0]
					}
					break;
 8000a18:	e02f      	b.n	8000a7a <DecodeAnsESP+0x446>
				case 3:
					if(bufferRxESP[indexR_RxESP]==OK[i]){
 8000a1a:	4b58      	ldr	r3, [pc, #352]	; (8000b7c <DecodeAnsESP+0x548>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b57      	ldr	r3, [pc, #348]	; (8000b80 <DecodeAnsESP+0x54c>)
 8000a24:	5c9b      	ldrb	r3, [r3, r2]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b56      	ldr	r3, [pc, #344]	; (8000b84 <DecodeAnsESP+0x550>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ba8 <DecodeAnsESP+0x574>)
 8000a30:	5c5b      	ldrb	r3, [r3, r1]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d124      	bne.n	8000a80 <DecodeAnsESP+0x44c>
						i++;
 8000a36:	4b53      	ldr	r3, [pc, #332]	; (8000b84 <DecodeAnsESP+0x550>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b51      	ldr	r3, [pc, #324]	; (8000b84 <DecodeAnsESP+0x550>)
 8000a40:	701a      	strb	r2, [r3, #0]
						if(i==6){
 8000a42:	4b50      	ldr	r3, [pc, #320]	; (8000b84 <DecodeAnsESP+0x550>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d11a      	bne.n	8000a80 <DecodeAnsESP+0x44c>
							AT++;
 8000a4a:	4b58      	ldr	r3, [pc, #352]	; (8000bac <DecodeAnsESP+0x578>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b56      	ldr	r3, [pc, #344]	; (8000bac <DecodeAnsESP+0x578>)
 8000a54:	701a      	strb	r2, [r3, #0]
							i=0;
 8000a56:	4b4b      	ldr	r3, [pc, #300]	; (8000b84 <DecodeAnsESP+0x550>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000a5c:	4a4e      	ldr	r2, [pc, #312]	; (8000b98 <DecodeAnsESP+0x564>)
 8000a5e:	7813      	ldrb	r3, [r2, #0]
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	7013      	strb	r3, [r2, #0]
							decodeCIFSR=0;
 8000a66:	4b49      	ldr	r3, [pc, #292]	; (8000b8c <DecodeAnsESP+0x558>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
						}
					}
					break;
 8000a6c:	e008      	b.n	8000a80 <DecodeAnsESP+0x44c>
					break;
 8000a6e:	bf00      	nop
 8000a70:	f000 bc08 	b.w	8001284 <DecodeAnsESP+0xc50>
					break;
 8000a74:	bf00      	nop
 8000a76:	f000 bc05 	b.w	8001284 <DecodeAnsESP+0xc50>
					break;
 8000a7a:	bf00      	nop
 8000a7c:	f000 bc02 	b.w	8001284 <DecodeAnsESP+0xc50>
					break;
 8000a80:	bf00      	nop
			}

			break;
 8000a82:	e3ff      	b.n	8001284 <DecodeAnsESP+0xc50>
		case 5:
			if(bufferRxESP[indexR_RxESP]==ANS_CIPSTART[i]){
 8000a84:	4b3d      	ldr	r3, [pc, #244]	; (8000b7c <DecodeAnsESP+0x548>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <DecodeAnsESP+0x54c>)
 8000a8e:	5c9b      	ldrb	r3, [r3, r2]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <DecodeAnsESP+0x550>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	4b45      	ldr	r3, [pc, #276]	; (8000bb0 <DecodeAnsESP+0x57c>)
 8000a9a:	5c5b      	ldrb	r3, [r3, r1]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d11e      	bne.n	8000ade <DecodeAnsESP+0x4aa>
				i++;
 8000aa0:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <DecodeAnsESP+0x550>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <DecodeAnsESP+0x550>)
 8000aaa:	701a      	strb	r2, [r3, #0]
				if(i==60){
 8000aac:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <DecodeAnsESP+0x550>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b3c      	cmp	r3, #60	; 0x3c
 8000ab2:	f040 83e9 	bne.w	8001288 <DecodeAnsESP+0xc54>
					AT++;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <DecodeAnsESP+0x578>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b3b      	ldr	r3, [pc, #236]	; (8000bac <DecodeAnsESP+0x578>)
 8000ac0:	701a      	strb	r2, [r3, #0]
					i=0;
 8000ac2:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <DecodeAnsESP+0x550>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000ac8:	4a33      	ldr	r2, [pc, #204]	; (8000b98 <DecodeAnsESP+0x564>)
 8000aca:	7813      	ldrb	r3, [r2, #0]
 8000acc:	f043 0310 	orr.w	r3, r3, #16
 8000ad0:	7013      	strb	r3, [r2, #0]
					espConnected=1;
 8000ad2:	4a38      	ldr	r2, [pc, #224]	; (8000bb4 <DecodeAnsESP+0x580>)
 8000ad4:	7813      	ldrb	r3, [r2, #0]
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	7013      	strb	r3, [r2, #0]
					readyToSend=1;
					i=0;
					break;
				}
			}
			break;
 8000adc:	e3d4      	b.n	8001288 <DecodeAnsESP+0xc54>
				if(!timeOut2){
 8000ade:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <DecodeAnsESP+0x55c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f040 83d0 	bne.w	8001288 <DecodeAnsESP+0xc54>
					indexR_RxESP=indexW_RxESP;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <DecodeAnsESP+0x560>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <DecodeAnsESP+0x548>)
 8000af0:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000af2:	4a29      	ldr	r2, [pc, #164]	; (8000b98 <DecodeAnsESP+0x564>)
 8000af4:	7813      	ldrb	r3, [r2, #0]
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	7013      	strb	r3, [r2, #0]
					i=0;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <DecodeAnsESP+0x550>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
					break;
 8000b02:	e3c6      	b.n	8001292 <DecodeAnsESP+0xc5e>
		case 6:
			switch(decodeCIPSEND){
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <DecodeAnsESP+0x584>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b07      	cmp	r3, #7
 8000b0a:	f200 83bf 	bhi.w	800128c <DecodeAnsESP+0xc58>
 8000b0e:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <DecodeAnsESP+0x4e0>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b35 	.word	0x08000b35
 8000b18:	08000c01 	.word	0x08000c01
 8000b1c:	08000c89 	.word	0x08000c89
 8000b20:	08000cbb 	.word	0x08000cbb
 8000b24:	08000d5b 	.word	0x08000d5b
 8000b28:	08000de7 	.word	0x08000de7
 8000b2c:	08000ec9 	.word	0x08000ec9
 8000b30:	08000f35 	.word	0x08000f35
					case 0:
						if(bufferRxESP[indexR_RxESP]==CIPSEND1[i]){
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <DecodeAnsESP+0x548>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <DecodeAnsESP+0x54c>)
 8000b3e:	5c9b      	ldrb	r3, [r3, r2]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <DecodeAnsESP+0x550>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <DecodeAnsESP+0x588>)
 8000b4a:	5c5b      	ldrb	r3, [r3, r1]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d137      	bne.n	8000bc0 <DecodeAnsESP+0x58c>
							i++;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <DecodeAnsESP+0x550>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <DecodeAnsESP+0x550>)
 8000b5a:	701a      	strb	r2, [r3, #0]
							if(i==11){
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <DecodeAnsESP+0x550>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b0b      	cmp	r3, #11
 8000b62:	f040 8232 	bne.w	8000fca <DecodeAnsESP+0x996>
								i=0;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <DecodeAnsESP+0x550>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND++;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <DecodeAnsESP+0x584>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <DecodeAnsESP+0x584>)
 8000b76:	701a      	strb	r2, [r3, #0]
								sendALIVE=0;
								timeToSendAlive=30;
								break;
							}
						}
						break;
 8000b78:	e227      	b.n	8000fca <DecodeAnsESP+0x996>
 8000b7a:	bf00      	nop
 8000b7c:	20000842 	.word	0x20000842
 8000b80:	20000540 	.word	0x20000540
 8000b84:	200008e9 	.word	0x200008e9
 8000b88:	080091d8 	.word	0x080091d8
 8000b8c:	20000853 	.word	0x20000853
 8000b90:	2000084c 	.word	0x2000084c
 8000b94:	20000843 	.word	0x20000843
 8000b98:	2000089c 	.word	0x2000089c
 8000b9c:	08009324 	.word	0x08009324
 8000ba0:	20000854 	.word	0x20000854
 8000ba4:	20000863 	.word	0x20000863
 8000ba8:	08009334 	.word	0x08009334
 8000bac:	20000848 	.word	0x20000848
 8000bb0:	080092b0 	.word	0x080092b0
 8000bb4:	200008a0 	.word	0x200008a0
 8000bb8:	20000852 	.word	0x20000852
 8000bbc:	0800933c 	.word	0x0800933c
							if(!timeOut2){
 8000bc0:	4ba4      	ldr	r3, [pc, #656]	; (8000e54 <DecodeAnsESP+0x820>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8200 	bne.w	8000fca <DecodeAnsESP+0x996>
								indexR_RxESP=indexW_RxESP;
 8000bca:	4ba3      	ldr	r3, [pc, #652]	; (8000e58 <DecodeAnsESP+0x824>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4ba2      	ldr	r3, [pc, #648]	; (8000e5c <DecodeAnsESP+0x828>)
 8000bd2:	701a      	strb	r2, [r3, #0]
								readyToSend=1;
 8000bd4:	4aa2      	ldr	r2, [pc, #648]	; (8000e60 <DecodeAnsESP+0x82c>)
 8000bd6:	7813      	ldrb	r3, [r2, #0]
 8000bd8:	f043 0310 	orr.w	r3, r3, #16
 8000bdc:	7013      	strb	r3, [r2, #0]
								i=0;
 8000bde:	4ba1      	ldr	r3, [pc, #644]	; (8000e64 <DecodeAnsESP+0x830>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
								espReadyToRecieve=0;
 8000be4:	4a9e      	ldr	r2, [pc, #632]	; (8000e60 <DecodeAnsESP+0x82c>)
 8000be6:	7813      	ldrb	r3, [r2, #0]
 8000be8:	f36f 1345 	bfc	r3, #5, #1
 8000bec:	7013      	strb	r3, [r2, #0]
								sendALIVE=0;
 8000bee:	4a9e      	ldr	r2, [pc, #632]	; (8000e68 <DecodeAnsESP+0x834>)
 8000bf0:	7813      	ldrb	r3, [r2, #0]
 8000bf2:	f36f 0341 	bfc	r3, #1, #1
 8000bf6:	7013      	strb	r3, [r2, #0]
								timeToSendAlive=30;
 8000bf8:	4b9c      	ldr	r3, [pc, #624]	; (8000e6c <DecodeAnsESP+0x838>)
 8000bfa:	221e      	movs	r2, #30
 8000bfc:	701a      	strb	r2, [r3, #0]
								break;
 8000bfe:	e1ef      	b.n	8000fe0 <DecodeAnsESP+0x9ac>
					case 1:
						if((bufferRxESP[indexR_RxESP]==bytesToSend+'0')&&((bytesToSend<10))){
 8000c00:	4b96      	ldr	r3, [pc, #600]	; (8000e5c <DecodeAnsESP+0x828>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b99      	ldr	r3, [pc, #612]	; (8000e70 <DecodeAnsESP+0x83c>)
 8000c0a:	5c9b      	ldrb	r3, [r3, r2]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b98      	ldr	r3, [pc, #608]	; (8000e74 <DecodeAnsESP+0x840>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	3330      	adds	r3, #48	; 0x30
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d10a      	bne.n	8000c30 <DecodeAnsESP+0x5fc>
 8000c1a:	4b96      	ldr	r3, [pc, #600]	; (8000e74 <DecodeAnsESP+0x840>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b09      	cmp	r3, #9
 8000c20:	d806      	bhi.n	8000c30 <DecodeAnsESP+0x5fc>
							decodeCIPSEND+=2;
 8000c22:	4b95      	ldr	r3, [pc, #596]	; (8000e78 <DecodeAnsESP+0x844>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	3302      	adds	r3, #2
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b93      	ldr	r3, [pc, #588]	; (8000e78 <DecodeAnsESP+0x844>)
 8000c2c:	701a      	strb	r2, [r3, #0]
								bytesToSend_aux=bytesToSend/10;
								bytesToSend_aux*=10;
							}

						}
						break;
 8000c2e:	e1ce      	b.n	8000fce <DecodeAnsESP+0x99a>
							if(bufferRxESP[indexR_RxESP]==bytesToSend/10+'0'){
 8000c30:	4b8a      	ldr	r3, [pc, #552]	; (8000e5c <DecodeAnsESP+0x828>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b8d      	ldr	r3, [pc, #564]	; (8000e70 <DecodeAnsESP+0x83c>)
 8000c3a:	5c9b      	ldrb	r3, [r3, r2]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4b8c      	ldr	r3, [pc, #560]	; (8000e74 <DecodeAnsESP+0x840>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4a8d      	ldr	r2, [pc, #564]	; (8000e7c <DecodeAnsESP+0x848>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	3330      	adds	r3, #48	; 0x30
 8000c50:	4299      	cmp	r1, r3
 8000c52:	f040 81bc 	bne.w	8000fce <DecodeAnsESP+0x99a>
								decodeCIPSEND++;
 8000c56:	4b88      	ldr	r3, [pc, #544]	; (8000e78 <DecodeAnsESP+0x844>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b86      	ldr	r3, [pc, #536]	; (8000e78 <DecodeAnsESP+0x844>)
 8000c60:	701a      	strb	r2, [r3, #0]
								bytesToSend_aux=bytesToSend/10;
 8000c62:	4b84      	ldr	r3, [pc, #528]	; (8000e74 <DecodeAnsESP+0x840>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	4a85      	ldr	r2, [pc, #532]	; (8000e7c <DecodeAnsESP+0x848>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	08db      	lsrs	r3, r3, #3
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b83      	ldr	r3, [pc, #524]	; (8000e80 <DecodeAnsESP+0x84c>)
 8000c72:	701a      	strb	r2, [r3, #0]
								bytesToSend_aux*=10;
 8000c74:	4b82      	ldr	r3, [pc, #520]	; (8000e80 <DecodeAnsESP+0x84c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	0092      	lsls	r2, r2, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b7f      	ldr	r3, [pc, #508]	; (8000e80 <DecodeAnsESP+0x84c>)
 8000c84:	701a      	strb	r2, [r3, #0]
						break;
 8000c86:	e1a2      	b.n	8000fce <DecodeAnsESP+0x99a>
					case 2:
						if(bufferRxESP[indexR_RxESP]==bytesToSend-bytesToSend_aux+'0'){
 8000c88:	4b74      	ldr	r3, [pc, #464]	; (8000e5c <DecodeAnsESP+0x828>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b77      	ldr	r3, [pc, #476]	; (8000e70 <DecodeAnsESP+0x83c>)
 8000c92:	5c9b      	ldrb	r3, [r3, r2]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b76      	ldr	r3, [pc, #472]	; (8000e74 <DecodeAnsESP+0x840>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4b78      	ldr	r3, [pc, #480]	; (8000e80 <DecodeAnsESP+0x84c>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	3330      	adds	r3, #48	; 0x30
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	f040 8193 	bne.w	8000fd2 <DecodeAnsESP+0x99e>
							decodeCIPSEND++;
 8000cac:	4b72      	ldr	r3, [pc, #456]	; (8000e78 <DecodeAnsESP+0x844>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b70      	ldr	r3, [pc, #448]	; (8000e78 <DecodeAnsESP+0x844>)
 8000cb6:	701a      	strb	r2, [r3, #0]
						}
						break;
 8000cb8:	e18b      	b.n	8000fd2 <DecodeAnsESP+0x99e>
					case 3:
						if(bufferRxESP[indexR_RxESP]==CIPSEND2[i]){
 8000cba:	4b68      	ldr	r3, [pc, #416]	; (8000e5c <DecodeAnsESP+0x828>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b6b      	ldr	r3, [pc, #428]	; (8000e70 <DecodeAnsESP+0x83c>)
 8000cc4:	5c9b      	ldrb	r3, [r3, r2]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b66      	ldr	r3, [pc, #408]	; (8000e64 <DecodeAnsESP+0x830>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4b6d      	ldr	r3, [pc, #436]	; (8000e84 <DecodeAnsESP+0x850>)
 8000cd0:	5c5b      	ldrb	r3, [r3, r1]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d11e      	bne.n	8000d14 <DecodeAnsESP+0x6e0>
							i++;
 8000cd6:	4b63      	ldr	r3, [pc, #396]	; (8000e64 <DecodeAnsESP+0x830>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b61      	ldr	r3, [pc, #388]	; (8000e64 <DecodeAnsESP+0x830>)
 8000ce0:	701a      	strb	r2, [r3, #0]
							if(i==9){
 8000ce2:	4b60      	ldr	r3, [pc, #384]	; (8000e64 <DecodeAnsESP+0x830>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b09      	cmp	r3, #9
 8000ce8:	f040 8175 	bne.w	8000fd6 <DecodeAnsESP+0x9a2>
								i=0;
 8000cec:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <DecodeAnsESP+0x830>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND++;
 8000cf2:	4b61      	ldr	r3, [pc, #388]	; (8000e78 <DecodeAnsESP+0x844>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b5f      	ldr	r3, [pc, #380]	; (8000e78 <DecodeAnsESP+0x844>)
 8000cfc:	701a      	strb	r2, [r3, #0]
								espReadyToRecieve=1;
 8000cfe:	4a58      	ldr	r2, [pc, #352]	; (8000e60 <DecodeAnsESP+0x82c>)
 8000d00:	7813      	ldrb	r3, [r2, #0]
 8000d02:	f043 0320 	orr.w	r3, r3, #32
 8000d06:	7013      	strb	r3, [r2, #0]
								readyToSend=1;
 8000d08:	4a55      	ldr	r2, [pc, #340]	; (8000e60 <DecodeAnsESP+0x82c>)
 8000d0a:	7813      	ldrb	r3, [r2, #0]
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	7013      	strb	r3, [r2, #0]
								timeToSendAlive=30;
								return;
							}
						}

						break;
 8000d12:	e160      	b.n	8000fd6 <DecodeAnsESP+0x9a2>
							if(!timeOut2){
 8000d14:	4b4f      	ldr	r3, [pc, #316]	; (8000e54 <DecodeAnsESP+0x820>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f040 815c 	bne.w	8000fd6 <DecodeAnsESP+0x9a2>
								i=0;
 8000d1e:	4b51      	ldr	r3, [pc, #324]	; (8000e64 <DecodeAnsESP+0x830>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND=0;
 8000d24:	4b54      	ldr	r3, [pc, #336]	; (8000e78 <DecodeAnsESP+0x844>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
								espReadyToRecieve=0;
 8000d2a:	4a4d      	ldr	r2, [pc, #308]	; (8000e60 <DecodeAnsESP+0x82c>)
 8000d2c:	7813      	ldrb	r3, [r2, #0]
 8000d2e:	f36f 1345 	bfc	r3, #5, #1
 8000d32:	7013      	strb	r3, [r2, #0]
								readyToSend=1;
 8000d34:	4a4a      	ldr	r2, [pc, #296]	; (8000e60 <DecodeAnsESP+0x82c>)
 8000d36:	7813      	ldrb	r3, [r2, #0]
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	7013      	strb	r3, [r2, #0]
								indexR_RxESP=indexW_RxESP;
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <DecodeAnsESP+0x824>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <DecodeAnsESP+0x828>)
 8000d46:	701a      	strb	r2, [r3, #0]
								sendALIVE=0;
 8000d48:	4a47      	ldr	r2, [pc, #284]	; (8000e68 <DecodeAnsESP+0x834>)
 8000d4a:	7813      	ldrb	r3, [r2, #0]
 8000d4c:	f36f 0341 	bfc	r3, #1, #1
 8000d50:	7013      	strb	r3, [r2, #0]
								timeToSendAlive=30;
 8000d52:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <DecodeAnsESP+0x838>)
 8000d54:	221e      	movs	r2, #30
 8000d56:	701a      	strb	r2, [r3, #0]
								return;
 8000d58:	e2a2      	b.n	80012a0 <DecodeAnsESP+0xc6c>
					case 4:
						if(bufferRxESP[indexR_RxESP]==CIPSEND3[i]){
 8000d5a:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <DecodeAnsESP+0x828>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <DecodeAnsESP+0x83c>)
 8000d64:	5c9b      	ldrb	r3, [r3, r2]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <DecodeAnsESP+0x830>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <DecodeAnsESP+0x854>)
 8000d70:	5c5b      	ldrb	r3, [r3, r1]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d114      	bne.n	8000da0 <DecodeAnsESP+0x76c>
							i++;
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <DecodeAnsESP+0x830>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <DecodeAnsESP+0x830>)
 8000d80:	701a      	strb	r2, [r3, #0]
							if(i==5){
 8000d82:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <DecodeAnsESP+0x830>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b05      	cmp	r3, #5
 8000d88:	f040 8127 	bne.w	8000fda <DecodeAnsESP+0x9a6>
								i=0;
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <DecodeAnsESP+0x830>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND++;
 8000d92:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <DecodeAnsESP+0x844>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <DecodeAnsESP+0x844>)
 8000d9c:	701a      	strb	r2, [r3, #0]
								sendALIVE=0;
								timeToSendAlive=30;
								break;
							}
						}
						break;
 8000d9e:	e11c      	b.n	8000fda <DecodeAnsESP+0x9a6>
							if(!timeOut2){
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <DecodeAnsESP+0x820>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f040 8118 	bne.w	8000fda <DecodeAnsESP+0x9a6>
								i=0;
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <DecodeAnsESP+0x830>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND=0;
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <DecodeAnsESP+0x844>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
								espReadyToRecieve=0;
 8000db6:	4a2a      	ldr	r2, [pc, #168]	; (8000e60 <DecodeAnsESP+0x82c>)
 8000db8:	7813      	ldrb	r3, [r2, #0]
 8000dba:	f36f 1345 	bfc	r3, #5, #1
 8000dbe:	7013      	strb	r3, [r2, #0]
								readyToSend=1;
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <DecodeAnsESP+0x82c>)
 8000dc2:	7813      	ldrb	r3, [r2, #0]
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	7013      	strb	r3, [r2, #0]
								indexR_RxESP=indexW_RxESP;
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <DecodeAnsESP+0x824>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <DecodeAnsESP+0x828>)
 8000dd2:	701a      	strb	r2, [r3, #0]
								sendALIVE=0;
 8000dd4:	4a24      	ldr	r2, [pc, #144]	; (8000e68 <DecodeAnsESP+0x834>)
 8000dd6:	7813      	ldrb	r3, [r2, #0]
 8000dd8:	f36f 0341 	bfc	r3, #1, #1
 8000ddc:	7013      	strb	r3, [r2, #0]
								timeToSendAlive=30;
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <DecodeAnsESP+0x838>)
 8000de0:	221e      	movs	r2, #30
 8000de2:	701a      	strb	r2, [r3, #0]
								break;
 8000de4:	e0fc      	b.n	8000fe0 <DecodeAnsESP+0x9ac>
					case 5:
						if((bufferRxESP[indexR_RxESP]==bytesToSend+'0')&&((bytesToSend<10))){
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <DecodeAnsESP+0x828>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <DecodeAnsESP+0x83c>)
 8000df0:	5c9b      	ldrb	r3, [r3, r2]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <DecodeAnsESP+0x840>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	3330      	adds	r3, #48	; 0x30
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d110      	bne.n	8000e22 <DecodeAnsESP+0x7ee>
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <DecodeAnsESP+0x840>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b09      	cmp	r3, #9
 8000e06:	d80c      	bhi.n	8000e22 <DecodeAnsESP+0x7ee>
							decodeCIPSEND++;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <DecodeAnsESP+0x844>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <DecodeAnsESP+0x844>)
 8000e12:	701a      	strb	r2, [r3, #0]
							decodeCIPSEND++;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <DecodeAnsESP+0x844>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <DecodeAnsESP+0x844>)
 8000e1e:	701a      	strb	r2, [r3, #0]
								sendALIVE=0;
								timeToSendAlive=30;
								break;
							}
						}
						break;
 8000e20:	e0de      	b.n	8000fe0 <DecodeAnsESP+0x9ac>
							if(bufferRxESP[indexR_RxESP]==bytesToSend/10+'0'){
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <DecodeAnsESP+0x828>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <DecodeAnsESP+0x83c>)
 8000e2c:	5c9b      	ldrb	r3, [r3, r2]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4619      	mov	r1, r3
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <DecodeAnsESP+0x840>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <DecodeAnsESP+0x848>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	3330      	adds	r3, #48	; 0x30
 8000e42:	4299      	cmp	r1, r3
 8000e44:	d122      	bne.n	8000e8c <DecodeAnsESP+0x858>
								decodeCIPSEND++;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <DecodeAnsESP+0x844>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <DecodeAnsESP+0x844>)
 8000e50:	701a      	strb	r2, [r3, #0]
						break;
 8000e52:	e0c5      	b.n	8000fe0 <DecodeAnsESP+0x9ac>
 8000e54:	2000084c 	.word	0x2000084c
 8000e58:	20000843 	.word	0x20000843
 8000e5c:	20000842 	.word	0x20000842
 8000e60:	2000089c 	.word	0x2000089c
 8000e64:	200008e9 	.word	0x200008e9
 8000e68:	200008a0 	.word	0x200008a0
 8000e6c:	2000084e 	.word	0x2000084e
 8000e70:	20000540 	.word	0x20000540
 8000e74:	20000867 	.word	0x20000867
 8000e78:	20000852 	.word	0x20000852
 8000e7c:	cccccccd 	.word	0xcccccccd
 8000e80:	20000869 	.word	0x20000869
 8000e84:	08009348 	.word	0x08009348
 8000e88:	08009354 	.word	0x08009354
								i=0;
 8000e8c:	4b9c      	ldr	r3, [pc, #624]	; (8001100 <DecodeAnsESP+0xacc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND=0;
 8000e92:	4b9c      	ldr	r3, [pc, #624]	; (8001104 <DecodeAnsESP+0xad0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
								espReadyToRecieve=0;
 8000e98:	4a9b      	ldr	r2, [pc, #620]	; (8001108 <DecodeAnsESP+0xad4>)
 8000e9a:	7813      	ldrb	r3, [r2, #0]
 8000e9c:	f36f 1345 	bfc	r3, #5, #1
 8000ea0:	7013      	strb	r3, [r2, #0]
								readyToSend=1;
 8000ea2:	4a99      	ldr	r2, [pc, #612]	; (8001108 <DecodeAnsESP+0xad4>)
 8000ea4:	7813      	ldrb	r3, [r2, #0]
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	7013      	strb	r3, [r2, #0]
								indexR_RxESP=indexW_RxESP;
 8000eac:	4b97      	ldr	r3, [pc, #604]	; (800110c <DecodeAnsESP+0xad8>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b97      	ldr	r3, [pc, #604]	; (8001110 <DecodeAnsESP+0xadc>)
 8000eb4:	701a      	strb	r2, [r3, #0]
								sendALIVE=0;
 8000eb6:	4a97      	ldr	r2, [pc, #604]	; (8001114 <DecodeAnsESP+0xae0>)
 8000eb8:	7813      	ldrb	r3, [r2, #0]
 8000eba:	f36f 0341 	bfc	r3, #1, #1
 8000ebe:	7013      	strb	r3, [r2, #0]
								timeToSendAlive=30;
 8000ec0:	4b95      	ldr	r3, [pc, #596]	; (8001118 <DecodeAnsESP+0xae4>)
 8000ec2:	221e      	movs	r2, #30
 8000ec4:	701a      	strb	r2, [r3, #0]
								break;
 8000ec6:	e08b      	b.n	8000fe0 <DecodeAnsESP+0x9ac>
					case 6:
						if(bufferRxESP[indexR_RxESP]==bytesToSend-bytesToSend_aux+'0'){
 8000ec8:	4b91      	ldr	r3, [pc, #580]	; (8001110 <DecodeAnsESP+0xadc>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b92      	ldr	r3, [pc, #584]	; (800111c <DecodeAnsESP+0xae8>)
 8000ed2:	5c9b      	ldrb	r3, [r3, r2]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b91      	ldr	r3, [pc, #580]	; (8001120 <DecodeAnsESP+0xaec>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4b91      	ldr	r3, [pc, #580]	; (8001124 <DecodeAnsESP+0xaf0>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	3330      	adds	r3, #48	; 0x30
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d106      	bne.n	8000ef8 <DecodeAnsESP+0x8c4>
							decodeCIPSEND++;
 8000eea:	4b86      	ldr	r3, [pc, #536]	; (8001104 <DecodeAnsESP+0xad0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b84      	ldr	r3, [pc, #528]	; (8001104 <DecodeAnsESP+0xad0>)
 8000ef4:	701a      	strb	r2, [r3, #0]
							indexR_RxESP=indexW_RxESP;
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
						break;
 8000ef6:	e073      	b.n	8000fe0 <DecodeAnsESP+0x9ac>
							i=0;
 8000ef8:	4b81      	ldr	r3, [pc, #516]	; (8001100 <DecodeAnsESP+0xacc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
							decodeCIPSEND=0;
 8000efe:	4b81      	ldr	r3, [pc, #516]	; (8001104 <DecodeAnsESP+0xad0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
							espReadyToRecieve=0;
 8000f04:	4a80      	ldr	r2, [pc, #512]	; (8001108 <DecodeAnsESP+0xad4>)
 8000f06:	7813      	ldrb	r3, [r2, #0]
 8000f08:	f36f 1345 	bfc	r3, #5, #1
 8000f0c:	7013      	strb	r3, [r2, #0]
							readyToSend=1;
 8000f0e:	4a7e      	ldr	r2, [pc, #504]	; (8001108 <DecodeAnsESP+0xad4>)
 8000f10:	7813      	ldrb	r3, [r2, #0]
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	7013      	strb	r3, [r2, #0]
							indexR_RxESP=indexW_RxESP;
 8000f18:	4b7c      	ldr	r3, [pc, #496]	; (800110c <DecodeAnsESP+0xad8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b7c      	ldr	r3, [pc, #496]	; (8001110 <DecodeAnsESP+0xadc>)
 8000f20:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
 8000f22:	4a7c      	ldr	r2, [pc, #496]	; (8001114 <DecodeAnsESP+0xae0>)
 8000f24:	7813      	ldrb	r3, [r2, #0]
 8000f26:	f36f 0341 	bfc	r3, #1, #1
 8000f2a:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8000f2c:	4b7a      	ldr	r3, [pc, #488]	; (8001118 <DecodeAnsESP+0xae4>)
 8000f2e:	221e      	movs	r2, #30
 8000f30:	701a      	strb	r2, [r3, #0]
							break;
 8000f32:	e055      	b.n	8000fe0 <DecodeAnsESP+0x9ac>
					case 7:
						if(bufferRxESP[indexR_RxESP]==CIPSEND4[i]){
 8000f34:	4b76      	ldr	r3, [pc, #472]	; (8001110 <DecodeAnsESP+0xadc>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b77      	ldr	r3, [pc, #476]	; (800111c <DecodeAnsESP+0xae8>)
 8000f3e:	5c9b      	ldrb	r3, [r3, r2]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b6f      	ldr	r3, [pc, #444]	; (8001100 <DecodeAnsESP+0xacc>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4b77      	ldr	r3, [pc, #476]	; (8001128 <DecodeAnsESP+0xaf4>)
 8000f4a:	5c5b      	ldrb	r3, [r3, r1]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d11a      	bne.n	8000f86 <DecodeAnsESP+0x952>
							i++;
 8000f50:	4b6b      	ldr	r3, [pc, #428]	; (8001100 <DecodeAnsESP+0xacc>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b69      	ldr	r3, [pc, #420]	; (8001100 <DecodeAnsESP+0xacc>)
 8000f5a:	701a      	strb	r2, [r3, #0]
							if(i==19){
 8000f5c:	4b68      	ldr	r3, [pc, #416]	; (8001100 <DecodeAnsESP+0xacc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b13      	cmp	r3, #19
 8000f62:	d13c      	bne.n	8000fde <DecodeAnsESP+0x9aa>
								i=0;
 8000f64:	4b66      	ldr	r3, [pc, #408]	; (8001100 <DecodeAnsESP+0xacc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND=0;
 8000f6a:	4b66      	ldr	r3, [pc, #408]	; (8001104 <DecodeAnsESP+0xad0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
								readyToSend=1;
 8000f70:	4a65      	ldr	r2, [pc, #404]	; (8001108 <DecodeAnsESP+0xad4>)
 8000f72:	7813      	ldrb	r3, [r2, #0]
 8000f74:	f043 0310 	orr.w	r3, r3, #16
 8000f78:	7013      	strb	r3, [r2, #0]
								espReadyToRecieve=0;
 8000f7a:	4a63      	ldr	r2, [pc, #396]	; (8001108 <DecodeAnsESP+0xad4>)
 8000f7c:	7813      	ldrb	r3, [r2, #0]
 8000f7e:	f36f 1345 	bfc	r3, #5, #1
 8000f82:	7013      	strb	r3, [r2, #0]
								sendALIVE=0;
								timeToSendAlive=30;
								break;
							}
						}
						break;
 8000f84:	e02b      	b.n	8000fde <DecodeAnsESP+0x9aa>
							if(!timeOut2){
 8000f86:	4b69      	ldr	r3, [pc, #420]	; (800112c <DecodeAnsESP+0xaf8>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d127      	bne.n	8000fde <DecodeAnsESP+0x9aa>
								indexR_RxESP=indexW_RxESP;
 8000f8e:	4b5f      	ldr	r3, [pc, #380]	; (800110c <DecodeAnsESP+0xad8>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <DecodeAnsESP+0xadc>)
 8000f96:	701a      	strb	r2, [r3, #0]
								i=0;
 8000f98:	4b59      	ldr	r3, [pc, #356]	; (8001100 <DecodeAnsESP+0xacc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
								decodeCIPSEND=0;
 8000f9e:	4b59      	ldr	r3, [pc, #356]	; (8001104 <DecodeAnsESP+0xad0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
								espReadyToRecieve=0;
 8000fa4:	4a58      	ldr	r2, [pc, #352]	; (8001108 <DecodeAnsESP+0xad4>)
 8000fa6:	7813      	ldrb	r3, [r2, #0]
 8000fa8:	f36f 1345 	bfc	r3, #5, #1
 8000fac:	7013      	strb	r3, [r2, #0]
								readyToSend=1;
 8000fae:	4a56      	ldr	r2, [pc, #344]	; (8001108 <DecodeAnsESP+0xad4>)
 8000fb0:	7813      	ldrb	r3, [r2, #0]
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	7013      	strb	r3, [r2, #0]
								sendALIVE=0;
 8000fb8:	4a56      	ldr	r2, [pc, #344]	; (8001114 <DecodeAnsESP+0xae0>)
 8000fba:	7813      	ldrb	r3, [r2, #0]
 8000fbc:	f36f 0341 	bfc	r3, #1, #1
 8000fc0:	7013      	strb	r3, [r2, #0]
								timeToSendAlive=30;
 8000fc2:	4b55      	ldr	r3, [pc, #340]	; (8001118 <DecodeAnsESP+0xae4>)
 8000fc4:	221e      	movs	r2, #30
 8000fc6:	701a      	strb	r2, [r3, #0]
								break;
 8000fc8:	e00a      	b.n	8000fe0 <DecodeAnsESP+0x9ac>
						break;
 8000fca:	bf00      	nop
 8000fcc:	e15e      	b.n	800128c <DecodeAnsESP+0xc58>
						break;
 8000fce:	bf00      	nop
 8000fd0:	e15c      	b.n	800128c <DecodeAnsESP+0xc58>
						break;
 8000fd2:	bf00      	nop
 8000fd4:	e15a      	b.n	800128c <DecodeAnsESP+0xc58>
						break;
 8000fd6:	bf00      	nop
 8000fd8:	e158      	b.n	800128c <DecodeAnsESP+0xc58>
						break;
 8000fda:	bf00      	nop
 8000fdc:	e156      	b.n	800128c <DecodeAnsESP+0xc58>
						break;
 8000fde:	bf00      	nop
				}

			break;
 8000fe0:	e154      	b.n	800128c <DecodeAnsESP+0xc58>
		case 7:
			switch(decodeIPD){
 8000fe2:	4b53      	ldr	r3, [pc, #332]	; (8001130 <DecodeAnsESP+0xafc>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b05      	cmp	r3, #5
 8000fe8:	f200 8152 	bhi.w	8001290 <DecodeAnsESP+0xc5c>
 8000fec:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <DecodeAnsESP+0x9c0>)
 8000fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff2:	bf00      	nop
 8000ff4:	0800100d 	.word	0x0800100d
 8000ff8:	0800106f 	.word	0x0800106f
 8000ffc:	08001091 	.word	0x08001091
 8001000:	08001141 	.word	0x08001141
 8001004:	0800117b 	.word	0x0800117b
 8001008:	080011cd 	.word	0x080011cd
				case 0:
					if(bufferRxESP[indexR_RxESP]==IPD[i]){
 800100c:	4b40      	ldr	r3, [pc, #256]	; (8001110 <DecodeAnsESP+0xadc>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <DecodeAnsESP+0xae8>)
 8001016:	5c9b      	ldrb	r3, [r3, r2]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b39      	ldr	r3, [pc, #228]	; (8001100 <DecodeAnsESP+0xacc>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4b44      	ldr	r3, [pc, #272]	; (8001134 <DecodeAnsESP+0xb00>)
 8001022:	5c5b      	ldrb	r3, [r3, r1]
 8001024:	429a      	cmp	r2, r3
 8001026:	d114      	bne.n	8001052 <DecodeAnsESP+0xa1e>
						i++;
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <DecodeAnsESP+0xacc>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <DecodeAnsESP+0xacc>)
 8001032:	701a      	strb	r2, [r3, #0]

						if(i==7){
 8001034:	4b32      	ldr	r3, [pc, #200]	; (8001100 <DecodeAnsESP+0xacc>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b07      	cmp	r3, #7
 800103a:	f040 8113 	bne.w	8001264 <DecodeAnsESP+0xc30>
							i=0;
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <DecodeAnsESP+0xacc>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
							decodeIPD++;
 8001044:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <DecodeAnsESP+0xafc>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <DecodeAnsESP+0xafc>)
 800104e:	701a      	strb	r2, [r3, #0]
							indexR_RxESP=indexW_RxESP;
							i=0;
							break;
						}
					}
					break;
 8001050:	e108      	b.n	8001264 <DecodeAnsESP+0xc30>
						if(i>0){
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <DecodeAnsESP+0xacc>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8104 	beq.w	8001264 <DecodeAnsESP+0xc30>
							indexR_RxESP=indexW_RxESP;
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <DecodeAnsESP+0xad8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <DecodeAnsESP+0xadc>)
 8001064:	701a      	strb	r2, [r3, #0]
							i=0;
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <DecodeAnsESP+0xacc>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
							break;
 800106c:	e0ff      	b.n	800126e <DecodeAnsESP+0xc3a>
				case 1:
					if(bufferRxESP[indexR_RxESP]==':'){
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <DecodeAnsESP+0xadc>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <DecodeAnsESP+0xae8>)
 8001078:	5c9b      	ldrb	r3, [r3, r2]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b3a      	cmp	r3, #58	; 0x3a
 800107e:	f040 80f3 	bne.w	8001268 <DecodeAnsESP+0xc34>
						decodeIPD++;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <DecodeAnsESP+0xafc>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <DecodeAnsESP+0xafc>)
 800108c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800108e:	e0eb      	b.n	8001268 <DecodeAnsESP+0xc34>
				case 2:
					if(bufferRxESP[indexR_RxESP]==UNER[i]){
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <DecodeAnsESP+0xadc>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	461a      	mov	r2, r3
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <DecodeAnsESP+0xae8>)
 800109a:	5c9b      	ldrb	r3, [r3, r2]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <DecodeAnsESP+0xacc>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <DecodeAnsESP+0xb04>)
 80010a6:	5c5b      	ldrb	r3, [r3, r1]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d117      	bne.n	80010dc <DecodeAnsESP+0xaa8>
						i++;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <DecodeAnsESP+0xacc>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <DecodeAnsESP+0xacc>)
 80010b6:	701a      	strb	r2, [r3, #0]
						if(i==4){
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <DecodeAnsESP+0xacc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	f040 80d5 	bne.w	800126c <DecodeAnsESP+0xc38>
							i=0;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <DecodeAnsESP+0xacc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
							decodeIPD++;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <DecodeAnsESP+0xafc>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <DecodeAnsESP+0xafc>)
 80010d2:	701a      	strb	r2, [r3, #0]
							cks='U'^'N'^'E'^'R';
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <DecodeAnsESP+0xb08>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	701a      	strb	r2, [r3, #0]
							i=0;
							decodeIPD=0;
							break;
						}
					}
					break;
 80010da:	e0c7      	b.n	800126c <DecodeAnsESP+0xc38>
						if(i>0){
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <DecodeAnsESP+0xacc>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80c3 	beq.w	800126c <DecodeAnsESP+0xc38>
							indexR_RxESP=indexW_RxESP;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <DecodeAnsESP+0xad8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <DecodeAnsESP+0xadc>)
 80010ee:	701a      	strb	r2, [r3, #0]
							i=0;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <DecodeAnsESP+0xacc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
							decodeIPD=0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <DecodeAnsESP+0xafc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
							break;
 80010fc:	e0b7      	b.n	800126e <DecodeAnsESP+0xc3a>
 80010fe:	bf00      	nop
 8001100:	200008e9 	.word	0x200008e9
 8001104:	20000852 	.word	0x20000852
 8001108:	2000089c 	.word	0x2000089c
 800110c:	20000843 	.word	0x20000843
 8001110:	20000842 	.word	0x20000842
 8001114:	200008a0 	.word	0x200008a0
 8001118:	2000084e 	.word	0x2000084e
 800111c:	20000540 	.word	0x20000540
 8001120:	20000867 	.word	0x20000867
 8001124:	20000869 	.word	0x20000869
 8001128:	0800935c 	.word	0x0800935c
 800112c:	2000084c 	.word	0x2000084c
 8001130:	20000865 	.word	0x20000865
 8001134:	08009370 	.word	0x08009370
 8001138:	08009378 	.word	0x08009378
 800113c:	20000866 	.word	0x20000866
				case 3:
					bytesUNERprotocol=bufferRxESP[indexR_RxESP];
 8001140:	4b58      	ldr	r3, [pc, #352]	; (80012a4 <DecodeAnsESP+0xc70>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <DecodeAnsESP+0xc74>)
 800114a:	5c9b      	ldrb	r3, [r3, r2]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b57      	ldr	r3, [pc, #348]	; (80012ac <DecodeAnsESP+0xc78>)
 8001150:	701a      	strb	r2, [r3, #0]
					decodeIPD++;
 8001152:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <DecodeAnsESP+0xc7c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b55      	ldr	r3, [pc, #340]	; (80012b0 <DecodeAnsESP+0xc7c>)
 800115c:	701a      	strb	r2, [r3, #0]
					cks^=bufferRxESP[indexR_RxESP];
 800115e:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <DecodeAnsESP+0xc70>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <DecodeAnsESP+0xc74>)
 8001168:	5c9b      	ldrb	r3, [r3, r2]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <DecodeAnsESP+0xc80>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4053      	eors	r3, r2
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b4f      	ldr	r3, [pc, #316]	; (80012b4 <DecodeAnsESP+0xc80>)
 8001176:	701a      	strb	r2, [r3, #0]

					break;
 8001178:	e079      	b.n	800126e <DecodeAnsESP+0xc3a>
				case 4:
					if(bufferRxESP[indexR_RxESP]==':'){
 800117a:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <DecodeAnsESP+0xc70>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <DecodeAnsESP+0xc74>)
 8001184:	5c9b      	ldrb	r3, [r3, r2]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b3a      	cmp	r3, #58	; 0x3a
 800118a:	d113      	bne.n	80011b4 <DecodeAnsESP+0xb80>
						decodeIPD++;
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <DecodeAnsESP+0xc7c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <DecodeAnsESP+0xc7c>)
 8001196:	701a      	strb	r2, [r3, #0]
						cks^=bufferRxESP[indexR_RxESP];
 8001198:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <DecodeAnsESP+0xc70>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <DecodeAnsESP+0xc74>)
 80011a2:	5c9b      	ldrb	r3, [r3, r2]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b43      	ldr	r3, [pc, #268]	; (80012b4 <DecodeAnsESP+0xc80>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4053      	eors	r3, r2
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <DecodeAnsESP+0xc80>)
 80011b0:	701a      	strb	r2, [r3, #0]
						indexR_RxESP=indexW_RxESP;
						i=0;
						decodeIPD=0;
						break;
					}
					break;
 80011b2:	e05c      	b.n	800126e <DecodeAnsESP+0xc3a>
						indexR_RxESP=indexW_RxESP;
 80011b4:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <DecodeAnsESP+0xc84>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <DecodeAnsESP+0xc70>)
 80011bc:	701a      	strb	r2, [r3, #0]
						i=0;
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <DecodeAnsESP+0xc88>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
						decodeIPD=0;
 80011c4:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <DecodeAnsESP+0xc7c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
						break;
 80011ca:	e050      	b.n	800126e <DecodeAnsESP+0xc3a>
				case 5:
					if(k==1)
 80011cc:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <DecodeAnsESP+0xc8c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d104      	bne.n	80011de <DecodeAnsESP+0xbaa>
						cmdPosInBuff=indexR_RxESP;
 80011d4:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <DecodeAnsESP+0xc70>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <DecodeAnsESP+0xc90>)
 80011dc:	701a      	strb	r2, [r3, #0]
					if(k<bytesUNERprotocol){
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <DecodeAnsESP+0xc8c>)
 80011e0:	781a      	ldrb	r2, [r3, #0]
 80011e2:	4b32      	ldr	r3, [pc, #200]	; (80012ac <DecodeAnsESP+0xc78>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d213      	bcs.n	8001212 <DecodeAnsESP+0xbde>
						cks^=bufferRxESP[indexR_RxESP];
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <DecodeAnsESP+0xc70>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <DecodeAnsESP+0xc74>)
 80011f4:	5c9b      	ldrb	r3, [r3, r2]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <DecodeAnsESP+0xc80>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4053      	eors	r3, r2
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <DecodeAnsESP+0xc80>)
 8001202:	701a      	strb	r2, [r3, #0]
						k++;
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <DecodeAnsESP+0xc8c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <DecodeAnsESP+0xc8c>)
 800120e:	701a      	strb	r2, [r3, #0]
							i=0;
							decodeIPD=0;
							k=1;
						}
					}
					break;
 8001210:	e02d      	b.n	800126e <DecodeAnsESP+0xc3a>
						if(cks==bufferRxESP[indexR_RxESP]){
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <DecodeAnsESP+0xc70>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <DecodeAnsESP+0xc74>)
 800121c:	5c9b      	ldrb	r3, [r3, r2]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <DecodeAnsESP+0xc80>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d113      	bne.n	8001250 <DecodeAnsESP+0xc1c>
							DecodeCommands((uint8_t*)&bufferRxESP,cmdPosInBuff);
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <DecodeAnsESP+0xc90>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	481e      	ldr	r0, [pc, #120]	; (80012a8 <DecodeAnsESP+0xc74>)
 8001230:	f000 fd30 	bl	8001c94 <DecodeCommands>
							HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001234:	2120      	movs	r1, #32
 8001236:	4824      	ldr	r0, [pc, #144]	; (80012c8 <DecodeAnsESP+0xc94>)
 8001238:	f003 fc33 	bl	8004aa2 <HAL_GPIO_TogglePin>
							k=1;
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <DecodeAnsESP+0xc8c>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
							i=0;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <DecodeAnsESP+0xc88>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
							decodeIPD=0;
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <DecodeAnsESP+0xc7c>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
					break;
 800124e:	e00e      	b.n	800126e <DecodeAnsESP+0xc3a>
							i=0;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <DecodeAnsESP+0xc88>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
							decodeIPD=0;
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <DecodeAnsESP+0xc7c>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
							k=1;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <DecodeAnsESP+0xc8c>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
					break;
 8001262:	e004      	b.n	800126e <DecodeAnsESP+0xc3a>
					break;
 8001264:	bf00      	nop
 8001266:	e013      	b.n	8001290 <DecodeAnsESP+0xc5c>
					break;
 8001268:	bf00      	nop
 800126a:	e011      	b.n	8001290 <DecodeAnsESP+0xc5c>
					break;
 800126c:	bf00      	nop
			}
			break;
 800126e:	e00f      	b.n	8001290 <DecodeAnsESP+0xc5c>
			default:

				break;
 8001270:	bf00      	nop
 8001272:	e00e      	b.n	8001292 <DecodeAnsESP+0xc5e>
			break;
 8001274:	bf00      	nop
 8001276:	e00c      	b.n	8001292 <DecodeAnsESP+0xc5e>
			break;
 8001278:	bf00      	nop
 800127a:	e00a      	b.n	8001292 <DecodeAnsESP+0xc5e>
			break;
 800127c:	bf00      	nop
 800127e:	e008      	b.n	8001292 <DecodeAnsESP+0xc5e>
			break;
 8001280:	bf00      	nop
 8001282:	e006      	b.n	8001292 <DecodeAnsESP+0xc5e>
			break;
 8001284:	bf00      	nop
 8001286:	e004      	b.n	8001292 <DecodeAnsESP+0xc5e>
			break;
 8001288:	bf00      	nop
 800128a:	e002      	b.n	8001292 <DecodeAnsESP+0xc5e>
			break;
 800128c:	bf00      	nop
 800128e:	e000      	b.n	8001292 <DecodeAnsESP+0xc5e>
			break;
 8001290:	bf00      	nop
	}
	indexR_RxESP++;
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <DecodeAnsESP+0xc70>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b01      	ldr	r3, [pc, #4]	; (80012a4 <DecodeAnsESP+0xc70>)
 800129e:	701a      	strb	r2, [r3, #0]
}
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000842 	.word	0x20000842
 80012a8:	20000540 	.word	0x20000540
 80012ac:	20000864 	.word	0x20000864
 80012b0:	20000865 	.word	0x20000865
 80012b4:	20000866 	.word	0x20000866
 80012b8:	20000843 	.word	0x20000843
 80012bc:	200008e9 	.word	0x200008e9
 80012c0:	20000001 	.word	0x20000001
 80012c4:	200008ea 	.word	0x200008ea
 80012c8:	40020000 	.word	0x40020000

080012cc <findTheLine>:
uint8_t posMINCenter=0,posMINRight=0,posMINLeft=0;
uint16_t sensorValue=0;
float xMin=0,fx2_fx3,fx2_fx1,x2_x1,x2_x3,x2_x1cuad,x2_x3cuad,denominador;
uint8_t f=0;

float findTheLine(){//ALGORITMO CUADRATICO
 80012cc:	b480      	push	{r7}
 80012ce:	b08b      	sub	sp, #44	; 0x2c
 80012d0:	af00      	add	r7, sp, #0
	float aux[10];

	sensorValue = valueADC[0].u16[0];
 80012d2:	4b86      	ldr	r3, [pc, #536]	; (80014ec <findTheLine+0x220>)
 80012d4:	881a      	ldrh	r2, [r3, #0]
 80012d6:	4b86      	ldr	r3, [pc, #536]	; (80014f0 <findTheLine+0x224>)
 80012d8:	801a      	strh	r2, [r3, #0]


	posMINCenter=0;
 80012da:	4b86      	ldr	r3, [pc, #536]	; (80014f4 <findTheLine+0x228>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	while(f<8){					//ENCUENTRO LA MENOR LECTURA
 80012e0:	e02e      	b.n	8001340 <findTheLine+0x74>
		if(sensorValue > valueADC[f].u16[0]){
 80012e2:	4b85      	ldr	r3, [pc, #532]	; (80014f8 <findTheLine+0x22c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b80      	ldr	r3, [pc, #512]	; (80014ec <findTheLine+0x220>)
 80012ea:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 80012ee:	4b80      	ldr	r3, [pc, #512]	; (80014f0 <findTheLine+0x224>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d20b      	bcs.n	800130e <findTheLine+0x42>
			sensorValue=valueADC[f].u16[0];
 80012f6:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <findTheLine+0x22c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b7b      	ldr	r3, [pc, #492]	; (80014ec <findTheLine+0x220>)
 80012fe:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8001302:	4b7b      	ldr	r3, [pc, #492]	; (80014f0 <findTheLine+0x224>)
 8001304:	801a      	strh	r2, [r3, #0]
			posMINCenter=f;
 8001306:	4b7c      	ldr	r3, [pc, #496]	; (80014f8 <findTheLine+0x22c>)
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <findTheLine+0x228>)
 800130c:	701a      	strb	r2, [r3, #0]
		}
		aux[f+1]=valueADC[f].u16[0];
 800130e:	4b7a      	ldr	r3, [pc, #488]	; (80014f8 <findTheLine+0x22c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	4b75      	ldr	r3, [pc, #468]	; (80014ec <findTheLine+0x220>)
 8001316:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 800131a:	4b77      	ldr	r3, [pc, #476]	; (80014f8 <findTheLine+0x22c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	ee07 2a90 	vmov	s15, r2
 8001324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	3328      	adds	r3, #40	; 0x28
 800132c:	443b      	add	r3, r7
 800132e:	3b28      	subs	r3, #40	; 0x28
 8001330:	edc3 7a00 	vstr	s15, [r3]
		f+=1;
 8001334:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <findTheLine+0x22c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b6e      	ldr	r3, [pc, #440]	; (80014f8 <findTheLine+0x22c>)
 800133e:	701a      	strb	r2, [r3, #0]
	while(f<8){					//ENCUENTRO LA MENOR LECTURA
 8001340:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <findTheLine+0x22c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b07      	cmp	r3, #7
 8001346:	d9cc      	bls.n	80012e2 <findTheLine+0x16>
	}
	f=0;
 8001348:	4b6b      	ldr	r3, [pc, #428]	; (80014f8 <findTheLine+0x22c>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
	posMINCenter+=1;
 800134e:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <findTheLine+0x228>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b67      	ldr	r3, [pc, #412]	; (80014f4 <findTheLine+0x228>)
 8001358:	701a      	strb	r2, [r3, #0]
	aux[0]=aux[2];
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	603b      	str	r3, [r7, #0]
	aux[9]=aux[7];
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	627b      	str	r3, [r7, #36]	; 0x24

	posMINRight=posMINCenter-1;
 8001362:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <findTheLine+0x228>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	3b01      	subs	r3, #1
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b64      	ldr	r3, [pc, #400]	; (80014fc <findTheLine+0x230>)
 800136c:	701a      	strb	r2, [r3, #0]
	posMINLeft=posMINCenter+1;
 800136e:	4b61      	ldr	r3, [pc, #388]	; (80014f4 <findTheLine+0x228>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b62      	ldr	r3, [pc, #392]	; (8001500 <findTheLine+0x234>)
 8001378:	701a      	strb	r2, [r3, #0]
	fx2_fx3=aux[posMINCenter]-aux[posMINRight];
 800137a:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <findTheLine+0x228>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	3328      	adds	r3, #40	; 0x28
 8001382:	443b      	add	r3, r7
 8001384:	3b28      	subs	r3, #40	; 0x28
 8001386:	ed93 7a00 	vldr	s14, [r3]
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <findTheLine+0x230>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	3328      	adds	r3, #40	; 0x28
 8001392:	443b      	add	r3, r7
 8001394:	3b28      	subs	r3, #40	; 0x28
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139e:	4b59      	ldr	r3, [pc, #356]	; (8001504 <findTheLine+0x238>)
 80013a0:	edc3 7a00 	vstr	s15, [r3]
	fx2_fx1=aux[posMINCenter]-aux[posMINLeft];
 80013a4:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <findTheLine+0x228>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	3328      	adds	r3, #40	; 0x28
 80013ac:	443b      	add	r3, r7
 80013ae:	3b28      	subs	r3, #40	; 0x28
 80013b0:	ed93 7a00 	vldr	s14, [r3]
 80013b4:	4b52      	ldr	r3, [pc, #328]	; (8001500 <findTheLine+0x234>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	3328      	adds	r3, #40	; 0x28
 80013bc:	443b      	add	r3, r7
 80013be:	3b28      	subs	r3, #40	; 0x28
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c8:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <findTheLine+0x23c>)
 80013ca:	edc3 7a00 	vstr	s15, [r3]
	x2_x1=COORD_SENSORES[posMINCenter]-COORD_SENSORES[posMINLeft];
 80013ce:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <findTheLine+0x228>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b4d      	ldr	r3, [pc, #308]	; (800150c <findTheLine+0x240>)
 80013d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <findTheLine+0x234>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4619      	mov	r1, r3
 80013e0:	4b4a      	ldr	r3, [pc, #296]	; (800150c <findTheLine+0x240>)
 80013e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f0:	4b47      	ldr	r3, [pc, #284]	; (8001510 <findTheLine+0x244>)
 80013f2:	edc3 7a00 	vstr	s15, [r3]
	x2_x1cuad=(x2_x1*x2_x1);
 80013f6:	4b46      	ldr	r3, [pc, #280]	; (8001510 <findTheLine+0x244>)
 80013f8:	ed93 7a00 	vldr	s14, [r3]
 80013fc:	4b44      	ldr	r3, [pc, #272]	; (8001510 <findTheLine+0x244>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001406:	4b43      	ldr	r3, [pc, #268]	; (8001514 <findTheLine+0x248>)
 8001408:	edc3 7a00 	vstr	s15, [r3]
	x2_x3=COORD_SENSORES[posMINCenter]-COORD_SENSORES[posMINRight];
 800140c:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <findTheLine+0x228>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b3e      	ldr	r3, [pc, #248]	; (800150c <findTheLine+0x240>)
 8001414:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <findTheLine+0x230>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4b3b      	ldr	r3, [pc, #236]	; (800150c <findTheLine+0x240>)
 8001420:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <findTheLine+0x24c>)
 8001430:	edc3 7a00 	vstr	s15, [r3]
	x2_x3cuad=(x2_x3*x2_x3);
 8001434:	4b38      	ldr	r3, [pc, #224]	; (8001518 <findTheLine+0x24c>)
 8001436:	ed93 7a00 	vldr	s14, [r3]
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <findTheLine+0x24c>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001444:	4b35      	ldr	r3, [pc, #212]	; (800151c <findTheLine+0x250>)
 8001446:	edc3 7a00 	vstr	s15, [r3]
	denominador=(2*(x2_x1*fx2_fx3-x2_x3*fx2_fx1));
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <findTheLine+0x244>)
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <findTheLine+0x238>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <findTheLine+0x24c>)
 800145c:	edd3 6a00 	vldr	s13, [r3]
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <findTheLine+0x23c>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <findTheLine+0x254>)
 8001474:	edc3 7a00 	vstr	s15, [r3]
	if(denominador!=0){
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <findTheLine+0x254>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	d025      	beq.n	80014d4 <findTheLine+0x208>
		xMin=COORD_SENSORES[posMINCenter]-( x2_x1cuad*fx2_fx3 - x2_x3cuad*fx2_fx1 ) / denominador;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <findTheLine+0x228>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <findTheLine+0x240>)
 8001490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <findTheLine+0x248>)
 800149e:	edd3 6a00 	vldr	s13, [r3]
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <findTheLine+0x238>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <findTheLine+0x250>)
 80014ae:	ed93 6a00 	vldr	s12, [r3]
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <findTheLine+0x23c>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014bc:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <findTheLine+0x254>)
 80014c2:	edd3 6a00 	vldr	s13, [r3]
 80014c6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80014ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <findTheLine+0x258>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]
	}
	return -xMin;
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <findTheLine+0x258>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	eef1 7a67 	vneg.f32	s15, s15
}
 80014de:	eeb0 0a67 	vmov.f32	s0, s15
 80014e2:	372c      	adds	r7, #44	; 0x2c
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	2000087c 	.word	0x2000087c
 80014f0:	200008c4 	.word	0x200008c4
 80014f4:	200008c1 	.word	0x200008c1
 80014f8:	200008e8 	.word	0x200008e8
 80014fc:	200008c2 	.word	0x200008c2
 8001500:	200008c3 	.word	0x200008c3
 8001504:	200008cc 	.word	0x200008cc
 8001508:	200008d0 	.word	0x200008d0
 800150c:	08009394 	.word	0x08009394
 8001510:	200008d4 	.word	0x200008d4
 8001514:	200008dc 	.word	0x200008dc
 8001518:	200008d8 	.word	0x200008d8
 800151c:	200008e0 	.word	0x200008e0
 8001520:	200008e4 	.word	0x200008e4
 8001524:	200008c8 	.word	0x200008c8

08001528 <readADC>:

void readADC(){
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
static uint8_t firstRead=1;

	if(indexADC>2){
 800152e:	4b5e      	ldr	r3, [pc, #376]	; (80016a8 <readADC+0x180>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d93a      	bls.n	80015ae <readADC+0x86>
		firstRead=0;
 8001538:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <readADC+0x184>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		for(uint8_t c=0;c<8;c++){
 800153e:	2300      	movs	r3, #0
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	e030      	b.n	80015a6 <readADC+0x7e>
			valueADC[c].u32=( ADCData[indexADC-1][c]+ADCData[indexADC-2][c]+ADCData[indexADC-3][c] ) / 3 ;
 8001544:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <readADC+0x180>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	1e5a      	subs	r2, r3, #1
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4958      	ldr	r1, [pc, #352]	; (80016b0 <readADC+0x188>)
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	4413      	add	r3, r2
 8001554:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001558:	b29b      	uxth	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <readADC+0x180>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	1e9a      	subs	r2, r3, #2
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4952      	ldr	r1, [pc, #328]	; (80016b0 <readADC+0x188>)
 8001568:	00d2      	lsls	r2, r2, #3
 800156a:	4413      	add	r3, r2
 800156c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4403      	add	r3, r0
 8001574:	4a4c      	ldr	r2, [pc, #304]	; (80016a8 <readADC+0x180>)
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	1ed1      	subs	r1, r2, #3
 800157c:	79fa      	ldrb	r2, [r7, #7]
 800157e:	484c      	ldr	r0, [pc, #304]	; (80016b0 <readADC+0x188>)
 8001580:	00c9      	lsls	r1, r1, #3
 8001582:	440a      	add	r2, r1
 8001584:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001588:	b292      	uxth	r2, r2
 800158a:	4413      	add	r3, r2
 800158c:	4a49      	ldr	r2, [pc, #292]	; (80016b4 <readADC+0x18c>)
 800158e:	fb82 1203 	smull	r1, r2, r2, r3
 8001592:	17db      	asrs	r3, r3, #31
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	4611      	mov	r1, r2
 800159a:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <readADC+0x190>)
 800159c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(uint8_t c=0;c<8;c++){
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	3301      	adds	r3, #1
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b07      	cmp	r3, #7
 80015aa:	d9cb      	bls.n	8001544 <readADC+0x1c>
						break;
				}
			}
		}
	}
}
 80015ac:	e076      	b.n	800169c <readADC+0x174>
		if(!firstRead){
 80015ae:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <readADC+0x184>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d172      	bne.n	800169c <readADC+0x174>
			for(uint8_t c=0;c<8;c++){
 80015b6:	2300      	movs	r3, #0
 80015b8:	71bb      	strb	r3, [r7, #6]
 80015ba:	e06c      	b.n	8001696 <readADC+0x16e>
				switch(indexADC){
 80015bc:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <readADC+0x180>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d006      	beq.n	80015d4 <readADC+0xac>
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	dc62      	bgt.n	8001690 <readADC+0x168>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d040      	beq.n	8001650 <readADC+0x128>
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d01f      	beq.n	8001612 <readADC+0xea>
 80015d2:	e05d      	b.n	8001690 <readADC+0x168>
						valueADC[c].u32=(ADCData[1][c]+ADCData[0][c]+ADCData[31][c]) / 3;
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	4a36      	ldr	r2, [pc, #216]	; (80016b0 <readADC+0x188>)
 80015d8:	3308      	adds	r3, #8
 80015da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4619      	mov	r1, r3
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	4a32      	ldr	r2, [pc, #200]	; (80016b0 <readADC+0x188>)
 80015e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	440b      	add	r3, r1
 80015ee:	79ba      	ldrb	r2, [r7, #6]
 80015f0:	492f      	ldr	r1, [pc, #188]	; (80016b0 <readADC+0x188>)
 80015f2:	32f8      	adds	r2, #248	; 0xf8
 80015f4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80015f8:	b292      	uxth	r2, r2
 80015fa:	4413      	add	r3, r2
 80015fc:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <readADC+0x18c>)
 80015fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001602:	17db      	asrs	r3, r3, #31
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	4611      	mov	r1, r2
 800160a:	4a2b      	ldr	r2, [pc, #172]	; (80016b8 <readADC+0x190>)
 800160c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 8001610:	e03e      	b.n	8001690 <readADC+0x168>
						valueADC[c].u32=( ADCData[0][c]+ADCData[31][c]+ADCData[30][c] ) / 3 ;
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <readADC+0x188>)
 8001616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4619      	mov	r1, r3
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <readADC+0x188>)
 8001622:	33f8      	adds	r3, #248	; 0xf8
 8001624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001628:	b29b      	uxth	r3, r3
 800162a:	440b      	add	r3, r1
 800162c:	79ba      	ldrb	r2, [r7, #6]
 800162e:	4920      	ldr	r1, [pc, #128]	; (80016b0 <readADC+0x188>)
 8001630:	32f0      	adds	r2, #240	; 0xf0
 8001632:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001636:	b292      	uxth	r2, r2
 8001638:	4413      	add	r3, r2
 800163a:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <readADC+0x18c>)
 800163c:	fb82 1203 	smull	r1, r2, r2, r3
 8001640:	17db      	asrs	r3, r3, #31
 8001642:	1ad2      	subs	r2, r2, r3
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	4611      	mov	r1, r2
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <readADC+0x190>)
 800164a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 800164e:	e01f      	b.n	8001690 <readADC+0x168>
						valueADC[c].u32=( ADCData[31][c]+ADCData[30][c]+ADCData[29][c] ) / 3;
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <readADC+0x188>)
 8001654:	33f8      	adds	r3, #248	; 0xf8
 8001656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800165a:	b29b      	uxth	r3, r3
 800165c:	4619      	mov	r1, r3
 800165e:	79bb      	ldrb	r3, [r7, #6]
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <readADC+0x188>)
 8001662:	33f0      	adds	r3, #240	; 0xf0
 8001664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001668:	b29b      	uxth	r3, r3
 800166a:	440b      	add	r3, r1
 800166c:	79ba      	ldrb	r2, [r7, #6]
 800166e:	4910      	ldr	r1, [pc, #64]	; (80016b0 <readADC+0x188>)
 8001670:	32e8      	adds	r2, #232	; 0xe8
 8001672:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001676:	b292      	uxth	r2, r2
 8001678:	4413      	add	r3, r2
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <readADC+0x18c>)
 800167c:	fb82 1203 	smull	r1, r2, r2, r3
 8001680:	17db      	asrs	r3, r3, #31
 8001682:	1ad2      	subs	r2, r2, r3
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	4611      	mov	r1, r2
 8001688:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <readADC+0x190>)
 800168a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 800168e:	bf00      	nop
			for(uint8_t c=0;c<8;c++){
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	3301      	adds	r3, #1
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	2b07      	cmp	r3, #7
 800169a:	d98f      	bls.n	80015bc <readADC+0x94>
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	20000868 	.word	0x20000868
 80016ac:	20000002 	.word	0x20000002
 80016b0:	20000240 	.word	0x20000240
 80016b4:	55555556 	.word	0x55555556
 80016b8:	2000087c 	.word	0x2000087c

080016bc <uartTX>:

void uartTX(uint8_t uart){
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]

	if(uart == UART_PC ){
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d117      	bne.n	80016fc <uartTX+0x40>
		if((huart2.Instance->SR & UART_FLAG_TXE)==UART_FLAG_TXE){
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <uartTX+0x84>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	2b80      	cmp	r3, #128	; 0x80
 80016d8:	d110      	bne.n	80016fc <uartTX+0x40>
			huart2.Instance->DR=bufferDebug[indexR_Debug];
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <uartTX+0x88>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <uartTX+0x8c>)
 80016e4:	5c9b      	ldrb	r3, [r3, r2]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <uartTX+0x84>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
			indexR_Debug++;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <uartTX+0x88>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <uartTX+0x88>)
 80016fa:	701a      	strb	r2, [r3, #0]
		}
	}

	if(uart == UART_ESP ){
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d117      	bne.n	8001732 <uartTX+0x76>
		if((huart1.Instance->SR & UART_FLAG_TXE)==UART_FLAG_TXE){
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <uartTX+0x90>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170c:	2b80      	cmp	r3, #128	; 0x80
 800170e:	d110      	bne.n	8001732 <uartTX+0x76>
			huart1.Instance->DR=bufferTxESP[indexR_TxESP];
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <uartTX+0x94>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <uartTX+0x98>)
 800171a:	5c9b      	ldrb	r3, [r3, r2]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <uartTX+0x90>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
			indexR_TxESP++;
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <uartTX+0x94>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3301      	adds	r3, #1
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <uartTX+0x94>)
 8001730:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	200001fc 	.word	0x200001fc
 8001744:	20000844 	.word	0x20000844
 8001748:	20000640 	.word	0x20000640
 800174c:	200001b8 	.word	0x200001b8
 8001750:	20000840 	.word	0x20000840
 8001754:	20000440 	.word	0x20000440

08001758 <initESP>:

			break;
	}
}

void  initESP(){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

	if(readyToSend){
 800175c:	4b5b      	ldr	r3, [pc, #364]	; (80018cc <initESP+0x174>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80ad 	beq.w	80018c6 <initESP+0x16e>
		switch(AT){
 800176c:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <initESP+0x178>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b06      	cmp	r3, #6
 8001772:	f200 80a9 	bhi.w	80018c8 <initESP+0x170>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <initESP+0x24>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	08001799 	.word	0x08001799
 8001780:	080017cf 	.word	0x080017cf
 8001784:	080017e1 	.word	0x080017e1
 8001788:	08001817 	.word	0x08001817
 800178c:	0800184d 	.word	0x0800184d
 8001790:	08001883 	.word	0x08001883
 8001794:	080018b9 	.word	0x080018b9
			case 0:
				memcpy((uint8_t *)&bufferTxESP[indexW_TxESP],CWMODE,13);
 8001798:	4b4e      	ldr	r3, [pc, #312]	; (80018d4 <initESP+0x17c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <initESP+0x180>)
 80017a2:	4413      	add	r3, r2
 80017a4:	220d      	movs	r2, #13
 80017a6:	494d      	ldr	r1, [pc, #308]	; (80018dc <initESP+0x184>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f007 fcdb 	bl	8009164 <memcpy>
				indexW_TxESP+=13;
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <initESP+0x17c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	330d      	adds	r3, #13
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <initESP+0x17c>)
 80017ba:	701a      	strb	r2, [r3, #0]
				timeOut2=10;
 80017bc:	4b48      	ldr	r3, [pc, #288]	; (80018e0 <initESP+0x188>)
 80017be:	220a      	movs	r2, #10
 80017c0:	701a      	strb	r2, [r3, #0]
				readyToSend=0;
 80017c2:	4a42      	ldr	r2, [pc, #264]	; (80018cc <initESP+0x174>)
 80017c4:	7813      	ldrb	r3, [r2, #0]
 80017c6:	f36f 1304 	bfc	r3, #4, #1
 80017ca:	7013      	strb	r3, [r2, #0]
				break;
 80017cc:	e07c      	b.n	80018c8 <initESP+0x170>
			case 1:
				timeOut2=100;
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <initESP+0x188>)
 80017d0:	2264      	movs	r2, #100	; 0x64
 80017d2:	701a      	strb	r2, [r3, #0]
				readyToSend=0;
 80017d4:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <initESP+0x174>)
 80017d6:	7813      	ldrb	r3, [r2, #0]
 80017d8:	f36f 1304 	bfc	r3, #4, #1
 80017dc:	7013      	strb	r3, [r2, #0]
				break;
 80017de:	e073      	b.n	80018c8 <initESP+0x170>
			case 2:
				memcpy((uint8_t *)&bufferTxESP[indexW_TxESP],CWJAP_MEGA,LONG_CWJAP_MEGA);
 80017e0:	4b3c      	ldr	r3, [pc, #240]	; (80018d4 <initESP+0x17c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <initESP+0x180>)
 80017ea:	4413      	add	r3, r2
 80017ec:	2224      	movs	r2, #36	; 0x24
 80017ee:	493d      	ldr	r1, [pc, #244]	; (80018e4 <initESP+0x18c>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f007 fcb7 	bl	8009164 <memcpy>
				indexW_TxESP+=LONG_CWJAP_MEGA;
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <initESP+0x17c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	3324      	adds	r3, #36	; 0x24
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <initESP+0x17c>)
 8001802:	701a      	strb	r2, [r3, #0]
				timeOut2=50;
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <initESP+0x188>)
 8001806:	2232      	movs	r2, #50	; 0x32
 8001808:	701a      	strb	r2, [r3, #0]
				readyToSend=0;
 800180a:	4a30      	ldr	r2, [pc, #192]	; (80018cc <initESP+0x174>)
 800180c:	7813      	ldrb	r3, [r2, #0]
 800180e:	f36f 1304 	bfc	r3, #4, #1
 8001812:	7013      	strb	r3, [r2, #0]
				break;
 8001814:	e058      	b.n	80018c8 <initESP+0x170>
			case 3:
				memcpy((uint8_t *)&bufferTxESP[indexW_TxESP],CIPMUX,13);
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <initESP+0x17c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <initESP+0x180>)
 8001820:	4413      	add	r3, r2
 8001822:	220d      	movs	r2, #13
 8001824:	4930      	ldr	r1, [pc, #192]	; (80018e8 <initESP+0x190>)
 8001826:	4618      	mov	r0, r3
 8001828:	f007 fc9c 	bl	8009164 <memcpy>
				indexW_TxESP+=13;
 800182c:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <initESP+0x17c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	330d      	adds	r3, #13
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <initESP+0x17c>)
 8001838:	701a      	strb	r2, [r3, #0]
				timeOut2=20;
 800183a:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <initESP+0x188>)
 800183c:	2214      	movs	r2, #20
 800183e:	701a      	strb	r2, [r3, #0]
				readyToSend=0;
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <initESP+0x174>)
 8001842:	7813      	ldrb	r3, [r2, #0]
 8001844:	f36f 1304 	bfc	r3, #4, #1
 8001848:	7013      	strb	r3, [r2, #0]
				break;
 800184a:	e03d      	b.n	80018c8 <initESP+0x170>
			case 4:
				memcpy((uint8_t *)&bufferTxESP[indexW_TxESP],CIFSR,10);
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <initESP+0x17c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <initESP+0x180>)
 8001856:	4413      	add	r3, r2
 8001858:	220a      	movs	r2, #10
 800185a:	4924      	ldr	r1, [pc, #144]	; (80018ec <initESP+0x194>)
 800185c:	4618      	mov	r0, r3
 800185e:	f007 fc81 	bl	8009164 <memcpy>
				indexW_TxESP+=10;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <initESP+0x17c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	330a      	adds	r3, #10
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <initESP+0x17c>)
 800186e:	701a      	strb	r2, [r3, #0]
				timeOut2=20;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <initESP+0x188>)
 8001872:	2214      	movs	r2, #20
 8001874:	701a      	strb	r2, [r3, #0]
				readyToSend=0;
 8001876:	4a15      	ldr	r2, [pc, #84]	; (80018cc <initESP+0x174>)
 8001878:	7813      	ldrb	r3, [r2, #0]
 800187a:	f36f 1304 	bfc	r3, #4, #1
 800187e:	7013      	strb	r3, [r2, #0]
				break;
 8001880:	e022      	b.n	80018c8 <initESP+0x170>
			case 5:
				memcpy((uint8_t *)&bufferTxESP[indexW_TxESP],CIPSTART,46);
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <initESP+0x17c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <initESP+0x180>)
 800188c:	4413      	add	r3, r2
 800188e:	222e      	movs	r2, #46	; 0x2e
 8001890:	4917      	ldr	r1, [pc, #92]	; (80018f0 <initESP+0x198>)
 8001892:	4618      	mov	r0, r3
 8001894:	f007 fc66 	bl	8009164 <memcpy>
				indexW_TxESP+=45;
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <initESP+0x17c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	332d      	adds	r3, #45	; 0x2d
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <initESP+0x17c>)
 80018a4:	701a      	strb	r2, [r3, #0]
				timeOut2=20;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <initESP+0x188>)
 80018a8:	2214      	movs	r2, #20
 80018aa:	701a      	strb	r2, [r3, #0]
				readyToSend=0;
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <initESP+0x174>)
 80018ae:	7813      	ldrb	r3, [r2, #0]
 80018b0:	f36f 1304 	bfc	r3, #4, #1
 80018b4:	7013      	strb	r3, [r2, #0]
				break;
 80018b6:	e007      	b.n	80018c8 <initESP+0x170>
			case 6:
				duty++;
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <initESP+0x19c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <initESP+0x19c>)
 80018c2:	701a      	strb	r2, [r3, #0]
				break;
 80018c4:	e000      	b.n	80018c8 <initESP+0x170>
		}
	}
 80018c6:	bf00      	nop
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000089c 	.word	0x2000089c
 80018d0:	20000848 	.word	0x20000848
 80018d4:	20000841 	.word	0x20000841
 80018d8:	20000440 	.word	0x20000440
 80018dc:	08009230 	.word	0x08009230
 80018e0:	2000084c 	.word	0x2000084c
 80018e4:	080091b0 	.word	0x080091b0
 80018e8:	080091e4 	.word	0x080091e4
 80018ec:	080091d8 	.word	0x080091d8
 80018f0:	080091f4 	.word	0x080091f4
 80018f4:	20000851 	.word	0x20000851

080018f8 <udpCom>:





void udpCom(uint8_t cmd){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
	if(readyToSend){
 8001902:	4b74      	ldr	r3, [pc, #464]	; (8001ad4 <udpCom+0x1dc>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80db 	beq.w	8001ac8 <udpCom+0x1d0>
		switch(cmd){
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2bd0      	cmp	r3, #208	; 0xd0
 8001916:	d06e      	beq.n	80019f6 <udpCom+0xfe>
 8001918:	2bf0      	cmp	r3, #240	; 0xf0
 800191a:	f040 80d6 	bne.w	8001aca <udpCom+0x1d2>
			case 0xF0:
				if(!espReadyToRecieve){
 800191e:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <udpCom+0x1dc>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d132      	bne.n	8001992 <udpCom+0x9a>
					AT=6;
 800192c:	4b6a      	ldr	r3, [pc, #424]	; (8001ad8 <udpCom+0x1e0>)
 800192e:	2206      	movs	r2, #6
 8001930:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&bufferTxESP[indexW_TxESP],CIPSEND,11);
 8001932:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <udpCom+0x1e4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	4b69      	ldr	r3, [pc, #420]	; (8001ae0 <udpCom+0x1e8>)
 800193c:	4413      	add	r3, r2
 800193e:	220b      	movs	r2, #11
 8001940:	4968      	ldr	r1, [pc, #416]	; (8001ae4 <udpCom+0x1ec>)
 8001942:	4618      	mov	r0, r3
 8001944:	f007 fc0e 	bl	8009164 <memcpy>
					indexW_TxESP+=11;
 8001948:	4b64      	ldr	r3, [pc, #400]	; (8001adc <udpCom+0x1e4>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	330b      	adds	r3, #11
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b62      	ldr	r3, [pc, #392]	; (8001adc <udpCom+0x1e4>)
 8001954:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&bufferTxESP[indexW_TxESP],"8\r\n",3);
 8001956:	4b61      	ldr	r3, [pc, #388]	; (8001adc <udpCom+0x1e4>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	4b60      	ldr	r3, [pc, #384]	; (8001ae0 <udpCom+0x1e8>)
 8001960:	4413      	add	r3, r2
 8001962:	2203      	movs	r2, #3
 8001964:	4960      	ldr	r1, [pc, #384]	; (8001ae8 <udpCom+0x1f0>)
 8001966:	4618      	mov	r0, r3
 8001968:	f007 fbfc 	bl	8009164 <memcpy>
					indexW_TxESP+=3;
 800196c:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <udpCom+0x1e4>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3303      	adds	r3, #3
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b59      	ldr	r3, [pc, #356]	; (8001adc <udpCom+0x1e4>)
 8001978:	701a      	strb	r2, [r3, #0]
					bytesToSend=8;
 800197a:	4b5c      	ldr	r3, [pc, #368]	; (8001aec <udpCom+0x1f4>)
 800197c:	2208      	movs	r2, #8
 800197e:	701a      	strb	r2, [r3, #0]
					timeOut2=2;
 8001980:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <udpCom+0x1f8>)
 8001982:	2202      	movs	r2, #2
 8001984:	701a      	strb	r2, [r3, #0]
					readyToSend=0;
 8001986:	4a53      	ldr	r2, [pc, #332]	; (8001ad4 <udpCom+0x1dc>)
 8001988:	7813      	ldrb	r3, [r2, #0]
 800198a:	f36f 1304 	bfc	r3, #4, #1
 800198e:	7013      	strb	r3, [r2, #0]
					indexW_TxESP+=1;
					espReadyToRecieve=0;
					sendALIVE=0;
					readyToSend=0;
				}
				break;
 8001990:	e09b      	b.n	8001aca <udpCom+0x1d2>
					memcpy((uint8_t*)&bufferTxESP[indexW_TxESP],ALIVE,7);
 8001992:	4b52      	ldr	r3, [pc, #328]	; (8001adc <udpCom+0x1e4>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	4b51      	ldr	r3, [pc, #324]	; (8001ae0 <udpCom+0x1e8>)
 800199c:	4413      	add	r3, r2
 800199e:	4a55      	ldr	r2, [pc, #340]	; (8001af4 <udpCom+0x1fc>)
 80019a0:	6810      	ldr	r0, [r2, #0]
 80019a2:	6018      	str	r0, [r3, #0]
 80019a4:	8891      	ldrh	r1, [r2, #4]
 80019a6:	7992      	ldrb	r2, [r2, #6]
 80019a8:	8099      	strh	r1, [r3, #4]
 80019aa:	719a      	strb	r2, [r3, #6]
					indexW_TxESP+=7;
 80019ac:	4b4b      	ldr	r3, [pc, #300]	; (8001adc <udpCom+0x1e4>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	3307      	adds	r3, #7
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <udpCom+0x1e4>)
 80019b8:	701a      	strb	r2, [r3, #0]
					bufferTxESP[indexW_TxESP]='U'^'N'^'E'^'R'^0x02^':'^0xF0;
 80019ba:	4b48      	ldr	r3, [pc, #288]	; (8001adc <udpCom+0x1e4>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <udpCom+0x1e8>)
 80019c4:	21c4      	movs	r1, #196	; 0xc4
 80019c6:	5499      	strb	r1, [r3, r2]
					indexW_TxESP+=1;
 80019c8:	4b44      	ldr	r3, [pc, #272]	; (8001adc <udpCom+0x1e4>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b42      	ldr	r3, [pc, #264]	; (8001adc <udpCom+0x1e4>)
 80019d4:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 80019d6:	4a3f      	ldr	r2, [pc, #252]	; (8001ad4 <udpCom+0x1dc>)
 80019d8:	7813      	ldrb	r3, [r2, #0]
 80019da:	f36f 1345 	bfc	r3, #5, #1
 80019de:	7013      	strb	r3, [r2, #0]
					sendALIVE=0;
 80019e0:	4a45      	ldr	r2, [pc, #276]	; (8001af8 <udpCom+0x200>)
 80019e2:	7813      	ldrb	r3, [r2, #0]
 80019e4:	f36f 0341 	bfc	r3, #1, #1
 80019e8:	7013      	strb	r3, [r2, #0]
					readyToSend=0;
 80019ea:	4a3a      	ldr	r2, [pc, #232]	; (8001ad4 <udpCom+0x1dc>)
 80019ec:	7813      	ldrb	r3, [r2, #0]
 80019ee:	f36f 1304 	bfc	r3, #4, #1
 80019f2:	7013      	strb	r3, [r2, #0]
				break;
 80019f4:	e069      	b.n	8001aca <udpCom+0x1d2>
			case 0xD0:
				if(!espReadyToRecieve){
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <udpCom+0x1dc>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d132      	bne.n	8001a6a <udpCom+0x172>
					AT=6;
 8001a04:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <udpCom+0x1e0>)
 8001a06:	2206      	movs	r2, #6
 8001a08:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&bufferTxESP[indexW_TxESP],CIPSEND,11);
 8001a0a:	4b34      	ldr	r3, [pc, #208]	; (8001adc <udpCom+0x1e4>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <udpCom+0x1e8>)
 8001a14:	4413      	add	r3, r2
 8001a16:	220b      	movs	r2, #11
 8001a18:	4932      	ldr	r1, [pc, #200]	; (8001ae4 <udpCom+0x1ec>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f007 fba2 	bl	8009164 <memcpy>
					indexW_TxESP+=11;
 8001a20:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <udpCom+0x1e4>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	330b      	adds	r3, #11
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <udpCom+0x1e4>)
 8001a2c:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&bufferTxESP[indexW_TxESP],"9\r\n",3);
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <udpCom+0x1e4>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <udpCom+0x1e8>)
 8001a38:	4413      	add	r3, r2
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	492f      	ldr	r1, [pc, #188]	; (8001afc <udpCom+0x204>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f007 fb90 	bl	8009164 <memcpy>
					indexW_TxESP+=3;
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <udpCom+0x1e4>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3303      	adds	r3, #3
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <udpCom+0x1e4>)
 8001a50:	701a      	strb	r2, [r3, #0]
					bytesToSend=9;
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <udpCom+0x1f4>)
 8001a54:	2209      	movs	r2, #9
 8001a56:	701a      	strb	r2, [r3, #0]
					timeOut2=20;
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <udpCom+0x1f8>)
 8001a5a:	2214      	movs	r2, #20
 8001a5c:	701a      	strb	r2, [r3, #0]
					readyToSend=0;
 8001a5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <udpCom+0x1dc>)
 8001a60:	7813      	ldrb	r3, [r2, #0]
 8001a62:	f36f 1304 	bfc	r3, #4, #1
 8001a66:	7013      	strb	r3, [r2, #0]
					bufferTxESP[indexW_TxESP]='U'^'N'^'E'^'R'^0x03^':'^0xD0^0x0D;
					indexW_TxESP++;
					espReadyToRecieve=0;
					duty++;
				}
				break;
 8001a68:	e02f      	b.n	8001aca <udpCom+0x1d2>
					memcpy((uint8_t*)&bufferTxESP[indexW_TxESP],ACK_D0,9);
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <udpCom+0x1e4>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <udpCom+0x1e8>)
 8001a74:	4413      	add	r3, r2
 8001a76:	4922      	ldr	r1, [pc, #136]	; (8001b00 <udpCom+0x208>)
 8001a78:	461a      	mov	r2, r3
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	cb03      	ldmia	r3!, {r0, r1}
 8001a7e:	6010      	str	r0, [r2, #0]
 8001a80:	6051      	str	r1, [r2, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	7213      	strb	r3, [r2, #8]
					indexW_TxESP+=9;
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <udpCom+0x1e4>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	3309      	adds	r3, #9
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <udpCom+0x1e4>)
 8001a92:	701a      	strb	r2, [r3, #0]
					bufferTxESP[indexW_TxESP]='U'^'N'^'E'^'R'^0x03^':'^0xD0^0x0D;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <udpCom+0x1e4>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <udpCom+0x1e8>)
 8001a9e:	21e8      	movs	r1, #232	; 0xe8
 8001aa0:	5499      	strb	r1, [r3, r2]
					indexW_TxESP++;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <udpCom+0x1e4>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <udpCom+0x1e4>)
 8001aae:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <udpCom+0x1dc>)
 8001ab2:	7813      	ldrb	r3, [r2, #0]
 8001ab4:	f36f 1345 	bfc	r3, #5, #1
 8001ab8:	7013      	strb	r3, [r2, #0]
					duty++;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <udpCom+0x20c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <udpCom+0x20c>)
 8001ac4:	701a      	strb	r2, [r3, #0]
				break;
 8001ac6:	e000      	b.n	8001aca <udpCom+0x1d2>
		}
	}
 8001ac8:	bf00      	nop
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000089c 	.word	0x2000089c
 8001ad8:	20000848 	.word	0x20000848
 8001adc:	20000841 	.word	0x20000841
 8001ae0:	20000440 	.word	0x20000440
 8001ae4:	08009224 	.word	0x08009224
 8001ae8:	080091a8 	.word	0x080091a8
 8001aec:	20000867 	.word	0x20000867
 8001af0:	2000084c 	.word	0x2000084c
 8001af4:	08009380 	.word	0x08009380
 8001af8:	200008a0 	.word	0x200008a0
 8001afc:	080091ac 	.word	0x080091ac
 8001b00:	08009388 	.word	0x08009388
 8001b04:	20000851 	.word	0x20000851

08001b08 <DecodeQT>:

void DecodeQT(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	static uint8_t i=0,step=0,cksQT,counter=1,cmdPosInBuff;

	switch(step){
 8001b0c:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <DecodeQT+0x168>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	f200 80a3 	bhi.w	8001c5c <DecodeQT+0x154>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <DecodeQT+0x14>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b2d 	.word	0x08001b2d
 8001b20:	08001b7f 	.word	0x08001b7f
 8001b24:	08001baf 	.word	0x08001baf
 8001b28:	08001be5 	.word	0x08001be5
		case 0:
			if(buffer_PC_RX[indexR_PC_RX]==UNER[i]){
 8001b2c:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <DecodeQT+0x16c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <DecodeQT+0x170>)
 8001b36:	5c9b      	ldrb	r3, [r3, r2]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <DecodeQT+0x174>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <DecodeQT+0x178>)
 8001b42:	5c5b      	ldrb	r3, [r3, r1]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d116      	bne.n	8001b76 <DecodeQT+0x6e>
				i++;
 8001b48:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <DecodeQT+0x174>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <DecodeQT+0x174>)
 8001b52:	701a      	strb	r2, [r3, #0]
				if(i==4){
 8001b54:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <DecodeQT+0x174>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d17e      	bne.n	8001c5a <DecodeQT+0x152>
					step++;
 8001b5c:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <DecodeQT+0x168>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <DecodeQT+0x168>)
 8001b66:	701a      	strb	r2, [r3, #0]
					i=0;
 8001b68:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <DecodeQT+0x174>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
					cksQT='U'^'N'^'E'^'R';
 8001b6e:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <DecodeQT+0x17c>)
 8001b70:	220c      	movs	r2, #12
 8001b72:	701a      	strb	r2, [r3, #0]
				}
			}else
				i=0;

			break;
 8001b74:	e071      	b.n	8001c5a <DecodeQT+0x152>
				i=0;
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <DecodeQT+0x174>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
			break;
 8001b7c:	e06d      	b.n	8001c5a <DecodeQT+0x152>
		case 1:
			bytesUNERprotocol=buffer_PC_RX[indexR_PC_RX];
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <DecodeQT+0x16c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <DecodeQT+0x170>)
 8001b88:	5c9b      	ldrb	r3, [r3, r2]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <DecodeQT+0x180>)
 8001b8e:	701a      	strb	r2, [r3, #0]
			step++;
 8001b90:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <DecodeQT+0x168>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <DecodeQT+0x168>)
 8001b9a:	701a      	strb	r2, [r3, #0]
			cksQT^=bytesUNERprotocol;
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <DecodeQT+0x17c>)
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <DecodeQT+0x180>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4053      	eors	r3, r2
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <DecodeQT+0x17c>)
 8001baa:	701a      	strb	r2, [r3, #0]
			break;
 8001bac:	e056      	b.n	8001c5c <DecodeQT+0x154>
		case 2:
			if(buffer_PC_RX[indexR_PC_RX]==':'){
 8001bae:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <DecodeQT+0x16c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <DecodeQT+0x170>)
 8001bb8:	5c9b      	ldrb	r3, [r3, r2]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b3a      	cmp	r3, #58	; 0x3a
 8001bbe:	d10d      	bne.n	8001bdc <DecodeQT+0xd4>
				step++;
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <DecodeQT+0x168>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <DecodeQT+0x168>)
 8001bca:	701a      	strb	r2, [r3, #0]
				cksQT^=':';
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <DecodeQT+0x17c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	f083 033a 	eor.w	r3, r3, #58	; 0x3a
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <DecodeQT+0x17c>)
 8001bd8:	701a      	strb	r2, [r3, #0]
			}else{
				step=0;
			}
			break;
 8001bda:	e03f      	b.n	8001c5c <DecodeQT+0x154>
				step=0;
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <DecodeQT+0x168>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
			break;
 8001be2:	e03b      	b.n	8001c5c <DecodeQT+0x154>
		case 3:
			if(counter==1)
 8001be4:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <DecodeQT+0x184>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d104      	bne.n	8001bf6 <DecodeQT+0xee>
				cmdPosInBuff=indexR_PC_RX;
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <DecodeQT+0x16c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <DecodeQT+0x188>)
 8001bf4:	701a      	strb	r2, [r3, #0]
			if(counter<bytesUNERprotocol){
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <DecodeQT+0x184>)
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <DecodeQT+0x180>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d213      	bcs.n	8001c2a <DecodeQT+0x122>
				cksQT^=buffer_PC_RX[indexR_PC_RX];
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <DecodeQT+0x16c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <DecodeQT+0x170>)
 8001c0c:	5c9b      	ldrb	r3, [r3, r2]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <DecodeQT+0x17c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4053      	eors	r3, r2
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <DecodeQT+0x17c>)
 8001c1a:	701a      	strb	r2, [r3, #0]
				counter++;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <DecodeQT+0x184>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <DecodeQT+0x184>)
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	e018      	b.n	8001c5c <DecodeQT+0x154>
			}else{
				if(cksQT==buffer_PC_RX[indexR_PC_RX]){
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <DecodeQT+0x16c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <DecodeQT+0x170>)
 8001c34:	5c9b      	ldrb	r3, [r3, r2]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <DecodeQT+0x17c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d105      	bne.n	8001c4c <DecodeQT+0x144>
					DecodeCommands((uint8_t*)&buffer_PC_RX, cmdPosInBuff);
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <DecodeQT+0x188>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	480c      	ldr	r0, [pc, #48]	; (8001c78 <DecodeQT+0x170>)
 8001c48:	f000 f824 	bl	8001c94 <DecodeCommands>
				}
				step=0;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <DecodeQT+0x168>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
				counter=1;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <DecodeQT+0x184>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	e000      	b.n	8001c5c <DecodeQT+0x154>
			break;
 8001c5a:	bf00      	nop
			}
	}
	indexR_PC_RX++;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <DecodeQT+0x16c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <DecodeQT+0x16c>)
 8001c68:	701a      	strb	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200008eb 	.word	0x200008eb
 8001c74:	20000846 	.word	0x20000846
 8001c78:	20000740 	.word	0x20000740
 8001c7c:	200008ec 	.word	0x200008ec
 8001c80:	08009378 	.word	0x08009378
 8001c84:	200008ed 	.word	0x200008ed
 8001c88:	20000864 	.word	0x20000864
 8001c8c:	20000003 	.word	0x20000003
 8001c90:	200008ee 	.word	0x200008ee

08001c94 <DecodeCommands>:

void DecodeCommands(uint8_t *buffer,uint8_t indexCMD){
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
	uint8_t i=1;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]


	switch(buffer[indexCMD]){
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2bf1      	cmp	r3, #241	; 0xf1
 8001cae:	d01c      	beq.n	8001cea <DecodeCommands+0x56>
 8001cb0:	2bf1      	cmp	r3, #241	; 0xf1
 8001cb2:	f300 81ca 	bgt.w	800204a <DecodeCommands+0x3b6>
 8001cb6:	2bf0      	cmp	r3, #240	; 0xf0
 8001cb8:	f000 80e8 	beq.w	8001e8c <DecodeCommands+0x1f8>
 8001cbc:	2bf0      	cmp	r3, #240	; 0xf0
 8001cbe:	f300 81c4 	bgt.w	800204a <DecodeCommands+0x3b6>
 8001cc2:	2bd0      	cmp	r3, #208	; 0xd0
 8001cc4:	f000 8102 	beq.w	8001ecc <DecodeCommands+0x238>
 8001cc8:	2bd0      	cmp	r3, #208	; 0xd0
 8001cca:	f300 81be 	bgt.w	800204a <DecodeCommands+0x3b6>
 8001cce:	2bb0      	cmp	r3, #176	; 0xb0
 8001cd0:	d002      	beq.n	8001cd8 <DecodeCommands+0x44>
 8001cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8001cd4:	d046      	beq.n	8001d64 <DecodeCommands+0xd0>
				break;



	}
}
 8001cd6:	e1b8      	b.n	800204a <DecodeCommands+0x3b6>
				comandoActual=0xB0;
 8001cd8:	4b72      	ldr	r3, [pc, #456]	; (8001ea4 <DecodeCommands+0x210>)
 8001cda:	22b0      	movs	r2, #176	; 0xb0
 8001cdc:	701a      	strb	r2, [r3, #0]
				stop=1;
 8001cde:	4a72      	ldr	r2, [pc, #456]	; (8001ea8 <DecodeCommands+0x214>)
 8001ce0:	7813      	ldrb	r3, [r2, #0]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	7013      	strb	r3, [r2, #0]
				break;
 8001ce8:	e1af      	b.n	800204a <DecodeCommands+0x3b6>
				PWM_motor1.u8[0]=buffer[indexCMD+i];
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	4413      	add	r3, r2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781a      	ldrb	r2, [r3, #0]
 8001cf8:	4b6c      	ldr	r3, [pc, #432]	; (8001eac <DecodeCommands+0x218>)
 8001cfa:	701a      	strb	r2, [r3, #0]
				i++;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
				PWM_motor1.u8[1]=buffer[indexCMD+i];
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	4413      	add	r3, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	4b66      	ldr	r3, [pc, #408]	; (8001eac <DecodeCommands+0x218>)
 8001d12:	705a      	strb	r2, [r3, #1]
				i++;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	3301      	adds	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
				PWM_motor1.u8[2]=buffer[indexCMD+i];
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	4413      	add	r3, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	4b60      	ldr	r3, [pc, #384]	; (8001eac <DecodeCommands+0x218>)
 8001d2a:	709a      	strb	r2, [r3, #2]
				i++;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
				PWM_motor1.u8[3]=buffer[indexCMD+i];
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	4413      	add	r3, r2
 8001d38:	461a      	mov	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	4b5a      	ldr	r3, [pc, #360]	; (8001eac <DecodeCommands+0x218>)
 8001d42:	70da      	strb	r2, [r3, #3]
				PWM_motor2.u32=PWM_motor1.u32;
 8001d44:	4b59      	ldr	r3, [pc, #356]	; (8001eac <DecodeCommands+0x218>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a59      	ldr	r2, [pc, #356]	; (8001eb0 <DecodeCommands+0x21c>)
 8001d4a:	6013      	str	r3, [r2, #0]
				comandoActual=0xF1;
 8001d4c:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <DecodeCommands+0x210>)
 8001d4e:	22f1      	movs	r2, #241	; 0xf1
 8001d50:	701a      	strb	r2, [r3, #0]
				race=1;
 8001d52:	4a55      	ldr	r2, [pc, #340]	; (8001ea8 <DecodeCommands+0x214>)
 8001d54:	7813      	ldrb	r3, [r2, #0]
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	7013      	strb	r3, [r2, #0]
				timeOutPID=2;
 8001d5c:	4b55      	ldr	r3, [pc, #340]	; (8001eb4 <DecodeCommands+0x220>)
 8001d5e:	2202      	movs	r2, #2
 8001d60:	701a      	strb	r2, [r3, #0]
				break;
 8001d62:	e172      	b.n	800204a <DecodeCommands+0x3b6>
				Kp.u8[0]=buffer[indexCMD+i];
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	4413      	add	r3, r2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	4b51      	ldr	r3, [pc, #324]	; (8001eb8 <DecodeCommands+0x224>)
 8001d74:	701a      	strb	r2, [r3, #0]
				i++;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
				Kp.u8[1]=buffer[indexCMD+i];
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	4413      	add	r3, r2
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <DecodeCommands+0x224>)
 8001d8c:	705a      	strb	r2, [r3, #1]
				i++;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3301      	adds	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
				Kp.u8[2]=buffer[indexCMD+i];
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	4413      	add	r3, r2
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	4b45      	ldr	r3, [pc, #276]	; (8001eb8 <DecodeCommands+0x224>)
 8001da4:	709a      	strb	r2, [r3, #2]
				i++;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	3301      	adds	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
				Kp.u8[3]=buffer[indexCMD+i];
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	4413      	add	r3, r2
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <DecodeCommands+0x224>)
 8001dbc:	70da      	strb	r2, [r3, #3]
				i++;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
				Kp.u8[0]=buffer[indexCMD+i];
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	4413      	add	r3, r2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <DecodeCommands+0x224>)
 8001dd4:	701a      	strb	r2, [r3, #0]
				i++;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
				Kd.u8[1]=buffer[indexCMD+i];
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	4413      	add	r3, r2
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <DecodeCommands+0x228>)
 8001dec:	705a      	strb	r2, [r3, #1]
				i++;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3301      	adds	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
				Kd.u8[2]=buffer[indexCMD+i];
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	4413      	add	r3, r2
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <DecodeCommands+0x228>)
 8001e04:	709a      	strb	r2, [r3, #2]
				i++;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
				Kd.u8[3]=buffer[indexCMD+i];
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	4413      	add	r3, r2
 8001e12:	461a      	mov	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <DecodeCommands+0x228>)
 8001e1c:	70da      	strb	r2, [r3, #3]
				i++;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	3301      	adds	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
				Ki.u8[0]=buffer[indexCMD+i];
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	4413      	add	r3, r2
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <DecodeCommands+0x22c>)
 8001e34:	701a      	strb	r2, [r3, #0]
				i++;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
				Ki.u8[1]=buffer[indexCMD+i];
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	4413      	add	r3, r2
 8001e42:	461a      	mov	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <DecodeCommands+0x22c>)
 8001e4c:	705a      	strb	r2, [r3, #1]
				i++;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3301      	adds	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
				Ki.u8[2]=buffer[indexCMD+i];
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	4413      	add	r3, r2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <DecodeCommands+0x22c>)
 8001e64:	709a      	strb	r2, [r3, #2]
				i++;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
				Ki.u8[3]=buffer[indexCMD+i];
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	4413      	add	r3, r2
 8001e72:	461a      	mov	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <DecodeCommands+0x22c>)
 8001e7c:	70da      	strb	r2, [r3, #3]
				i++;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	3301      	adds	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
				comandoActual=0xC0;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <DecodeCommands+0x210>)
 8001e86:	22c0      	movs	r2, #192	; 0xc0
 8001e88:	701a      	strb	r2, [r3, #0]
				break;
 8001e8a:	e0de      	b.n	800204a <DecodeCommands+0x3b6>
				duty=2;
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <DecodeCommands+0x230>)
 8001e8e:	2202      	movs	r2, #2
 8001e90:	701a      	strb	r2, [r3, #0]
				readyToSend=1;
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <DecodeCommands+0x214>)
 8001e94:	7813      	ldrb	r3, [r2, #0]
 8001e96:	f043 0310 	orr.w	r3, r3, #16
 8001e9a:	7013      	strb	r3, [r2, #0]
				AT=6;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <DecodeCommands+0x234>)
 8001e9e:	2206      	movs	r2, #6
 8001ea0:	701a      	strb	r2, [r3, #0]
				break;
 8001ea2:	e0d2      	b.n	800204a <DecodeCommands+0x3b6>
 8001ea4:	200008c0 	.word	0x200008c0
 8001ea8:	2000089c 	.word	0x2000089c
 8001eac:	2000086c 	.word	0x2000086c
 8001eb0:	20000870 	.word	0x20000870
 8001eb4:	20000850 	.word	0x20000850
 8001eb8:	200008a4 	.word	0x200008a4
 8001ebc:	200008a8 	.word	0x200008a8
 8001ec0:	200008ac 	.word	0x200008ac
 8001ec4:	20000851 	.word	0x20000851
 8001ec8:	20000848 	.word	0x20000848
				PWM_motor1.u8[0]=buffer[indexCMD+i];
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	4b5f      	ldr	r3, [pc, #380]	; (8002058 <DecodeCommands+0x3c4>)
 8001edc:	701a      	strb	r2, [r3, #0]
				i++;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
				PWM_motor1.u8[1]=buffer[indexCMD+i];
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	4413      	add	r3, r2
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	4b59      	ldr	r3, [pc, #356]	; (8002058 <DecodeCommands+0x3c4>)
 8001ef4:	705a      	strb	r2, [r3, #1]
				i++;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
				PWM_motor1.u8[2]=buffer[indexCMD+i];
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	4413      	add	r3, r2
 8001f02:	461a      	mov	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	4b53      	ldr	r3, [pc, #332]	; (8002058 <DecodeCommands+0x3c4>)
 8001f0c:	709a      	strb	r2, [r3, #2]
				i++;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	3301      	adds	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
				PWM_motor1.u8[3]=buffer[indexCMD+i];
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	4413      	add	r3, r2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <DecodeCommands+0x3c4>)
 8001f24:	70da      	strb	r2, [r3, #3]
				i++;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
				PWM_motor2.u8[0]=buffer[indexCMD+i];
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	4413      	add	r3, r2
 8001f32:	461a      	mov	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	4b48      	ldr	r3, [pc, #288]	; (800205c <DecodeCommands+0x3c8>)
 8001f3c:	701a      	strb	r2, [r3, #0]
				i++;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	3301      	adds	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
				PWM_motor2.u8[1]=buffer[indexCMD+i];
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	4413      	add	r3, r2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	4b42      	ldr	r3, [pc, #264]	; (800205c <DecodeCommands+0x3c8>)
 8001f54:	705a      	strb	r2, [r3, #1]
				i++;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
				PWM_motor2.u8[2]=buffer[indexCMD+i];
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	4413      	add	r3, r2
 8001f62:	461a      	mov	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4413      	add	r3, r2
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4b3c      	ldr	r3, [pc, #240]	; (800205c <DecodeCommands+0x3c8>)
 8001f6c:	709a      	strb	r2, [r3, #2]
				i++;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
				PWM_motor2.u8[3]=buffer[indexCMD+i];
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	4413      	add	r3, r2
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	4b36      	ldr	r3, [pc, #216]	; (800205c <DecodeCommands+0x3c8>)
 8001f84:	70da      	strb	r2, [r3, #3]
				i++;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
				jobTime.u8[0]=bufferRxESP[indexCMD+i];
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a33      	ldr	r2, [pc, #204]	; (8002060 <DecodeCommands+0x3cc>)
 8001f94:	5cd3      	ldrb	r3, [r2, r3]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b32      	ldr	r3, [pc, #200]	; (8002064 <DecodeCommands+0x3d0>)
 8001f9a:	701a      	strb	r2, [r3, #0]
				i++;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
				jobTime.u8[1]=bufferRxESP[indexCMD+i];
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <DecodeCommands+0x3cc>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <DecodeCommands+0x3d0>)
 8001fb0:	705a      	strb	r2, [r3, #1]
				i++;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
				jobTime.u8[2]=bufferRxESP[indexCMD+i];
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a28      	ldr	r2, [pc, #160]	; (8002060 <DecodeCommands+0x3cc>)
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <DecodeCommands+0x3d0>)
 8001fc6:	709a      	strb	r2, [r3, #2]
				i++;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
				jobTime.u8[3]=bufferRxESP[indexCMD+i];
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a22      	ldr	r2, [pc, #136]	; (8002060 <DecodeCommands+0x3cc>)
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b22      	ldr	r3, [pc, #136]	; (8002064 <DecodeCommands+0x3d0>)
 8001fdc:	70da      	strb	r2, [r3, #3]
				i++;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
				jobTime.u32=jobTime.u32/100;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <DecodeCommands+0x3d0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <DecodeCommands+0x3d4>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <DecodeCommands+0x3d0>)
 8001ff2:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,PWM_motor1.u32);
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <DecodeCommands+0x3d8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	; (8002058 <DecodeCommands+0x3c4>)
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <DecodeCommands+0x3d8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <DecodeCommands+0x3d8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,PWM_motor2.u32);
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <DecodeCommands+0x3d8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <DecodeCommands+0x3c8>)
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
				race=1;
 8002018:	4a15      	ldr	r2, [pc, #84]	; (8002070 <DecodeCommands+0x3dc>)
 800201a:	7813      	ldrb	r3, [r2, #0]
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	7013      	strb	r3, [r2, #0]
				killRace=1;
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <DecodeCommands+0x3dc>)
 8002024:	7813      	ldrb	r3, [r2, #0]
 8002026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800202a:	7013      	strb	r3, [r2, #0]
				duty=2;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <DecodeCommands+0x3e0>)
 800202e:	2202      	movs	r2, #2
 8002030:	701a      	strb	r2, [r3, #0]
				comandoActual=0xD0;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <DecodeCommands+0x3e4>)
 8002034:	22d0      	movs	r2, #208	; 0xd0
 8002036:	701a      	strb	r2, [r3, #0]
				comando=0xD0;
 8002038:	4b10      	ldr	r3, [pc, #64]	; (800207c <DecodeCommands+0x3e8>)
 800203a:	22d0      	movs	r2, #208	; 0xd0
 800203c:	701a      	strb	r2, [r3, #0]
				readyToSend=1;
 800203e:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <DecodeCommands+0x3dc>)
 8002040:	7813      	ldrb	r3, [r2, #0]
 8002042:	f043 0310 	orr.w	r3, r3, #16
 8002046:	7013      	strb	r3, [r2, #0]
				break;
 8002048:	bf00      	nop
}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000086c 	.word	0x2000086c
 800205c:	20000870 	.word	0x20000870
 8002060:	20000540 	.word	0x20000540
 8002064:	20000874 	.word	0x20000874
 8002068:	51eb851f 	.word	0x51eb851f
 800206c:	20000128 	.word	0x20000128
 8002070:	2000089c 	.word	0x2000089c
 8002074:	20000851 	.word	0x20000851
 8002078:	200008c0 	.word	0x200008c0
 800207c:	20000000 	.word	0x20000000

08002080 <calculatePID>:

void calculatePID(uint32_t pwmBase1,uint32_t pwmBase2){
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
	float pwm1,pwm2;

	integral+=error.f;
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <calculatePID+0x118>)
 800208c:	ed93 7a00 	vldr	s14, [r3]
 8002090:	4b42      	ldr	r3, [pc, #264]	; (800219c <calculatePID+0x11c>)
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209a:	4b40      	ldr	r3, [pc, #256]	; (800219c <calculatePID+0x11c>)
 800209c:	edc3 7a00 	vstr	s15, [r3]
	derivativo=error.f-lastError;
 80020a0:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <calculatePID+0x118>)
 80020a2:	ed93 7a00 	vldr	s14, [r3]
 80020a6:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <calculatePID+0x120>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b0:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <calculatePID+0x124>)
 80020b2:	edc3 7a00 	vstr	s15, [r3]
	turn= Kp.f*error.f + Kd.f*derivativo + Ki.f*integral;
 80020b6:	4b3c      	ldr	r3, [pc, #240]	; (80021a8 <calculatePID+0x128>)
 80020b8:	ed93 7a00 	vldr	s14, [r3]
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <calculatePID+0x118>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c6:	4b39      	ldr	r3, [pc, #228]	; (80021ac <calculatePID+0x12c>)
 80020c8:	edd3 6a00 	vldr	s13, [r3]
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <calculatePID+0x124>)
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020da:	4b35      	ldr	r3, [pc, #212]	; (80021b0 <calculatePID+0x130>)
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	4b2e      	ldr	r3, [pc, #184]	; (800219c <calculatePID+0x11c>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <calculatePID+0x134>)
 80020f0:	edc3 7a00 	vstr	s15, [r3]
	pwm1=pwmBase1-turn;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <calculatePID+0x134>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002108:	edc7 7a03 	vstr	s15, [r7, #12]
	pwm2=pwmBase2+turn;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002116:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <calculatePID+0x134>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002120:	edc7 7a02 	vstr	s15, [r7, #8]

	if(pwm1>200)
 8002124:	edd7 7a03 	vldr	s15, [r7, #12]
 8002128:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80021b8 <calculatePID+0x138>
 800212c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	dd01      	ble.n	800213a <calculatePID+0xba>
		pwm1=200;
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <calculatePID+0x13c>)
 8002138:	60fb      	str	r3, [r7, #12]
	if(pwm2>200)
 800213a:	edd7 7a02 	vldr	s15, [r7, #8]
 800213e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80021b8 <calculatePID+0x138>
 8002142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	dd01      	ble.n	8002150 <calculatePID+0xd0>
		pwm2=200;
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <calculatePID+0x13c>)
 800214e:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pwm1);
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <calculatePID+0x140>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	edd7 7a03 	vldr	s15, [r7, #12]
 8002158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800215c:	ee17 2a90 	vmov	r2, s15
 8002160:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <calculatePID+0x140>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <calculatePID+0x140>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,pwm2);
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <calculatePID+0x140>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	edd7 7a02 	vldr	s15, [r7, #8]
 800217a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800217e:	ee17 2a90 	vmov	r2, s15
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
	lastError=error.f;
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <calculatePID+0x118>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <calculatePID+0x120>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	20000878 	.word	0x20000878
 800219c:	200008b0 	.word	0x200008b0
 80021a0:	200008bc 	.word	0x200008bc
 80021a4:	200008b4 	.word	0x200008b4
 80021a8:	200008a4 	.word	0x200008a4
 80021ac:	200008a8 	.word	0x200008a8
 80021b0:	200008ac 	.word	0x200008ac
 80021b4:	200008b8 	.word	0x200008b8
 80021b8:	43480000 	.word	0x43480000
 80021bc:	43480000 	.word	0x43480000
 80021c0:	20000128 	.word	0x20000128

080021c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c8:	f001 f816 	bl	80031f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021cc:	f000 fa24 	bl	8002618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d0:	f000 fcc8 	bl	8002b64 <MX_GPIO_Init>
  MX_DMA_Init();
 80021d4:	f000 fca6 	bl	8002b24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80021d8:	f000 fc7a 	bl	8002ad0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80021dc:	f000 fa88 	bl	80026f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80021e0:	f000 fb3a 	bl	8002858 <MX_I2C1_Init>
  MX_TIM3_Init();
 80021e4:	f000 fb66 	bl	80028b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80021e8:	f000 fbfa 	bl	80029e0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80021ec:	f000 fc46 	bl	8002a7c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80021f0:	488d      	ldr	r0, [pc, #564]	; (8002428 <main+0x264>)
 80021f2:	f004 ff79 	bl	80070e8 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80021f6:	2100      	movs	r1, #0
 80021f8:	488b      	ldr	r0, [pc, #556]	; (8002428 <main+0x264>)
 80021fa:	f005 f88b 	bl	8007314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80021fe:	2104      	movs	r1, #4
 8002200:	4889      	ldr	r0, [pc, #548]	; (8002428 <main+0x264>)
 8002202:	f005 f887 	bl	8007314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002206:	2108      	movs	r1, #8
 8002208:	4887      	ldr	r0, [pc, #540]	; (8002428 <main+0x264>)
 800220a:	f005 f883 	bl	8007314 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800220e:	210c      	movs	r1, #12
 8002210:	4885      	ldr	r0, [pc, #532]	; (8002428 <main+0x264>)
 8002212:	f005 f87f 	bl	8007314 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim4);
 8002216:	4885      	ldr	r0, [pc, #532]	; (800242c <main+0x268>)
 8002218:	f004 ffc0 	bl	800719c <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);//ESP8266 Pin Enable
 800221c:	2201      	movs	r2, #1
 800221e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002222:	4883      	ldr	r0, [pc, #524]	; (8002430 <main+0x26c>)
 8002224:	f002 fc24 	bl	8004a70 <HAL_GPIO_WritePin>
  timeOut2=30;
 8002228:	4b82      	ldr	r3, [pc, #520]	; (8002434 <main+0x270>)
 800222a:	221e      	movs	r2, #30
 800222c:	701a      	strb	r2, [r3, #0]
  timeOut3=10;
 800222e:	4b82      	ldr	r3, [pc, #520]	; (8002438 <main+0x274>)
 8002230:	220a      	movs	r2, #10
 8002232:	701a      	strb	r2, [r3, #0]
  timeToSendAlive=30;
 8002234:	4b81      	ldr	r3, [pc, #516]	; (800243c <main+0x278>)
 8002236:	221e      	movs	r2, #30
 8002238:	701a      	strb	r2, [r3, #0]
  timeOut=30;
 800223a:	4b81      	ldr	r3, [pc, #516]	; (8002440 <main+0x27c>)
 800223c:	221e      	movs	r2, #30
 800223e:	701a      	strb	r2, [r3, #0]
  readyToSend=1;
 8002240:	4a80      	ldr	r2, [pc, #512]	; (8002444 <main+0x280>)
 8002242:	7813      	ldrb	r3, [r2, #0]
 8002244:	f043 0310 	orr.w	r3, r3, #16
 8002248:	7013      	strb	r3, [r2, #0]
  race=0;
 800224a:	4a7e      	ldr	r2, [pc, #504]	; (8002444 <main+0x280>)
 800224c:	7813      	ldrb	r3, [r2, #0]
 800224e:	f36f 0300 	bfc	r3, #0, #1
 8002252:	7013      	strb	r3, [r2, #0]
  killRace=0;
 8002254:	4a7b      	ldr	r2, [pc, #492]	; (8002444 <main+0x280>)
 8002256:	7813      	ldrb	r3, [r2, #0]
 8002258:	f36f 1386 	bfc	r3, #6, #1
 800225c:	7013      	strb	r3, [r2, #0]
  stop=0;
 800225e:	4a79      	ldr	r2, [pc, #484]	; (8002444 <main+0x280>)
 8002260:	7813      	ldrb	r3, [r2, #0]
 8002262:	f36f 03c3 	bfc	r3, #3, #1
 8002266:	7013      	strb	r3, [r2, #0]
  duty=0;
 8002268:	4b77      	ldr	r3, [pc, #476]	; (8002448 <main+0x284>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
  espConnected=0;
 800226e:	4a77      	ldr	r2, [pc, #476]	; (800244c <main+0x288>)
 8002270:	7813      	ldrb	r3, [r2, #0]
 8002272:	f36f 0300 	bfc	r3, #0, #1
 8002276:	7013      	strb	r3, [r2, #0]
  sendALIVE=0;
 8002278:	4a74      	ldr	r2, [pc, #464]	; (800244c <main+0x288>)
 800227a:	7813      	ldrb	r3, [r2, #0]
 800227c:	f36f 0341 	bfc	r3, #1, #1
 8002280:	7013      	strb	r3, [r2, #0]

  PWM_motor1.u32=0;
 8002282:	4b73      	ldr	r3, [pc, #460]	; (8002450 <main+0x28c>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
  PWM_motor2.u32=0;
 8002288:	4b72      	ldr	r3, [pc, #456]	; (8002454 <main+0x290>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
  time100ms=200;
 800228e:	4b72      	ldr	r3, [pc, #456]	; (8002458 <main+0x294>)
 8002290:	22c8      	movs	r2, #200	; 0xc8
 8002292:	701a      	strb	r2, [r3, #0]
  time10ms=20;
 8002294:	4b71      	ldr	r3, [pc, #452]	; (800245c <main+0x298>)
 8002296:	2214      	movs	r2, #20
 8002298:	701a      	strb	r2, [r3, #0]
  timeOutADC=0;
 800229a:	4b71      	ldr	r3, [pc, #452]	; (8002460 <main+0x29c>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&buffer_PC_RX[indexW_PC_RX],1);
 80022a0:	4b70      	ldr	r3, [pc, #448]	; (8002464 <main+0x2a0>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b6f      	ldr	r3, [pc, #444]	; (8002468 <main+0x2a4>)
 80022aa:	4413      	add	r3, r2
 80022ac:	2201      	movs	r2, #1
 80022ae:	4619      	mov	r1, r3
 80022b0:	486e      	ldr	r0, [pc, #440]	; (800246c <main+0x2a8>)
 80022b2:	f005 ff34 	bl	800811e <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(ON100MS){
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <main+0x280>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d03c      	beq.n	800233e <main+0x17a>
		ON100MS=0;
 80022c4:	4a5f      	ldr	r2, [pc, #380]	; (8002444 <main+0x280>)
 80022c6:	7813      	ldrb	r3, [r2, #0]
 80022c8:	f36f 0341 	bfc	r3, #1, #1
 80022cc:	7013      	strb	r3, [r2, #0]
	  	if(timeOut>0)
 80022ce:	4b5c      	ldr	r3, [pc, #368]	; (8002440 <main+0x27c>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <main+0x11e>
			timeOut--;
 80022d6:	4b5a      	ldr	r3, [pc, #360]	; (8002440 <main+0x27c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	3b01      	subs	r3, #1
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b58      	ldr	r3, [pc, #352]	; (8002440 <main+0x27c>)
 80022e0:	701a      	strb	r2, [r3, #0]
		if(timeOut2>0)
 80022e2:	4b54      	ldr	r3, [pc, #336]	; (8002434 <main+0x270>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <main+0x132>
			timeOut2--;
 80022ea:	4b52      	ldr	r3, [pc, #328]	; (8002434 <main+0x270>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b50      	ldr	r3, [pc, #320]	; (8002434 <main+0x270>)
 80022f4:	701a      	strb	r2, [r3, #0]
		if(timeOut3>0)
 80022f6:	4b50      	ldr	r3, [pc, #320]	; (8002438 <main+0x274>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <main+0x146>
			timeOut3--;
 80022fe:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <main+0x274>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	3b01      	subs	r3, #1
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <main+0x274>)
 8002308:	701a      	strb	r2, [r3, #0]
		if(jobTime.u32>0)
 800230a:	4b59      	ldr	r3, [pc, #356]	; (8002470 <main+0x2ac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <main+0x158>
			jobTime.u32--;
 8002312:	4b57      	ldr	r3, [pc, #348]	; (8002470 <main+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3b01      	subs	r3, #1
 8002318:	4a55      	ldr	r2, [pc, #340]	; (8002470 <main+0x2ac>)
 800231a:	6013      	str	r3, [r2, #0]
		if((timeToSendAlive>0)&&(espConnected))
 800231c:	4b47      	ldr	r3, [pc, #284]	; (800243c <main+0x278>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00c      	beq.n	800233e <main+0x17a>
 8002324:	4b49      	ldr	r3, [pc, #292]	; (800244c <main+0x288>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <main+0x17a>
			timeToSendAlive--;
 8002332:	4b42      	ldr	r3, [pc, #264]	; (800243c <main+0x278>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	3b01      	subs	r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <main+0x278>)
 800233c:	701a      	strb	r2, [r3, #0]

	  }

	  if(ON10MS){
 800233e:	4b41      	ldr	r3, [pc, #260]	; (8002444 <main+0x280>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d018      	beq.n	800237e <main+0x1ba>
		  ON10MS=0;
 800234c:	4a3d      	ldr	r2, [pc, #244]	; (8002444 <main+0x280>)
 800234e:	7813      	ldrb	r3, [r2, #0]
 8002350:	f36f 0382 	bfc	r3, #2, #1
 8002354:	7013      	strb	r3, [r2, #0]
		  if(timeOutADC>0)
 8002356:	4b42      	ldr	r3, [pc, #264]	; (8002460 <main+0x29c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <main+0x1a6>
			timeOutADC--;
 800235e:	4b40      	ldr	r3, [pc, #256]	; (8002460 <main+0x29c>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	3b01      	subs	r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <main+0x29c>)
 8002368:	701a      	strb	r2, [r3, #0]

		  if(timeOutPID>0)
 800236a:	4b42      	ldr	r3, [pc, #264]	; (8002474 <main+0x2b0>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <main+0x1ba>
				timeOutPID--;
 8002372:	4b40      	ldr	r3, [pc, #256]	; (8002474 <main+0x2b0>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	3b01      	subs	r3, #1
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <main+0x2b0>)
 800237c:	701a      	strb	r2, [r3, #0]
	  }

	  if(!timeOut3){
 800237e:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <main+0x274>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <main+0x1d0>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002386:	2120      	movs	r1, #32
 8002388:	483b      	ldr	r0, [pc, #236]	; (8002478 <main+0x2b4>)
 800238a:	f002 fb8a 	bl	8004aa2 <HAL_GPIO_TogglePin>
		  timeOut3=10;
 800238e:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <main+0x274>)
 8002390:	220a      	movs	r2, #10
 8002392:	701a      	strb	r2, [r3, #0]

	  }
	  if( (!timeToSendAlive) && (espConnected) ){
 8002394:	4b29      	ldr	r3, [pc, #164]	; (800243c <main+0x278>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d118      	bne.n	80023ce <main+0x20a>
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <main+0x288>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d011      	beq.n	80023ce <main+0x20a>
		  sendALIVE=1;
 80023aa:	4a28      	ldr	r2, [pc, #160]	; (800244c <main+0x288>)
 80023ac:	7813      	ldrb	r3, [r2, #0]
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	7013      	strb	r3, [r2, #0]
		  espReadyToRecieve=0;
 80023b4:	4a23      	ldr	r2, [pc, #140]	; (8002444 <main+0x280>)
 80023b6:	7813      	ldrb	r3, [r2, #0]
 80023b8:	f36f 1345 	bfc	r3, #5, #1
 80023bc:	7013      	strb	r3, [r2, #0]
		  timeToSendAlive=30;
 80023be:	4b1f      	ldr	r3, [pc, #124]	; (800243c <main+0x278>)
 80023c0:	221e      	movs	r2, #30
 80023c2:	701a      	strb	r2, [r3, #0]
		  readyToSend=1;
 80023c4:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <main+0x280>)
 80023c6:	7813      	ldrb	r3, [r2, #0]
 80023c8:	f043 0310 	orr.w	r3, r3, #16
 80023cc:	7013      	strb	r3, [r2, #0]
	  }
	  if(sendALIVE)
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <main+0x288>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <main+0x21e>
		  udpCom(0xF0);
 80023dc:	20f0      	movs	r0, #240	; 0xf0
 80023de:	f7ff fa8b 	bl	80018f8 <udpCom>


	  switch(duty){
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <main+0x284>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <main+0x22c>
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d018      	beq.n	8002420 <main+0x25c>
 80023ee:	e04c      	b.n	800248a <main+0x2c6>
	  	  case 0:
	  		  if(!timeOut){
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <main+0x27c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d147      	bne.n	8002488 <main+0x2c4>
	  			 initESP();
 80023f8:	f7ff f9ae 	bl	8001758 <initESP>
	  			 HAL_UART_Receive_IT(&huart1, (uint8_t *)&bufferRxESP[indexW_RxESP], 1);
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <main+0x2b8>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <main+0x2bc>)
 8002406:	4413      	add	r3, r2
 8002408:	2201      	movs	r2, #1
 800240a:	4619      	mov	r1, r3
 800240c:	481d      	ldr	r0, [pc, #116]	; (8002484 <main+0x2c0>)
 800240e:	f005 fe86 	bl	800811e <HAL_UART_Receive_IT>
	  		  	 duty++;
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <main+0x284>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <main+0x284>)
 800241c:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 800241e:	e033      	b.n	8002488 <main+0x2c4>
	  	  case 1:
	  		  initESP();
 8002420:	f7ff f99a 	bl	8001758 <initESP>
	  		  break;
 8002424:	e031      	b.n	800248a <main+0x2c6>
 8002426:	bf00      	nop
 8002428:	20000128 	.word	0x20000128
 800242c:	20000170 	.word	0x20000170
 8002430:	40020400 	.word	0x40020400
 8002434:	2000084c 	.word	0x2000084c
 8002438:	2000084d 	.word	0x2000084d
 800243c:	2000084e 	.word	0x2000084e
 8002440:	2000084b 	.word	0x2000084b
 8002444:	2000089c 	.word	0x2000089c
 8002448:	20000851 	.word	0x20000851
 800244c:	200008a0 	.word	0x200008a0
 8002450:	2000086c 	.word	0x2000086c
 8002454:	20000870 	.word	0x20000870
 8002458:	20000849 	.word	0x20000849
 800245c:	2000084a 	.word	0x2000084a
 8002460:	2000084f 	.word	0x2000084f
 8002464:	20000847 	.word	0x20000847
 8002468:	20000740 	.word	0x20000740
 800246c:	200001fc 	.word	0x200001fc
 8002470:	20000874 	.word	0x20000874
 8002474:	20000850 	.word	0x20000850
 8002478:	40020000 	.word	0x40020000
 800247c:	20000843 	.word	0x20000843
 8002480:	20000540 	.word	0x20000540
 8002484:	200001b8 	.word	0x200001b8
	  		  break;
 8002488:	bf00      	nop
	  }

	  if(!timeOutADC){
 800248a:	4b4f      	ldr	r3, [pc, #316]	; (80025c8 <main+0x404>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <main+0x2e6>
		readADC();
 8002492:	f7ff f849 	bl	8001528 <readADC>
		error.f=findTheLine();
 8002496:	f7fe ff19 	bl	80012cc <findTheLine>
 800249a:	eef0 7a40 	vmov.f32	s15, s0
 800249e:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <main+0x408>)
 80024a0:	edc3 7a00 	vstr	s15, [r3]
		timeOutADC=2;
 80024a4:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <main+0x404>)
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
//		SerialCom(0xA1);
	  }

	  if( (race) && (!timeOutPID) ){
 80024aa:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <main+0x40c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00e      	beq.n	80024d6 <main+0x312>
 80024b8:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <main+0x410>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <main+0x312>
		  calculatePID(PWM_motor1.u32,PWM_motor2.u32);
 80024c0:	4b45      	ldr	r3, [pc, #276]	; (80025d8 <main+0x414>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a45      	ldr	r2, [pc, #276]	; (80025dc <main+0x418>)
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fdd8 	bl	8002080 <calculatePID>
		  timeOutPID=2;
 80024d0:	4b40      	ldr	r3, [pc, #256]	; (80025d4 <main+0x410>)
 80024d2:	2202      	movs	r2, #2
 80024d4:	701a      	strb	r2, [r3, #0]

	  }

	  if( ( ( (!jobTime.u32) && (killRace) ) ) || (stop) ) {
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <main+0x41c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <main+0x328>
 80024de:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <main+0x40c>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d106      	bne.n	80024fa <main+0x336>
 80024ec:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <main+0x40c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01e      	beq.n	8002538 <main+0x374>
		  stop=0;
 80024fa:	4a35      	ldr	r2, [pc, #212]	; (80025d0 <main+0x40c>)
 80024fc:	7813      	ldrb	r3, [r2, #0]
 80024fe:	f36f 03c3 	bfc	r3, #3, #1
 8002502:	7013      	strb	r3, [r2, #0]
		  race=0;
 8002504:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <main+0x40c>)
 8002506:	7813      	ldrb	r3, [r2, #0]
 8002508:	f36f 0300 	bfc	r3, #0, #1
 800250c:	7013      	strb	r3, [r2, #0]
		  killRace=0;
 800250e:	4a30      	ldr	r2, [pc, #192]	; (80025d0 <main+0x40c>)
 8002510:	7813      	ldrb	r3, [r2, #0]
 8002512:	f36f 1386 	bfc	r3, #6, #1
 8002516:	7013      	strb	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8002518:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <main+0x420>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2200      	movs	r2, #0
 800251e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8002520:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <main+0x420>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002528:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <main+0x420>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2200      	movs	r2, #0
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8002530:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <main+0x420>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2200      	movs	r2, #0
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
	  }


	  if(indexR_PC_RX!=indexW_PC_RX)
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <main+0x424>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <main+0x428>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <main+0x388>
		  DecodeQT();
 8002548:	f7ff fade 	bl	8001b08 <DecodeQT>


	  if(indexR_TxESP!=indexW_TxESP)
 800254c:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <main+0x42c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <main+0x430>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	429a      	cmp	r2, r3
 800255a:	d002      	beq.n	8002562 <main+0x39e>
		  uartTX(UART_ESP);
 800255c:	2001      	movs	r0, #1
 800255e:	f7ff f8ad 	bl	80016bc <uartTX>


	  if(indexR_Debug!=indexW_Debug)
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <main+0x434>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	4b24      	ldr	r3, [pc, #144]	; (80025fc <main+0x438>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	429a      	cmp	r2, r3
 8002570:	d002      	beq.n	8002578 <main+0x3b4>
		  uartTX(UART_PC);
 8002572:	2002      	movs	r0, #2
 8002574:	f7ff f8a2 	bl	80016bc <uartTX>



	  if(indexR_RxESP!=indexW_RxESP)
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <main+0x43c>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b21      	ldr	r3, [pc, #132]	; (8002604 <main+0x440>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <main+0x3c8>
		  DecodeAnsESP();
 8002588:	f7fe f854 	bl	8000634 <DecodeAnsESP>


	  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)==GPIO_PIN_RESET)&&(!timeOut)){
 800258c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002590:	481d      	ldr	r0, [pc, #116]	; (8002608 <main+0x444>)
 8002592:	f002 fa55 	bl	8004a40 <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	f47f ae8c 	bne.w	80022b6 <main+0xf2>
 800259e:	4b1b      	ldr	r3, [pc, #108]	; (800260c <main+0x448>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f47f ae87 	bne.w	80022b6 <main+0xf2>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);//ESP8266 Pin Enable
 80025a8:	2201      	movs	r2, #1
 80025aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ae:	4816      	ldr	r0, [pc, #88]	; (8002608 <main+0x444>)
 80025b0:	f002 fa5e 	bl	8004a70 <HAL_GPIO_WritePin>
		  timeOut=30;
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <main+0x448>)
 80025b6:	221e      	movs	r2, #30
 80025b8:	701a      	strb	r2, [r3, #0]
		  AT=1;
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <main+0x44c>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
		  duty=0;
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <main+0x450>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
	  if(ON100MS){
 80025c6:	e676      	b.n	80022b6 <main+0xf2>
 80025c8:	2000084f 	.word	0x2000084f
 80025cc:	20000878 	.word	0x20000878
 80025d0:	2000089c 	.word	0x2000089c
 80025d4:	20000850 	.word	0x20000850
 80025d8:	2000086c 	.word	0x2000086c
 80025dc:	20000870 	.word	0x20000870
 80025e0:	20000874 	.word	0x20000874
 80025e4:	20000128 	.word	0x20000128
 80025e8:	20000846 	.word	0x20000846
 80025ec:	20000847 	.word	0x20000847
 80025f0:	20000840 	.word	0x20000840
 80025f4:	20000841 	.word	0x20000841
 80025f8:	20000844 	.word	0x20000844
 80025fc:	20000845 	.word	0x20000845
 8002600:	20000842 	.word	0x20000842
 8002604:	20000843 	.word	0x20000843
 8002608:	40020400 	.word	0x40020400
 800260c:	2000084b 	.word	0x2000084b
 8002610:	20000848 	.word	0x20000848
 8002614:	20000851 	.word	0x20000851

08002618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b094      	sub	sp, #80	; 0x50
 800261c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800261e:	f107 0320 	add.w	r3, r7, #32
 8002622:	2230      	movs	r2, #48	; 0x30
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f006 fdaa 	bl	8009180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <SystemClock_Config+0xd0>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	4a28      	ldr	r2, [pc, #160]	; (80026e8 <SystemClock_Config+0xd0>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264a:	6413      	str	r3, [r2, #64]	; 0x40
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <SystemClock_Config+0xd0>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002658:	2300      	movs	r3, #0
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <SystemClock_Config+0xd4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002664:	4a21      	ldr	r2, [pc, #132]	; (80026ec <SystemClock_Config+0xd4>)
 8002666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <SystemClock_Config+0xd4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002678:	2302      	movs	r3, #2
 800267a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800267c:	2301      	movs	r3, #1
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002680:	2310      	movs	r3, #16
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002684:	2302      	movs	r3, #2
 8002686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002688:	2300      	movs	r3, #0
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800268c:	2310      	movs	r3, #16
 800268e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002690:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002696:	2304      	movs	r3, #4
 8002698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800269a:	2307      	movs	r3, #7
 800269c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800269e:	f107 0320 	add.w	r3, r7, #32
 80026a2:	4618      	mov	r0, r3
 80026a4:	f004 f838 	bl	8006718 <HAL_RCC_OscConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80026ae:	f000 fac7 	bl	8002c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b2:	230f      	movs	r3, #15
 80026b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026b6:	2302      	movs	r3, #2
 80026b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	2102      	movs	r1, #2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 fa9a 	bl	8006c08 <HAL_RCC_ClockConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80026da:	f000 fab1 	bl	8002c40 <Error_Handler>
  }
}
 80026de:	bf00      	nop
 80026e0:	3750      	adds	r7, #80	; 0x50
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40007000 	.word	0x40007000

080026f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026f6:	463b      	mov	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002702:	4b52      	ldr	r3, [pc, #328]	; (800284c <MX_ADC1_Init+0x15c>)
 8002704:	4a52      	ldr	r2, [pc, #328]	; (8002850 <MX_ADC1_Init+0x160>)
 8002706:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <MX_ADC1_Init+0x15c>)
 800270a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800270e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002710:	4b4e      	ldr	r3, [pc, #312]	; (800284c <MX_ADC1_Init+0x15c>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002716:	4b4d      	ldr	r3, [pc, #308]	; (800284c <MX_ADC1_Init+0x15c>)
 8002718:	2201      	movs	r2, #1
 800271a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800271c:	4b4b      	ldr	r3, [pc, #300]	; (800284c <MX_ADC1_Init+0x15c>)
 800271e:	2200      	movs	r2, #0
 8002720:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <MX_ADC1_Init+0x15c>)
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800272a:	4b48      	ldr	r3, [pc, #288]	; (800284c <MX_ADC1_Init+0x15c>)
 800272c:	2200      	movs	r2, #0
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <MX_ADC1_Init+0x15c>)
 8002732:	4a48      	ldr	r2, [pc, #288]	; (8002854 <MX_ADC1_Init+0x164>)
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002736:	4b45      	ldr	r3, [pc, #276]	; (800284c <MX_ADC1_Init+0x15c>)
 8002738:	2200      	movs	r2, #0
 800273a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800273c:	4b43      	ldr	r3, [pc, #268]	; (800284c <MX_ADC1_Init+0x15c>)
 800273e:	2208      	movs	r2, #8
 8002740:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002742:	4b42      	ldr	r3, [pc, #264]	; (800284c <MX_ADC1_Init+0x15c>)
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800274a:	4b40      	ldr	r3, [pc, #256]	; (800284c <MX_ADC1_Init+0x15c>)
 800274c:	2200      	movs	r2, #0
 800274e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002750:	483e      	ldr	r0, [pc, #248]	; (800284c <MX_ADC1_Init+0x15c>)
 8002752:	f000 fdc3 	bl	80032dc <HAL_ADC_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800275c:	f000 fa70 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002760:	2300      	movs	r3, #0
 8002762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002764:	2301      	movs	r3, #1
 8002766:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002768:	2301      	movs	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800276c:	463b      	mov	r3, r7
 800276e:	4619      	mov	r1, r3
 8002770:	4836      	ldr	r0, [pc, #216]	; (800284c <MX_ADC1_Init+0x15c>)
 8002772:	f001 f815 	bl	80037a0 <HAL_ADC_ConfigChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800277c:	f000 fa60 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002780:	2301      	movs	r3, #1
 8002782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002784:	2302      	movs	r3, #2
 8002786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002788:	463b      	mov	r3, r7
 800278a:	4619      	mov	r1, r3
 800278c:	482f      	ldr	r0, [pc, #188]	; (800284c <MX_ADC1_Init+0x15c>)
 800278e:	f001 f807 	bl	80037a0 <HAL_ADC_ConfigChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002798:	f000 fa52 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800279c:	2304      	movs	r3, #4
 800279e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80027a0:	2303      	movs	r3, #3
 80027a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	4619      	mov	r1, r3
 80027a8:	4828      	ldr	r0, [pc, #160]	; (800284c <MX_ADC1_Init+0x15c>)
 80027aa:	f000 fff9 	bl	80037a0 <HAL_ADC_ConfigChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80027b4:	f000 fa44 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80027b8:	2308      	movs	r3, #8
 80027ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80027bc:	2304      	movs	r3, #4
 80027be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c0:	463b      	mov	r3, r7
 80027c2:	4619      	mov	r1, r3
 80027c4:	4821      	ldr	r0, [pc, #132]	; (800284c <MX_ADC1_Init+0x15c>)
 80027c6:	f000 ffeb 	bl	80037a0 <HAL_ADC_ConfigChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80027d0:	f000 fa36 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80027d4:	230b      	movs	r3, #11
 80027d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80027d8:	2305      	movs	r3, #5
 80027da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027dc:	463b      	mov	r3, r7
 80027de:	4619      	mov	r1, r3
 80027e0:	481a      	ldr	r0, [pc, #104]	; (800284c <MX_ADC1_Init+0x15c>)
 80027e2:	f000 ffdd 	bl	80037a0 <HAL_ADC_ConfigChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80027ec:	f000 fa28 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80027f0:	230a      	movs	r3, #10
 80027f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80027f4:	2306      	movs	r3, #6
 80027f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027f8:	463b      	mov	r3, r7
 80027fa:	4619      	mov	r1, r3
 80027fc:	4813      	ldr	r0, [pc, #76]	; (800284c <MX_ADC1_Init+0x15c>)
 80027fe:	f000 ffcf 	bl	80037a0 <HAL_ADC_ConfigChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002808:	f000 fa1a 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800280c:	230c      	movs	r3, #12
 800280e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002810:	2307      	movs	r3, #7
 8002812:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002814:	463b      	mov	r3, r7
 8002816:	4619      	mov	r1, r3
 8002818:	480c      	ldr	r0, [pc, #48]	; (800284c <MX_ADC1_Init+0x15c>)
 800281a:	f000 ffc1 	bl	80037a0 <HAL_ADC_ConfigChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002824:	f000 fa0c 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002828:	230d      	movs	r3, #13
 800282a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800282c:	2308      	movs	r3, #8
 800282e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002830:	463b      	mov	r3, r7
 8002832:	4619      	mov	r1, r3
 8002834:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_ADC1_Init+0x15c>)
 8002836:	f000 ffb3 	bl	80037a0 <HAL_ADC_ConfigChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002840:	f000 f9fe 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000002c 	.word	0x2000002c
 8002850:	40012000 	.word	0x40012000
 8002854:	0f000001 	.word	0x0f000001

08002858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <MX_I2C1_Init+0x50>)
 800285e:	4a13      	ldr	r2, [pc, #76]	; (80028ac <MX_I2C1_Init+0x54>)
 8002860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <MX_I2C1_Init+0x50>)
 8002864:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <MX_I2C1_Init+0x58>)
 8002866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <MX_I2C1_Init+0x50>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_I2C1_Init+0x50>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_I2C1_Init+0x50>)
 8002876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800287a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <MX_I2C1_Init+0x50>)
 800287e:	2200      	movs	r2, #0
 8002880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MX_I2C1_Init+0x50>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <MX_I2C1_Init+0x50>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <MX_I2C1_Init+0x50>)
 8002890:	2200      	movs	r2, #0
 8002892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002894:	4804      	ldr	r0, [pc, #16]	; (80028a8 <MX_I2C1_Init+0x50>)
 8002896:	f002 f91f 	bl	8004ad8 <HAL_I2C_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028a0:	f000 f9ce 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200000d4 	.word	0x200000d4
 80028ac:	40005400 	.word	0x40005400
 80028b0:	000186a0 	.word	0x000186a0

080028b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08e      	sub	sp, #56	; 0x38
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c8:	f107 0320 	add.w	r3, r7, #32
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
 80028e0:	615a      	str	r2, [r3, #20]
 80028e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028e4:	4b3c      	ldr	r3, [pc, #240]	; (80029d8 <MX_TIM3_Init+0x124>)
 80028e6:	4a3d      	ldr	r2, [pc, #244]	; (80029dc <MX_TIM3_Init+0x128>)
 80028e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <MX_TIM3_Init+0x124>)
 80028ec:	2263      	movs	r2, #99	; 0x63
 80028ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <MX_TIM3_Init+0x124>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 210;
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <MX_TIM3_Init+0x124>)
 80028f8:	22d2      	movs	r2, #210	; 0xd2
 80028fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <MX_TIM3_Init+0x124>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002902:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <MX_TIM3_Init+0x124>)
 8002904:	2280      	movs	r2, #128	; 0x80
 8002906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002908:	4833      	ldr	r0, [pc, #204]	; (80029d8 <MX_TIM3_Init+0x124>)
 800290a:	f004 fb9d 	bl	8007048 <HAL_TIM_Base_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002914:	f000 f994 	bl	8002c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800291e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002922:	4619      	mov	r1, r3
 8002924:	482c      	ldr	r0, [pc, #176]	; (80029d8 <MX_TIM3_Init+0x124>)
 8002926:	f004 ff6f 	bl	8007808 <HAL_TIM_ConfigClockSource>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002930:	f000 f986 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002934:	4828      	ldr	r0, [pc, #160]	; (80029d8 <MX_TIM3_Init+0x124>)
 8002936:	f004 fc93 	bl	8007260 <HAL_TIM_PWM_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002940:	f000 f97e 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800294c:	f107 0320 	add.w	r3, r7, #32
 8002950:	4619      	mov	r1, r3
 8002952:	4821      	ldr	r0, [pc, #132]	; (80029d8 <MX_TIM3_Init+0x124>)
 8002954:	f005 fb14 	bl	8007f80 <HAL_TIMEx_MasterConfigSynchronization>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800295e:	f000 f96f 	bl	8002c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002962:	2360      	movs	r3, #96	; 0x60
 8002964:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2200      	movs	r2, #0
 8002976:	4619      	mov	r1, r3
 8002978:	4817      	ldr	r0, [pc, #92]	; (80029d8 <MX_TIM3_Init+0x124>)
 800297a:	f004 fe83 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002984:	f000 f95c 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2204      	movs	r2, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4812      	ldr	r0, [pc, #72]	; (80029d8 <MX_TIM3_Init+0x124>)
 8002990:	f004 fe78 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800299a:	f000 f951 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	2208      	movs	r2, #8
 80029a2:	4619      	mov	r1, r3
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <MX_TIM3_Init+0x124>)
 80029a6:	f004 fe6d 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 80029b0:	f000 f946 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	220c      	movs	r2, #12
 80029b8:	4619      	mov	r1, r3
 80029ba:	4807      	ldr	r0, [pc, #28]	; (80029d8 <MX_TIM3_Init+0x124>)
 80029bc:	f004 fe62 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80029c6:	f000 f93b 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029ca:	4803      	ldr	r0, [pc, #12]	; (80029d8 <MX_TIM3_Init+0x124>)
 80029cc:	f000 fab4 	bl	8002f38 <HAL_TIM_MspPostInit>

}
 80029d0:	bf00      	nop
 80029d2:	3738      	adds	r7, #56	; 0x38
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000128 	.word	0x20000128
 80029dc:	40000400 	.word	0x40000400

080029e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029e6:	f107 0308 	add.w	r3, r7, #8
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f4:	463b      	mov	r3, r7
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <MX_TIM4_Init+0x94>)
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <MX_TIM4_Init+0x98>)
 8002a00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <MX_TIM4_Init+0x94>)
 8002a04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <MX_TIM4_Init+0x94>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42;
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <MX_TIM4_Init+0x94>)
 8002a12:	222a      	movs	r2, #42	; 0x2a
 8002a14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <MX_TIM4_Init+0x94>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a1c:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MX_TIM4_Init+0x94>)
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a22:	4814      	ldr	r0, [pc, #80]	; (8002a74 <MX_TIM4_Init+0x94>)
 8002a24:	f004 fb10 	bl	8007048 <HAL_TIM_Base_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002a2e:	f000 f907 	bl	8002c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a38:	f107 0308 	add.w	r3, r7, #8
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480d      	ldr	r0, [pc, #52]	; (8002a74 <MX_TIM4_Init+0x94>)
 8002a40:	f004 fee2 	bl	8007808 <HAL_TIM_ConfigClockSource>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002a4a:	f000 f8f9 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a56:	463b      	mov	r3, r7
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4806      	ldr	r0, [pc, #24]	; (8002a74 <MX_TIM4_Init+0x94>)
 8002a5c:	f005 fa90 	bl	8007f80 <HAL_TIMEx_MasterConfigSynchronization>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002a66:	f000 f8eb 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000170 	.word	0x20000170
 8002a78:	40000800 	.word	0x40000800

08002a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <MX_USART1_UART_Init+0x4c>)
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <MX_USART1_UART_Init+0x50>)
 8002a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <MX_USART1_UART_Init+0x4c>)
 8002a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <MX_USART1_UART_Init+0x4c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <MX_USART1_UART_Init+0x4c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <MX_USART1_UART_Init+0x4c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <MX_USART1_UART_Init+0x4c>)
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <MX_USART1_UART_Init+0x4c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <MX_USART1_UART_Init+0x4c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ab2:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <MX_USART1_UART_Init+0x4c>)
 8002ab4:	f005 fae6 	bl	8008084 <HAL_UART_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002abe:	f000 f8bf 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200001b8 	.word	0x200001b8
 8002acc:	40011000 	.word	0x40011000

08002ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <MX_USART2_UART_Init+0x4c>)
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <MX_USART2_UART_Init+0x50>)
 8002ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <MX_USART2_UART_Init+0x4c>)
 8002adc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <MX_USART2_UART_Init+0x4c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <MX_USART2_UART_Init+0x4c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <MX_USART2_UART_Init+0x4c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <MX_USART2_UART_Init+0x4c>)
 8002af6:	220c      	movs	r2, #12
 8002af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <MX_USART2_UART_Init+0x4c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <MX_USART2_UART_Init+0x4c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b06:	4805      	ldr	r0, [pc, #20]	; (8002b1c <MX_USART2_UART_Init+0x4c>)
 8002b08:	f005 fabc 	bl	8008084 <HAL_UART_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b12:	f000 f895 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200001fc 	.word	0x200001fc
 8002b20:	40004400 	.word	0x40004400

08002b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <MX_DMA_Init+0x3c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a0b      	ldr	r2, [pc, #44]	; (8002b60 <MX_DMA_Init+0x3c>)
 8002b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <MX_DMA_Init+0x3c>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2038      	movs	r0, #56	; 0x38
 8002b4c:	f001 f9ad 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b50:	2038      	movs	r0, #56	; 0x38
 8002b52:	f001 f9c6 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800

08002b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
 8002b78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a2c      	ldr	r2, [pc, #176]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a25      	ldr	r2, [pc, #148]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <MX_GPIO_Init+0xd0>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2120      	movs	r1, #32
 8002bee:	4812      	ldr	r0, [pc, #72]	; (8002c38 <MX_GPIO_Init+0xd4>)
 8002bf0:	f001 ff3e 	bl	8004a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	4619      	mov	r1, r3
 8002c0a:	480c      	ldr	r0, [pc, #48]	; (8002c3c <MX_GPIO_Init+0xd8>)
 8002c0c:	f001 fd94 	bl	8004738 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c10:	2320      	movs	r3, #32
 8002c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c14:	2301      	movs	r3, #1
 8002c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	4619      	mov	r1, r3
 8002c26:	4804      	ldr	r0, [pc, #16]	; (8002c38 <MX_GPIO_Init+0xd4>)
 8002c28:	f001 fd86 	bl	8004738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c2c:	bf00      	nop
 8002c2e:	3728      	adds	r7, #40	; 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020000 	.word	0x40020000
 8002c3c:	40020800 	.word	0x40020800

08002c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c44:	b672      	cpsid	i
}
 8002c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <Error_Handler+0x8>
	...

08002c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	f001 f902 	bl	8003e94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800

08002c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	; 0x30
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 031c 	add.w	r3, r7, #28
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a4d      	ldr	r2, [pc, #308]	; (8002df0 <HAL_ADC_MspInit+0x154>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	f040 8093 	bne.w	8002de6 <HAL_ADC_MspInit+0x14a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	4b4b      	ldr	r3, [pc, #300]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	4a4a      	ldr	r2, [pc, #296]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cce:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd0:	4b48      	ldr	r3, [pc, #288]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	4b44      	ldr	r3, [pc, #272]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	4a43      	ldr	r2, [pc, #268]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	6313      	str	r3, [r2, #48]	; 0x30
 8002cec:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4a3c      	ldr	r2, [pc, #240]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
 8002d08:	4b3a      	ldr	r3, [pc, #232]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	4a35      	ldr	r2, [pc, #212]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	6313      	str	r3, [r2, #48]	; 0x30
 8002d24:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <HAL_ADC_MspInit+0x158>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002d30:	230f      	movs	r3, #15
 8002d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d34:	2303      	movs	r3, #3
 8002d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	4619      	mov	r1, r3
 8002d42:	482d      	ldr	r0, [pc, #180]	; (8002df8 <HAL_ADC_MspInit+0x15c>)
 8002d44:	f001 fcf8 	bl	8004738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002d48:	2313      	movs	r3, #19
 8002d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4828      	ldr	r0, [pc, #160]	; (8002dfc <HAL_ADC_MspInit+0x160>)
 8002d5c:	f001 fcec 	bl	8004738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d60:	2301      	movs	r3, #1
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d64:	2303      	movs	r3, #3
 8002d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	f107 031c 	add.w	r3, r7, #28
 8002d70:	4619      	mov	r1, r3
 8002d72:	4823      	ldr	r0, [pc, #140]	; (8002e00 <HAL_ADC_MspInit+0x164>)
 8002d74:	f001 fce0 	bl	8004738 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002d78:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002d7a:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <HAL_ADC_MspInit+0x16c>)
 8002d7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d84:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002da2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002da6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002da8:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dba:	4812      	ldr	r0, [pc, #72]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002dbc:	f001 f8ac 	bl	8003f18 <HAL_DMA_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8002dc6:	f7ff ff3b 	bl	8002c40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <HAL_ADC_MspInit+0x168>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2012      	movs	r0, #18
 8002ddc:	f001 f865 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002de0:	2012      	movs	r0, #18
 8002de2:	f001 f87e 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002de6:	bf00      	nop
 8002de8:	3730      	adds	r7, #48	; 0x30
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40012000 	.word	0x40012000
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020400 	.word	0x40020400
 8002e04:	20000074 	.word	0x20000074
 8002e08:	40026410 	.word	0x40026410

08002e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <HAL_I2C_MspInit+0xa4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d13c      	bne.n	8002ea8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_I2C_MspInit+0xa8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_I2C_MspInit+0xa8>)
 8002e38:	f043 0302 	orr.w	r3, r3, #2
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_I2C_MspInit+0xa8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e50:	2312      	movs	r3, #18
 8002e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4619      	mov	r1, r3
 8002e66:	4814      	ldr	r0, [pc, #80]	; (8002eb8 <HAL_I2C_MspInit+0xac>)
 8002e68:	f001 fc66 	bl	8004738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_I2C_MspInit+0xa8>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HAL_I2C_MspInit+0xa8>)
 8002e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_I2C_MspInit+0xa8>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	201f      	movs	r0, #31
 8002e8e:	f001 f80c 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002e92:	201f      	movs	r0, #31
 8002e94:	f001 f825 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2020      	movs	r0, #32
 8002e9e:	f001 f804 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002ea2:	2020      	movs	r0, #32
 8002ea4:	f001 f81d 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ea8:	bf00      	nop
 8002eaa:	3728      	adds	r7, #40	; 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40005400 	.word	0x40005400
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020400 	.word	0x40020400

08002ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <HAL_TIM_Base_MspInit+0x70>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d116      	bne.n	8002efc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_TIM_Base_MspInit+0x74>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_TIM_Base_MspInit+0x74>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_TIM_Base_MspInit+0x74>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	201d      	movs	r0, #29
 8002ef0:	f000 ffdb 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ef4:	201d      	movs	r0, #29
 8002ef6:	f000 fff4 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002efa:	e012      	b.n	8002f22 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <HAL_TIM_Base_MspInit+0x78>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10d      	bne.n	8002f22 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_TIM_Base_MspInit+0x74>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <HAL_TIM_Base_MspInit+0x74>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_TIM_Base_MspInit+0x74>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40000800 	.word	0x40000800

08002f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 030c 	add.w	r3, r7, #12
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <HAL_TIM_MspPostInit+0x68>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d11e      	bne.n	8002f98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_TIM_MspPostInit+0x6c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <HAL_TIM_MspPostInit+0x6c>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_TIM_MspPostInit+0x6c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002f76:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002f7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	4619      	mov	r1, r3
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <HAL_TIM_MspPostInit+0x70>)
 8002f94:	f001 fbd0 	bl	8004738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f98:	bf00      	nop
 8002f9a:	3720      	adds	r7, #32
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020800 	.word	0x40020800

08002fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08c      	sub	sp, #48	; 0x30
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a36      	ldr	r2, [pc, #216]	; (80030a4 <HAL_UART_MspInit+0xf8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d135      	bne.n	800303a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	4b35      	ldr	r3, [pc, #212]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4a34      	ldr	r2, [pc, #208]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 8002fd8:	f043 0310 	orr.w	r3, r3, #16
 8002fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fde:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a2d      	ldr	r2, [pc, #180]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003006:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800300a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300c:	2302      	movs	r3, #2
 800300e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003014:	2303      	movs	r3, #3
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003018:	2307      	movs	r3, #7
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	f107 031c 	add.w	r3, r7, #28
 8003020:	4619      	mov	r1, r3
 8003022:	4822      	ldr	r0, [pc, #136]	; (80030ac <HAL_UART_MspInit+0x100>)
 8003024:	f001 fb88 	bl	8004738 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	2100      	movs	r1, #0
 800302c:	2025      	movs	r0, #37	; 0x25
 800302e:	f000 ff3c 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003032:	2025      	movs	r0, #37	; 0x25
 8003034:	f000 ff55 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003038:	e030      	b.n	800309c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_UART_MspInit+0x104>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d12b      	bne.n	800309c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 800304e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003052:	6413      	str	r3, [r2, #64]	; 0x40
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	4a0f      	ldr	r2, [pc, #60]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6313      	str	r3, [r2, #48]	; 0x30
 8003070:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_UART_MspInit+0xfc>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800307c:	230c      	movs	r3, #12
 800307e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800308c:	2307      	movs	r3, #7
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003090:	f107 031c 	add.w	r3, r7, #28
 8003094:	4619      	mov	r1, r3
 8003096:	4805      	ldr	r0, [pc, #20]	; (80030ac <HAL_UART_MspInit+0x100>)
 8003098:	f001 fb4e 	bl	8004738 <HAL_GPIO_Init>
}
 800309c:	bf00      	nop
 800309e:	3730      	adds	r7, #48	; 0x30
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40011000 	.word	0x40011000
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40020000 	.word	0x40020000
 80030b0:	40004400 	.word	0x40004400

080030b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <NMI_Handler+0x4>

080030ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030be:	e7fe      	b.n	80030be <HardFault_Handler+0x4>

080030c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <MemManage_Handler+0x4>

080030c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ca:	e7fe      	b.n	80030ca <BusFault_Handler+0x4>

080030cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <UsageFault_Handler+0x4>

080030d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003100:	f000 f8cc 	bl	800329c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003104:	bf00      	nop
 8003106:	bd80      	pop	{r7, pc}

08003108 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <ADC_IRQHandler+0x10>)
 800310e:	f000 f928 	bl	8003362 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	2000002c 	.word	0x2000002c

0800311c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <TIM3_IRQHandler+0x10>)
 8003122:	f004 f9a7 	bl	8007474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000128 	.word	0x20000128

08003130 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <I2C1_EV_IRQHandler+0x10>)
 8003136:	f001 fe13 	bl	8004d60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200000d4 	.word	0x200000d4

08003144 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <I2C1_ER_IRQHandler+0x10>)
 800314a:	f001 ff7a 	bl	8005042 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200000d4 	.word	0x200000d4

08003158 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <USART1_IRQHandler+0x10>)
 800315e:	f005 f8c1 	bl	80082e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	200001b8 	.word	0x200001b8

0800316c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <DMA2_Stream0_IRQHandler+0x10>)
 8003172:	f001 f869 	bl	8004248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000074 	.word	0x20000074

08003180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <SystemInit+0x20>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <SystemInit+0x20>)
 800318c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031a8:	480d      	ldr	r0, [pc, #52]	; (80031e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031aa:	490e      	ldr	r1, [pc, #56]	; (80031e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031ac:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b0:	e002      	b.n	80031b8 <LoopCopyDataInit>

080031b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b6:	3304      	adds	r3, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031bc:	d3f9      	bcc.n	80031b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c0:	4c0b      	ldr	r4, [pc, #44]	; (80031f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c4:	e001      	b.n	80031ca <LoopFillZerobss>

080031c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c8:	3204      	adds	r2, #4

080031ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031cc:	d3fb      	bcc.n	80031c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ce:	f7ff ffd7 	bl	8003180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d2:	f005 ffa3 	bl	800911c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d6:	f7fe fff5 	bl	80021c4 <main>
  bx  lr    
 80031da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80031e8:	080093ec 	.word	0x080093ec
  ldr r2, =_sbss
 80031ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80031f0:	200008f4 	.word	0x200008f4

080031f4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <DMA1_Stream0_IRQHandler>
	...

080031f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_Init+0x40>)
 8003202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_Init+0x40>)
 800320e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_Init+0x40>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_Init+0x40>)
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003220:	2003      	movs	r0, #3
 8003222:	f000 fe37 	bl	8003e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003226:	2000      	movs	r0, #0
 8003228:	f000 f808 	bl	800323c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800322c:	f7ff fd0e 	bl	8002c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023c00 	.word	0x40023c00

0800323c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_InitTick+0x54>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_InitTick+0x58>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003252:	fbb3 f3f1 	udiv	r3, r3, r1
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fe4f 	bl	8003efe <HAL_SYSTICK_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00e      	b.n	8003288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d80a      	bhi.n	8003286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003270:	2200      	movs	r2, #0
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f000 fe17 	bl	8003eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800327c:	4a06      	ldr	r2, [pc, #24]	; (8003298 <HAL_InitTick+0x5c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000004 	.word	0x20000004
 8003294:	2000000c 	.word	0x2000000c
 8003298:	20000008 	.word	0x20000008

0800329c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_IncTick+0x20>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_IncTick+0x24>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_IncTick+0x24>)
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	2000000c 	.word	0x2000000c
 80032c0:	200008f0 	.word	0x200008f0

080032c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return uwTick;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_GetTick+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	200008f0 	.word	0x200008f0

080032dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e033      	b.n	800335a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff fcce 	bl	8002c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	d118      	bne.n	800334c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003322:	f023 0302 	bic.w	r3, r3, #2
 8003326:	f043 0202 	orr.w	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fb58 	bl	80039e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
 800334a:	e001      	b.n	8003350 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d049      	beq.n	800342c <HAL_ADC_IRQHandler+0xca>
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d046      	beq.n	800342c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d105      	bne.n	80033b6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d12b      	bne.n	800341c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d127      	bne.n	800341c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d006      	beq.n	80033e8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d119      	bne.n	800341c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0220 	bic.w	r2, r2, #32
 80033f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fd f89f 	bl	8000560 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f06f 0212 	mvn.w	r2, #18
 800342a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d057      	beq.n	80034f2 <HAL_ADC_IRQHandler+0x190>
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d054      	beq.n	80034f2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d139      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003486:	2b00      	cmp	r3, #0
 8003488:	d12b      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003494:	2b00      	cmp	r3, #0
 8003496:	d124      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11d      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d119      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034bc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fbfc 	bl	8003ce0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 020c 	mvn.w	r2, #12
 80034f0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d017      	beq.n	8003538 <HAL_ADC_IRQHandler+0x1d6>
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d014      	beq.n	8003538 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d10d      	bne.n	8003538 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f925 	bl	8003778 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0201 	mvn.w	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003546:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d015      	beq.n	800357a <HAL_ADC_IRQHandler+0x218>
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d012      	beq.n	800357a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	f043 0202 	orr.w	r2, r3, #2
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0220 	mvn.w	r2, #32
 8003568:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f90e 	bl	800378c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0220 	mvn.w	r2, #32
 8003578:	601a      	str	r2, [r3, #0]
  }
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_ADC_Start_DMA+0x1e>
 800359e:	2302      	movs	r3, #2
 80035a0:	e0ce      	b.n	8003740 <HAL_ADC_Start_DMA+0x1bc>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d018      	beq.n	80035ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035c8:	4b5f      	ldr	r3, [pc, #380]	; (8003748 <HAL_ADC_Start_DMA+0x1c4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a5f      	ldr	r2, [pc, #380]	; (800374c <HAL_ADC_Start_DMA+0x1c8>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	0c9a      	lsrs	r2, r3, #18
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035dc:	e002      	b.n	80035e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f9      	bne.n	80035de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f8:	d107      	bne.n	800360a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003608:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 8086 	bne.w	8003726 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003644:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003658:	d106      	bne.n	8003668 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f023 0206 	bic.w	r2, r3, #6
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
 8003666:	e002      	b.n	800366e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_ADC_Start_DMA+0x1cc>)
 8003678:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	4a35      	ldr	r2, [pc, #212]	; (8003754 <HAL_ADC_Start_DMA+0x1d0>)
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	4a34      	ldr	r2, [pc, #208]	; (8003758 <HAL_ADC_Start_DMA+0x1d4>)
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	4a33      	ldr	r2, [pc, #204]	; (800375c <HAL_ADC_Start_DMA+0x1d8>)
 8003690:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800369a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	334c      	adds	r3, #76	; 0x4c
 80036c6:	4619      	mov	r1, r3
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f000 fcd2 	bl	8004074 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10f      	bne.n	80036fc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d129      	bne.n	800373e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	e020      	b.n	800373e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a17      	ldr	r2, [pc, #92]	; (8003760 <HAL_ADC_Start_DMA+0x1dc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d11b      	bne.n	800373e <HAL_ADC_Start_DMA+0x1ba>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d114      	bne.n	800373e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e00b      	b.n	800373e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f043 0210 	orr.w	r2, r3, #16
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000004 	.word	0x20000004
 800374c:	431bde83 	.word	0x431bde83
 8003750:	40012300 	.word	0x40012300
 8003754:	08003bdd 	.word	0x08003bdd
 8003758:	08003c97 	.word	0x08003c97
 800375c:	08003cb3 	.word	0x08003cb3
 8003760:	40012000 	.word	0x40012000

08003764 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x1c>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e105      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x228>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	d925      	bls.n	8003818 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68d9      	ldr	r1, [r3, #12]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	3b1e      	subs	r3, #30
 80037e2:	2207      	movs	r2, #7
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43da      	mvns	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	400a      	ands	r2, r1
 80037f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68d9      	ldr	r1, [r3, #12]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	4618      	mov	r0, r3
 8003804:	4603      	mov	r3, r0
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4403      	add	r3, r0
 800380a:	3b1e      	subs	r3, #30
 800380c:	409a      	lsls	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	e022      	b.n	800385e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6919      	ldr	r1, [r3, #16]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	2207      	movs	r2, #7
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43da      	mvns	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	400a      	ands	r2, r1
 800383a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6919      	ldr	r1, [r3, #16]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	4618      	mov	r0, r3
 800384e:	4603      	mov	r3, r0
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4403      	add	r3, r0
 8003854:	409a      	lsls	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b06      	cmp	r3, #6
 8003864:	d824      	bhi.n	80038b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	3b05      	subs	r3, #5
 8003878:	221f      	movs	r2, #31
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43da      	mvns	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	400a      	ands	r2, r1
 8003886:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	b29b      	uxth	r3, r3
 8003894:	4618      	mov	r0, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	3b05      	subs	r3, #5
 80038a2:	fa00 f203 	lsl.w	r2, r0, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	635a      	str	r2, [r3, #52]	; 0x34
 80038ae:	e04c      	b.n	800394a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d824      	bhi.n	8003902 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	3b23      	subs	r3, #35	; 0x23
 80038ca:	221f      	movs	r2, #31
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43da      	mvns	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	400a      	ands	r2, r1
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	3b23      	subs	r3, #35	; 0x23
 80038f4:	fa00 f203 	lsl.w	r2, r0, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003900:	e023      	b.n	800394a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	3b41      	subs	r3, #65	; 0x41
 8003914:	221f      	movs	r2, #31
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43da      	mvns	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	400a      	ands	r2, r1
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4618      	mov	r0, r3
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	3b41      	subs	r3, #65	; 0x41
 800393e:	fa00 f203 	lsl.w	r2, r0, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_ADC_ConfigChannel+0x234>)
 800394c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <HAL_ADC_ConfigChannel+0x238>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d109      	bne.n	800396c <HAL_ADC_ConfigChannel+0x1cc>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b12      	cmp	r3, #18
 800395e:	d105      	bne.n	800396c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_ADC_ConfigChannel+0x238>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d123      	bne.n	80039be <HAL_ADC_ConfigChannel+0x21e>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b10      	cmp	r3, #16
 800397c:	d003      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x1e6>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b11      	cmp	r3, #17
 8003984:	d11b      	bne.n	80039be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b10      	cmp	r3, #16
 8003998:	d111      	bne.n	80039be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <HAL_ADC_ConfigChannel+0x23c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a10      	ldr	r2, [pc, #64]	; (80039e0 <HAL_ADC_ConfigChannel+0x240>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	0c9a      	lsrs	r2, r3, #18
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039b0:	e002      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f9      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40012300 	.word	0x40012300
 80039d8:	40012000 	.word	0x40012000
 80039dc:	20000004 	.word	0x20000004
 80039e0:	431bde83 	.word	0x431bde83

080039e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039ec:	4b79      	ldr	r3, [pc, #484]	; (8003bd4 <ADC_Init+0x1f0>)
 80039ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	021a      	lsls	r2, r3, #8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	4a58      	ldr	r2, [pc, #352]	; (8003bd8 <ADC_Init+0x1f4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d022      	beq.n	8003ac2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6899      	ldr	r1, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	e00f      	b.n	8003ae2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ae0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0202 	bic.w	r2, r2, #2
 8003af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6899      	ldr	r1, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7e1b      	ldrb	r3, [r3, #24]
 8003afc:	005a      	lsls	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01b      	beq.n	8003b48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6859      	ldr	r1, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	035a      	lsls	r2, r3, #13
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	e007      	b.n	8003b58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	051a      	lsls	r2, r3, #20
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6899      	ldr	r1, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b9a:	025a      	lsls	r2, r3, #9
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6899      	ldr	r1, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	029a      	lsls	r2, r3, #10
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40012300 	.word	0x40012300
 8003bd8:	0f000001 	.word	0x0f000001

08003bdc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d13c      	bne.n	8003c70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d12b      	bne.n	8003c68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d127      	bne.n	8003c68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d119      	bne.n	8003c68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0220 	bic.w	r2, r2, #32
 8003c42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f043 0201 	orr.w	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7fc fc79 	bl	8000560 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c6e:	e00e      	b.n	8003c8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fd85 	bl	800378c <HAL_ADC_ErrorCallback>
}
 8003c82:	e004      	b.n	8003c8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4798      	blx	r3
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff fd5d 	bl	8003764 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2240      	movs	r2, #64	; 0x40
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f043 0204 	orr.w	r2, r3, #4
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f7ff fd5a 	bl	800378c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4907      	ldr	r1, [pc, #28]	; (8003d90 <__NVIC_EnableIRQ+0x38>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db0a      	blt.n	8003dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	490c      	ldr	r1, [pc, #48]	; (8003de0 <__NVIC_SetPriority+0x4c>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	440b      	add	r3, r1
 8003db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dbc:	e00a      	b.n	8003dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4908      	ldr	r1, [pc, #32]	; (8003de4 <__NVIC_SetPriority+0x50>)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	761a      	strb	r2, [r3, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f1c3 0307 	rsb	r3, r3, #7
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf28      	it	cs
 8003e06:	2304      	movcs	r3, #4
 8003e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <NVIC_EncodePriority+0x30>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3b03      	subs	r3, #3
 8003e16:	e000      	b.n	8003e1a <NVIC_EncodePriority+0x32>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e30:	f04f 31ff 	mov.w	r1, #4294967295
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	4313      	orrs	r3, r2
         );
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e60:	d301      	bcc.n	8003e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00f      	b.n	8003e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <SysTick_Config+0x40>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6e:	210f      	movs	r1, #15
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	f7ff ff8e 	bl	8003d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <SysTick_Config+0x40>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7e:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <SysTick_Config+0x40>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010

08003e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff29 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ebc:	f7ff ff3e 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7ff ff8e 	bl	8003de8 <NVIC_EncodePriority>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff5d 	bl	8003d94 <__NVIC_SetPriority>
}
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff31 	bl	8003d58 <__NVIC_EnableIRQ>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffa2 	bl	8003e50 <SysTick_Config>
 8003f0c:	4603      	mov	r3, r0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7ff f9ce 	bl	80032c4 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e099      	b.n	8004068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f54:	e00f      	b.n	8003f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f56:	f7ff f9b5 	bl	80032c4 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d908      	bls.n	8003f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e078      	b.n	8004068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e8      	bne.n	8003f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4b38      	ldr	r3, [pc, #224]	; (8004070 <HAL_DMA_Init+0x158>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0307 	bic.w	r3, r3, #7
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2b04      	cmp	r3, #4
 8004008:	d117      	bne.n	800403a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb0f 	bl	8004640 <DMA_CheckFifoParam>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2240      	movs	r2, #64	; 0x40
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004036:	2301      	movs	r3, #1
 8004038:	e016      	b.n	8004068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fac6 	bl	80045d4 <DMA_CalcBaseAndBitshift>
 8004048:	4603      	mov	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	223f      	movs	r2, #63	; 0x3f
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	f010803f 	.word	0xf010803f

08004074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_DMA_Start_IT+0x26>
 8004096:	2302      	movs	r3, #2
 8004098:	e040      	b.n	800411c <HAL_DMA_Start_IT+0xa8>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d12f      	bne.n	800410e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fa58 	bl	8004578 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040cc:	223f      	movs	r2, #63	; 0x3f
 80040ce:	409a      	lsls	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0216 	orr.w	r2, r2, #22
 80040e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0208 	orr.w	r2, r2, #8
 80040fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e005      	b.n	800411a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004132:	f7ff f8c7 	bl	80032c4 <HAL_GetTick>
 8004136:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d008      	beq.n	8004156 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2280      	movs	r2, #128	; 0x80
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e052      	b.n	80041fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0216 	bic.w	r2, r2, #22
 8004164:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004174:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <HAL_DMA_Abort+0x62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0208 	bic.w	r2, r2, #8
 8004194:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041a6:	e013      	b.n	80041d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041a8:	f7ff f88c 	bl	80032c4 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	d90c      	bls.n	80041d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2203      	movs	r2, #3
 80041c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e015      	b.n	80041fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e4      	bne.n	80041a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	223f      	movs	r2, #63	; 0x3f
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d004      	beq.n	8004222 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2280      	movs	r2, #128	; 0x80
 800421c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e00c      	b.n	800423c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2205      	movs	r2, #5
 8004226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004254:	4b8e      	ldr	r3, [pc, #568]	; (8004490 <HAL_DMA_IRQHandler+0x248>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a8e      	ldr	r2, [pc, #568]	; (8004494 <HAL_DMA_IRQHandler+0x24c>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	0a9b      	lsrs	r3, r3, #10
 8004260:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004272:	2208      	movs	r2, #8
 8004274:	409a      	lsls	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01a      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d013      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0204 	bic.w	r2, r2, #4
 800429a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a0:	2208      	movs	r2, #8
 80042a2:	409a      	lsls	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b8:	2201      	movs	r2, #1
 80042ba:	409a      	lsls	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d012      	beq.n	80042ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d6:	2201      	movs	r2, #1
 80042d8:	409a      	lsls	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	f043 0202 	orr.w	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	2204      	movs	r2, #4
 80042f0:	409a      	lsls	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d012      	beq.n	8004320 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00b      	beq.n	8004320 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	2204      	movs	r2, #4
 800430e:	409a      	lsls	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	f043 0204 	orr.w	r2, r3, #4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004324:	2210      	movs	r2, #16
 8004326:	409a      	lsls	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d043      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d03c      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004342:	2210      	movs	r2, #16
 8004344:	409a      	lsls	r2, r3
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d018      	beq.n	800438a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d108      	bne.n	8004378 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d024      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
 8004376:	e01f      	b.n	80043b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01b      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
 8004388:	e016      	b.n	80043b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0208 	bic.w	r2, r2, #8
 80043a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043bc:	2220      	movs	r2, #32
 80043be:	409a      	lsls	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 808f 	beq.w	80044e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8087 	beq.w	80044e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	2220      	movs	r2, #32
 80043e0:	409a      	lsls	r2, r3
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d136      	bne.n	8004460 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0216 	bic.w	r2, r2, #22
 8004400:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695a      	ldr	r2, [r3, #20]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004410:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d103      	bne.n	8004422 <HAL_DMA_IRQHandler+0x1da>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0208 	bic.w	r2, r2, #8
 8004430:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004436:	223f      	movs	r2, #63	; 0x3f
 8004438:	409a      	lsls	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004452:	2b00      	cmp	r3, #0
 8004454:	d07e      	beq.n	8004554 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
        }
        return;
 800445e:	e079      	b.n	8004554 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01d      	beq.n	80044aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10d      	bne.n	8004498 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	2b00      	cmp	r3, #0
 8004482:	d031      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	4798      	blx	r3
 800448c:	e02c      	b.n	80044e8 <HAL_DMA_IRQHandler+0x2a0>
 800448e:	bf00      	nop
 8004490:	20000004 	.word	0x20000004
 8004494:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d023      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4798      	blx	r3
 80044a8:	e01e      	b.n	80044e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10f      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0210 	bic.w	r2, r2, #16
 80044c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d032      	beq.n	8004556 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d022      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2205      	movs	r2, #5
 8004500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	3301      	adds	r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	429a      	cmp	r2, r3
 800451e:	d307      	bcc.n	8004530 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f2      	bne.n	8004514 <HAL_DMA_IRQHandler+0x2cc>
 800452e:	e000      	b.n	8004532 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004530:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
 8004552:	e000      	b.n	8004556 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004554:	bf00      	nop
    }
  }
}
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800456a:	b2db      	uxtb	r3, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004594:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d108      	bne.n	80045b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045b6:	e007      	b.n	80045c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	60da      	str	r2, [r3, #12]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	3b10      	subs	r3, #16
 80045e4:	4a14      	ldr	r2, [pc, #80]	; (8004638 <DMA_CalcBaseAndBitshift+0x64>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045ee:	4a13      	ldr	r2, [pc, #76]	; (800463c <DMA_CalcBaseAndBitshift+0x68>)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d909      	bls.n	8004616 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	1d1a      	adds	r2, r3, #4
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	659a      	str	r2, [r3, #88]	; 0x58
 8004614:	e007      	b.n	8004626 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	aaaaaaab 	.word	0xaaaaaaab
 800463c:	080093d4 	.word	0x080093d4

08004640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11f      	bne.n	800469a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d856      	bhi.n	800470e <DMA_CheckFifoParam+0xce>
 8004660:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <DMA_CheckFifoParam+0x28>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	08004679 	.word	0x08004679
 800466c:	0800468b 	.word	0x0800468b
 8004670:	08004679 	.word	0x08004679
 8004674:	0800470f 	.word	0x0800470f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d046      	beq.n	8004712 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004688:	e043      	b.n	8004712 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004692:	d140      	bne.n	8004716 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e03d      	b.n	8004716 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a2:	d121      	bne.n	80046e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d837      	bhi.n	800471a <DMA_CheckFifoParam+0xda>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <DMA_CheckFifoParam+0x70>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046c7 	.word	0x080046c7
 80046b8:	080046c1 	.word	0x080046c1
 80046bc:	080046d9 	.word	0x080046d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      break;
 80046c4:	e030      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d025      	beq.n	800471e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d6:	e022      	b.n	800471e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046e0:	d11f      	bne.n	8004722 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046e6:	e01c      	b.n	8004722 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d903      	bls.n	80046f6 <DMA_CheckFifoParam+0xb6>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d003      	beq.n	80046fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046f4:	e018      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
      break;
 80046fa:	e015      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00e      	beq.n	8004726 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      break;
 800470c:	e00b      	b.n	8004726 <DMA_CheckFifoParam+0xe6>
      break;
 800470e:	bf00      	nop
 8004710:	e00a      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;
 8004712:	bf00      	nop
 8004714:	e008      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;
 8004716:	bf00      	nop
 8004718:	e006      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;
 800471a:	bf00      	nop
 800471c:	e004      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;
 800471e:	bf00      	nop
 8004720:	e002      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;   
 8004722:	bf00      	nop
 8004724:	e000      	b.n	8004728 <DMA_CheckFifoParam+0xe8>
      break;
 8004726:	bf00      	nop
    }
  } 
  
  return status; 
 8004728:	7bfb      	ldrb	r3, [r7, #15]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop

08004738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	; 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800474a:	2300      	movs	r3, #0
 800474c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e159      	b.n	8004a08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004754:	2201      	movs	r2, #1
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	429a      	cmp	r2, r3
 800476e:	f040 8148 	bne.w	8004a02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b01      	cmp	r3, #1
 800477c:	d005      	beq.n	800478a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004786:	2b02      	cmp	r3, #2
 8004788:	d130      	bne.n	80047ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	2203      	movs	r2, #3
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047c0:	2201      	movs	r2, #1
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 0201 	and.w	r2, r3, #1
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d017      	beq.n	8004828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	2203      	movs	r2, #3
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4013      	ands	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d123      	bne.n	800487c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	08da      	lsrs	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3208      	adds	r2, #8
 800483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	220f      	movs	r2, #15
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	08da      	lsrs	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3208      	adds	r2, #8
 8004876:	69b9      	ldr	r1, [r7, #24]
 8004878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2203      	movs	r2, #3
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0203 	and.w	r2, r3, #3
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80a2 	beq.w	8004a02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	4b57      	ldr	r3, [pc, #348]	; (8004a20 <HAL_GPIO_Init+0x2e8>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	4a56      	ldr	r2, [pc, #344]	; (8004a20 <HAL_GPIO_Init+0x2e8>)
 80048c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048cc:	6453      	str	r3, [r2, #68]	; 0x44
 80048ce:	4b54      	ldr	r3, [pc, #336]	; (8004a20 <HAL_GPIO_Init+0x2e8>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048da:	4a52      	ldr	r2, [pc, #328]	; (8004a24 <HAL_GPIO_Init+0x2ec>)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	3302      	adds	r3, #2
 80048e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	220f      	movs	r2, #15
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a49      	ldr	r2, [pc, #292]	; (8004a28 <HAL_GPIO_Init+0x2f0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d019      	beq.n	800493a <HAL_GPIO_Init+0x202>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a48      	ldr	r2, [pc, #288]	; (8004a2c <HAL_GPIO_Init+0x2f4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_GPIO_Init+0x1fe>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a47      	ldr	r2, [pc, #284]	; (8004a30 <HAL_GPIO_Init+0x2f8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00d      	beq.n	8004932 <HAL_GPIO_Init+0x1fa>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a46      	ldr	r2, [pc, #280]	; (8004a34 <HAL_GPIO_Init+0x2fc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <HAL_GPIO_Init+0x1f6>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a45      	ldr	r2, [pc, #276]	; (8004a38 <HAL_GPIO_Init+0x300>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_GPIO_Init+0x1f2>
 8004926:	2304      	movs	r3, #4
 8004928:	e008      	b.n	800493c <HAL_GPIO_Init+0x204>
 800492a:	2307      	movs	r3, #7
 800492c:	e006      	b.n	800493c <HAL_GPIO_Init+0x204>
 800492e:	2303      	movs	r3, #3
 8004930:	e004      	b.n	800493c <HAL_GPIO_Init+0x204>
 8004932:	2302      	movs	r3, #2
 8004934:	e002      	b.n	800493c <HAL_GPIO_Init+0x204>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <HAL_GPIO_Init+0x204>
 800493a:	2300      	movs	r3, #0
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	f002 0203 	and.w	r2, r2, #3
 8004942:	0092      	lsls	r2, r2, #2
 8004944:	4093      	lsls	r3, r2
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4313      	orrs	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800494c:	4935      	ldr	r1, [pc, #212]	; (8004a24 <HAL_GPIO_Init+0x2ec>)
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	3302      	adds	r3, #2
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800495a:	4b38      	ldr	r3, [pc, #224]	; (8004a3c <HAL_GPIO_Init+0x304>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800497e:	4a2f      	ldr	r2, [pc, #188]	; (8004a3c <HAL_GPIO_Init+0x304>)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004984:	4b2d      	ldr	r3, [pc, #180]	; (8004a3c <HAL_GPIO_Init+0x304>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049a8:	4a24      	ldr	r2, [pc, #144]	; (8004a3c <HAL_GPIO_Init+0x304>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049ae:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <HAL_GPIO_Init+0x304>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049d2:	4a1a      	ldr	r2, [pc, #104]	; (8004a3c <HAL_GPIO_Init+0x304>)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049d8:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <HAL_GPIO_Init+0x304>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4013      	ands	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049fc:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <HAL_GPIO_Init+0x304>)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3301      	adds	r3, #1
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	2b0f      	cmp	r3, #15
 8004a0c:	f67f aea2 	bls.w	8004754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	3724      	adds	r7, #36	; 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40013800 	.word	0x40013800
 8004a28:	40020000 	.word	0x40020000
 8004a2c:	40020400 	.word	0x40020400
 8004a30:	40020800 	.word	0x40020800
 8004a34:	40020c00 	.word	0x40020c00
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40013c00 	.word	0x40013c00

08004a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	887b      	ldrh	r3, [r7, #2]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
 8004a5c:	e001      	b.n	8004a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	807b      	strh	r3, [r7, #2]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a80:	787b      	ldrb	r3, [r7, #1]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a86:	887a      	ldrh	r2, [r7, #2]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a8c:	e003      	b.n	8004a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a8e:	887b      	ldrh	r3, [r7, #2]
 8004a90:	041a      	lsls	r2, r3, #16
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	619a      	str	r2, [r3, #24]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ab4:	887a      	ldrh	r2, [r7, #2]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	041a      	lsls	r2, r3, #16
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	43d9      	mvns	r1, r3
 8004ac0:	887b      	ldrh	r3, [r7, #2]
 8004ac2:	400b      	ands	r3, r1
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	619a      	str	r2, [r3, #24]
}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e12b      	b.n	8004d42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fe f984 	bl	8002e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2224      	movs	r2, #36	; 0x24
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0201 	bic.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f002 fa5c 	bl	8006ff8 <HAL_RCC_GetPCLK1Freq>
 8004b40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4a81      	ldr	r2, [pc, #516]	; (8004d4c <HAL_I2C_Init+0x274>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d807      	bhi.n	8004b5c <HAL_I2C_Init+0x84>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a80      	ldr	r2, [pc, #512]	; (8004d50 <HAL_I2C_Init+0x278>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	bf94      	ite	ls
 8004b54:	2301      	movls	r3, #1
 8004b56:	2300      	movhi	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e006      	b.n	8004b6a <HAL_I2C_Init+0x92>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a7d      	ldr	r2, [pc, #500]	; (8004d54 <HAL_I2C_Init+0x27c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	bf94      	ite	ls
 8004b64:	2301      	movls	r3, #1
 8004b66:	2300      	movhi	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0e7      	b.n	8004d42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4a78      	ldr	r2, [pc, #480]	; (8004d58 <HAL_I2C_Init+0x280>)
 8004b76:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7a:	0c9b      	lsrs	r3, r3, #18
 8004b7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a6a      	ldr	r2, [pc, #424]	; (8004d4c <HAL_I2C_Init+0x274>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d802      	bhi.n	8004bac <HAL_I2C_Init+0xd4>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	e009      	b.n	8004bc0 <HAL_I2C_Init+0xe8>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	4a69      	ldr	r2, [pc, #420]	; (8004d5c <HAL_I2C_Init+0x284>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	099b      	lsrs	r3, r3, #6
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	495c      	ldr	r1, [pc, #368]	; (8004d4c <HAL_I2C_Init+0x274>)
 8004bdc:	428b      	cmp	r3, r1
 8004bde:	d819      	bhi.n	8004c14 <HAL_I2C_Init+0x13c>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1e59      	subs	r1, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bee:	1c59      	adds	r1, r3, #1
 8004bf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bf4:	400b      	ands	r3, r1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_I2C_Init+0x138>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1e59      	subs	r1, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0e:	e051      	b.n	8004cb4 <HAL_I2C_Init+0x1dc>
 8004c10:	2304      	movs	r3, #4
 8004c12:	e04f      	b.n	8004cb4 <HAL_I2C_Init+0x1dc>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d111      	bne.n	8004c40 <HAL_I2C_Init+0x168>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1e58      	subs	r0, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	440b      	add	r3, r1
 8004c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e012      	b.n	8004c66 <HAL_I2C_Init+0x18e>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1e58      	subs	r0, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	0099      	lsls	r1, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c56:	3301      	adds	r3, #1
 8004c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_I2C_Init+0x196>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e022      	b.n	8004cb4 <HAL_I2C_Init+0x1dc>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10e      	bne.n	8004c94 <HAL_I2C_Init+0x1bc>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1e58      	subs	r0, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	440b      	add	r3, r1
 8004c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c92:	e00f      	b.n	8004cb4 <HAL_I2C_Init+0x1dc>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1e58      	subs	r0, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	0099      	lsls	r1, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004caa:	3301      	adds	r3, #1
 8004cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	6809      	ldr	r1, [r1, #0]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69da      	ldr	r2, [r3, #28]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6911      	ldr	r1, [r2, #16]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68d2      	ldr	r2, [r2, #12]
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	000186a0 	.word	0x000186a0
 8004d50:	001e847f 	.word	0x001e847f
 8004d54:	003d08ff 	.word	0x003d08ff
 8004d58:	431bde83 	.word	0x431bde83
 8004d5c:	10624dd3 	.word	0x10624dd3

08004d60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d003      	beq.n	8004d98 <HAL_I2C_EV_IRQHandler+0x38>
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	f040 80c1 	bne.w	8004f1a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <HAL_I2C_EV_IRQHandler+0x6e>
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004db8:	d003      	beq.n	8004dc2 <HAL_I2C_EV_IRQHandler+0x62>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004dc0:	d101      	bne.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x66>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_I2C_EV_IRQHandler+0x68>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	f000 8132 	beq.w	8005032 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00c      	beq.n	8004df2 <HAL_I2C_EV_IRQHandler+0x92>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	0a5b      	lsrs	r3, r3, #9
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d006      	beq.n	8004df2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 fc7b 	bl	80066e0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fd83 	bl	80058f6 <I2C_Master_SB>
 8004df0:	e092      	b.n	8004f18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	08db      	lsrs	r3, r3, #3
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_I2C_EV_IRQHandler+0xb2>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	0a5b      	lsrs	r3, r3, #9
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fdf9 	bl	8005a02 <I2C_Master_ADD10>
 8004e10:	e082      	b.n	8004f18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <HAL_I2C_EV_IRQHandler+0xd2>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	0a5b      	lsrs	r3, r3, #9
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fe13 	bl	8005a56 <I2C_Master_ADDR>
 8004e30:	e072      	b.n	8004f18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	089b      	lsrs	r3, r3, #2
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d03b      	beq.n	8004eb6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4c:	f000 80f3 	beq.w	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	09db      	lsrs	r3, r3, #7
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00f      	beq.n	8004e7c <HAL_I2C_EV_IRQHandler+0x11c>
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	0a9b      	lsrs	r3, r3, #10
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d009      	beq.n	8004e7c <HAL_I2C_EV_IRQHandler+0x11c>
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d103      	bne.n	8004e7c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f9f3 	bl	8005260 <I2C_MasterTransmit_TXE>
 8004e7a:	e04d      	b.n	8004f18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80d6 	beq.w	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	0a5b      	lsrs	r3, r3, #9
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80cf 	beq.w	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004e98:	7bbb      	ldrb	r3, [r7, #14]
 8004e9a:	2b21      	cmp	r3, #33	; 0x21
 8004e9c:	d103      	bne.n	8004ea6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fa7a 	bl	8005398 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ea4:	e0c7      	b.n	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	f040 80c4 	bne.w	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fae8 	bl	8005484 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eb4:	e0bf      	b.n	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec4:	f000 80b7 	beq.w	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	099b      	lsrs	r3, r3, #6
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00f      	beq.n	8004ef4 <HAL_I2C_EV_IRQHandler+0x194>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	0a9b      	lsrs	r3, r3, #10
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d009      	beq.n	8004ef4 <HAL_I2C_EV_IRQHandler+0x194>
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d103      	bne.n	8004ef4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fb5d 	bl	80055ac <I2C_MasterReceive_RXNE>
 8004ef2:	e011      	b.n	8004f18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	089b      	lsrs	r3, r3, #2
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 809a 	beq.w	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	0a5b      	lsrs	r3, r3, #9
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8093 	beq.w	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fc06 	bl	8005722 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f16:	e08e      	b.n	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f18:	e08d      	b.n	8005036 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d004      	beq.n	8004f2c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	e007      	b.n	8004f3c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d012      	beq.n	8004f6e <HAL_I2C_EV_IRQHandler+0x20e>
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	0a5b      	lsrs	r3, r3, #9
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00c      	beq.n	8004f6e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004f64:	69b9      	ldr	r1, [r7, #24]
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 ffc4 	bl	8005ef4 <I2C_Slave_ADDR>
 8004f6c:	e066      	b.n	800503c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	091b      	lsrs	r3, r3, #4
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_I2C_EV_IRQHandler+0x22e>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	0a5b      	lsrs	r3, r3, #9
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fffe 	bl	8005f88 <I2C_Slave_STOPF>
 8004f8c:	e056      	b.n	800503c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	2b21      	cmp	r3, #33	; 0x21
 8004f92:	d002      	beq.n	8004f9a <HAL_I2C_EV_IRQHandler+0x23a>
 8004f94:	7bbb      	ldrb	r3, [r7, #14]
 8004f96:	2b29      	cmp	r3, #41	; 0x29
 8004f98:	d125      	bne.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	09db      	lsrs	r3, r3, #7
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00f      	beq.n	8004fc6 <HAL_I2C_EV_IRQHandler+0x266>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	0a9b      	lsrs	r3, r3, #10
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <HAL_I2C_EV_IRQHandler+0x266>
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	089b      	lsrs	r3, r3, #2
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 feda 	bl	8005d78 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fc4:	e039      	b.n	800503a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d033      	beq.n	800503a <HAL_I2C_EV_IRQHandler+0x2da>
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	0a5b      	lsrs	r3, r3, #9
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d02d      	beq.n	800503a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 ff07 	bl	8005df2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fe4:	e029      	b.n	800503a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	099b      	lsrs	r3, r3, #6
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00f      	beq.n	8005012 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	0a9b      	lsrs	r3, r3, #10
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	089b      	lsrs	r3, r3, #2
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 ff12 	bl	8005e34 <I2C_SlaveReceive_RXNE>
 8005010:	e014      	b.n	800503c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	089b      	lsrs	r3, r3, #2
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00e      	beq.n	800503c <HAL_I2C_EV_IRQHandler+0x2dc>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	0a5b      	lsrs	r3, r3, #9
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d008      	beq.n	800503c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 ff40 	bl	8005eb0 <I2C_SlaveReceive_BTF>
 8005030:	e004      	b.n	800503c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005032:	bf00      	nop
 8005034:	e002      	b.n	800503c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005036:	bf00      	nop
 8005038:	e000      	b.n	800503c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800503a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b08a      	sub	sp, #40	; 0x28
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005064:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	0a1b      	lsrs	r3, r3, #8
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00e      	beq.n	8005090 <HAL_I2C_ER_IRQHandler+0x4e>
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800508e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	0a5b      	lsrs	r3, r3, #9
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00e      	beq.n	80050ba <HAL_I2C_ER_IRQHandler+0x78>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	f043 0302 	orr.w	r3, r3, #2
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80050b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	0a9b      	lsrs	r3, r3, #10
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d03f      	beq.n	8005146 <HAL_I2C_ER_IRQHandler+0x104>
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	0a1b      	lsrs	r3, r3, #8
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d039      	beq.n	8005146 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80050d2:	7efb      	ldrb	r3, [r7, #27]
 80050d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80050ec:	7ebb      	ldrb	r3, [r7, #26]
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d112      	bne.n	8005118 <HAL_I2C_ER_IRQHandler+0xd6>
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10f      	bne.n	8005118 <HAL_I2C_ER_IRQHandler+0xd6>
 80050f8:	7cfb      	ldrb	r3, [r7, #19]
 80050fa:	2b21      	cmp	r3, #33	; 0x21
 80050fc:	d008      	beq.n	8005110 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80050fe:	7cfb      	ldrb	r3, [r7, #19]
 8005100:	2b29      	cmp	r3, #41	; 0x29
 8005102:	d005      	beq.n	8005110 <HAL_I2C_ER_IRQHandler+0xce>
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	2b28      	cmp	r3, #40	; 0x28
 8005108:	d106      	bne.n	8005118 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b21      	cmp	r3, #33	; 0x21
 800510e:	d103      	bne.n	8005118 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f001 f869 	bl	80061e8 <I2C_Slave_AF>
 8005116:	e016      	b.n	8005146 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005120:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	f043 0304 	orr.w	r3, r3, #4
 8005128:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800512a:	7efb      	ldrb	r3, [r7, #27]
 800512c:	2b10      	cmp	r3, #16
 800512e:	d002      	beq.n	8005136 <HAL_I2C_ER_IRQHandler+0xf4>
 8005130:	7efb      	ldrb	r3, [r7, #27]
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d107      	bne.n	8005146 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005144:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	0adb      	lsrs	r3, r3, #11
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00e      	beq.n	8005170 <HAL_I2C_ER_IRQHandler+0x12e>
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	f043 0308 	orr.w	r3, r3, #8
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800516e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f001 f8a0 	bl	80062c8 <I2C_ITError>
  }
}
 8005188:	bf00      	nop
 800518a:	3728      	adds	r7, #40	; 0x28
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
 80051ec:	4613      	mov	r3, r2
 80051ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005276:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	d150      	bne.n	8005328 <I2C_MasterTransmit_TXE+0xc8>
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	2b21      	cmp	r3, #33	; 0x21
 800528a:	d14d      	bne.n	8005328 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b08      	cmp	r3, #8
 8005290:	d01d      	beq.n	80052ce <I2C_MasterTransmit_TXE+0x6e>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b20      	cmp	r3, #32
 8005296:	d01a      	beq.n	80052ce <I2C_MasterTransmit_TXE+0x6e>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800529e:	d016      	beq.n	80052ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2211      	movs	r2, #17
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff ff62 	bl	8005190 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052cc:	e060      	b.n	8005390 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d107      	bne.n	8005318 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff ff7d 	bl	8005210 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005316:	e03b      	b.n	8005390 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff ff35 	bl	8005190 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005326:	e033      	b.n	8005390 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b21      	cmp	r3, #33	; 0x21
 800532c:	d005      	beq.n	800533a <I2C_MasterTransmit_TXE+0xda>
 800532e:	7bbb      	ldrb	r3, [r7, #14]
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d12d      	bne.n	8005390 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b22      	cmp	r3, #34	; 0x22
 8005338:	d12a      	bne.n	8005390 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d108      	bne.n	8005356 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005352:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005354:	e01c      	b.n	8005390 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d103      	bne.n	800536a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f88e 	bl	8005484 <I2C_MemoryTransmit_TXE_BTF>
}
 8005368:	e012      	b.n	8005390 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	781a      	ldrb	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800538e:	e7ff      	b.n	8005390 <I2C_MasterTransmit_TXE+0x130>
 8005390:	bf00      	nop
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b21      	cmp	r3, #33	; 0x21
 80053b0:	d164      	bne.n	800547c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d012      	beq.n	80053e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	781a      	ldrb	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80053e0:	e04c      	b.n	800547c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d01d      	beq.n	8005424 <I2C_MasterTransmit_BTF+0x8c>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d01a      	beq.n	8005424 <I2C_MasterTransmit_BTF+0x8c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053f4:	d016      	beq.n	8005424 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005404:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2211      	movs	r2, #17
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff feb7 	bl	8005190 <HAL_I2C_MasterTxCpltCallback>
}
 8005422:	e02b      	b.n	800547c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005432:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005442:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d107      	bne.n	800546e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fed2 	bl	8005210 <HAL_I2C_MemTxCpltCallback>
}
 800546c:	e006      	b.n	800547c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff fe8a 	bl	8005190 <HAL_I2C_MasterTxCpltCallback>
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	2b00      	cmp	r3, #0
 800549a:	d11d      	bne.n	80054d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d10b      	bne.n	80054bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b4:	1c9a      	adds	r2, r3, #2
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80054ba:	e073      	b.n	80055a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	121b      	asrs	r3, r3, #8
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054d6:	e065      	b.n	80055a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10b      	bne.n	80054f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054f6:	e055      	b.n	80055a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d151      	bne.n	80055a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b22      	cmp	r3, #34	; 0x22
 8005504:	d10d      	bne.n	8005522 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005514:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005520:	e040      	b.n	80055a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b21      	cmp	r3, #33	; 0x21
 8005530:	d112      	bne.n	8005558 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	781a      	ldrb	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005556:	e025      	b.n	80055a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d120      	bne.n	80055a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b21      	cmp	r3, #33	; 0x21
 8005566:	d11d      	bne.n	80055a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005576:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005586:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fe36 	bl	8005210 <HAL_I2C_MemTxCpltCallback>
}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b22      	cmp	r3, #34	; 0x22
 80055be:	f040 80ac 	bne.w	800571a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d921      	bls.n	8005614 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	f040 808c 	bne.w	800571a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005610:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005612:	e082      	b.n	800571a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	2b02      	cmp	r3, #2
 800561a:	d075      	beq.n	8005708 <I2C_MasterReceive_RXNE+0x15c>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d002      	beq.n	8005628 <I2C_MasterReceive_RXNE+0x7c>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d16f      	bne.n	8005708 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 f827 	bl	800667c <I2C_WaitOnSTOPRequestThroughIT>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d142      	bne.n	80056ba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005642:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005652:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d10a      	bne.n	80056a4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff fdc1 	bl	8005224 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056a2:	e03a      	b.n	800571a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2212      	movs	r2, #18
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff fd76 	bl	80051a4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056b8:	e02f      	b.n	800571a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fd99 	bl	8005238 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005706:	e008      	b.n	800571a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005716:	605a      	str	r2, [r3, #4]
}
 8005718:	e7ff      	b.n	800571a <I2C_MasterReceive_RXNE+0x16e>
 800571a:	bf00      	nop
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b04      	cmp	r3, #4
 8005738:	d11b      	bne.n	8005772 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005748:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005770:	e0bd      	b.n	80058ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b03      	cmp	r3, #3
 800577a:	d129      	bne.n	80057d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b04      	cmp	r3, #4
 8005790:	d00a      	beq.n	80057a8 <I2C_MasterReceive_BTF+0x86>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d007      	beq.n	80057a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80057ce:	e08e      	b.n	80058ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d176      	bne.n	80058c8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d002      	beq.n	80057e6 <I2C_MasterReceive_BTF+0xc4>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d108      	bne.n	80057f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	e019      	b.n	800582c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d002      	beq.n	8005804 <I2C_MasterReceive_BTF+0xe2>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d108      	bne.n	8005816 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	e00a      	b.n	800582c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b10      	cmp	r3, #16
 800581a:	d007      	beq.n	800582c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005886:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	d10a      	bne.n	80058b2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fcba 	bl	8005224 <HAL_I2C_MemRxCpltCallback>
}
 80058b0:	e01d      	b.n	80058ee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2212      	movs	r2, #18
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fc6f 	bl	80051a4 <HAL_I2C_MasterRxCpltCallback>
}
 80058c6:	e012      	b.n	80058ee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b40      	cmp	r3, #64	; 0x40
 8005908:	d117      	bne.n	800593a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005916:	b2db      	uxtb	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005922:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005924:	e067      	b.n	80059f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f043 0301 	orr.w	r3, r3, #1
 8005930:	b2da      	uxtb	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	611a      	str	r2, [r3, #16]
}
 8005938:	e05d      	b.n	80059f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005942:	d133      	bne.n	80059ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b21      	cmp	r3, #33	; 0x21
 800594e:	d109      	bne.n	8005964 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005960:	611a      	str	r2, [r3, #16]
 8005962:	e008      	b.n	8005976 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	b2da      	uxtb	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <I2C_Master_SB+0x92>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d108      	bne.n	800599a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	2b00      	cmp	r3, #0
 800598e:	d032      	beq.n	80059f6 <I2C_Master_SB+0x100>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d02d      	beq.n	80059f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a8:	605a      	str	r2, [r3, #4]
}
 80059aa:	e024      	b.n	80059f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10e      	bne.n	80059d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	11db      	asrs	r3, r3, #7
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f003 0306 	and.w	r3, r3, #6
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f063 030f 	orn	r3, r3, #15
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	611a      	str	r2, [r3, #16]
}
 80059d0:	e011      	b.n	80059f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d10d      	bne.n	80059f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	b29b      	uxth	r3, r3
 80059e0:	11db      	asrs	r3, r3, #7
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 0306 	and.w	r3, r3, #6
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	f063 030e 	orn	r3, r3, #14
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	611a      	str	r2, [r3, #16]
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d004      	beq.n	8005a28 <I2C_Master_ADD10+0x26>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d108      	bne.n	8005a3a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00c      	beq.n	8005a4a <I2C_Master_ADD10+0x48>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a48:	605a      	str	r2, [r3, #4]
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b091      	sub	sp, #68	; 0x44
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b22      	cmp	r3, #34	; 0x22
 8005a7e:	f040 8169 	bne.w	8005d54 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10f      	bne.n	8005aaa <I2C_Master_ADDR+0x54>
 8005a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d10b      	bne.n	8005aaa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a92:	2300      	movs	r3, #0
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	e160      	b.n	8005d6c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d11d      	bne.n	8005aee <I2C_Master_ADDR+0x98>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005aba:	d118      	bne.n	8005aee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005abc:	2300      	movs	r3, #0
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ae0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	651a      	str	r2, [r3, #80]	; 0x50
 8005aec:	e13e      	b.n	8005d6c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d113      	bne.n	8005b20 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af8:	2300      	movs	r3, #0
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e115      	b.n	8005d4c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	f040 808a 	bne.w	8005c40 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b32:	d137      	bne.n	8005ba4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b42:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d113      	bne.n	8005b7c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b62:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b64:	2300      	movs	r3, #0
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	e0e7      	b.n	8005d4c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	623b      	str	r3, [r7, #32]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	623b      	str	r3, [r7, #32]
 8005b90:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e0d3      	b.n	8005d4c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d02e      	beq.n	8005c08 <I2C_Master_ADDR+0x1b2>
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d02b      	beq.n	8005c08 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb2:	2b12      	cmp	r3, #18
 8005bb4:	d102      	bne.n	8005bbc <I2C_Master_ADDR+0x166>
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d125      	bne.n	8005c08 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d00e      	beq.n	8005be0 <I2C_Master_ADDR+0x18a>
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d00b      	beq.n	8005be0 <I2C_Master_ADDR+0x18a>
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d008      	beq.n	8005be0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e007      	b.n	8005bf0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	e0a1      	b.n	8005d4c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	61bb      	str	r3, [r7, #24]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e085      	b.n	8005d4c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d14d      	bne.n	8005ce6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d016      	beq.n	8005c7e <I2C_Master_ADDR+0x228>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d013      	beq.n	8005c7e <I2C_Master_ADDR+0x228>
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d010      	beq.n	8005c7e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	e007      	b.n	8005c8e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c8c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9c:	d117      	bne.n	8005cce <I2C_Master_ADDR+0x278>
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ca4:	d00b      	beq.n	8005cbe <I2C_Master_ADDR+0x268>
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d008      	beq.n	8005cbe <I2C_Master_ADDR+0x268>
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d005      	beq.n	8005cbe <I2C_Master_ADDR+0x268>
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d002      	beq.n	8005cbe <I2C_Master_ADDR+0x268>
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d107      	bne.n	8005cce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ccc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	e032      	b.n	8005d4c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cf4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d04:	d117      	bne.n	8005d36 <I2C_Master_ADDR+0x2e0>
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d0c:	d00b      	beq.n	8005d26 <I2C_Master_ADDR+0x2d0>
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d008      	beq.n	8005d26 <I2C_Master_ADDR+0x2d0>
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d005      	beq.n	8005d26 <I2C_Master_ADDR+0x2d0>
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d002      	beq.n	8005d26 <I2C_Master_ADDR+0x2d0>
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d107      	bne.n	8005d36 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005d52:	e00b      	b.n	8005d6c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
}
 8005d6a:	e7ff      	b.n	8005d6c <I2C_Master_ADDR+0x316>
 8005d6c:	bf00      	nop
 8005d6e:	3744      	adds	r7, #68	; 0x44
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d02b      	beq.n	8005dea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	781a      	ldrb	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d114      	bne.n	8005dea <I2C_SlaveTransmit_TXE+0x72>
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	2b29      	cmp	r3, #41	; 0x29
 8005dc4:	d111      	bne.n	8005dea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2221      	movs	r2, #33	; 0x21
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2228      	movs	r2, #40	; 0x28
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff f9e7 	bl	80051b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d011      	beq.n	8005e28 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d02c      	beq.n	8005ea8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d114      	bne.n	8005ea8 <I2C_SlaveReceive_RXNE+0x74>
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b2a      	cmp	r3, #42	; 0x2a
 8005e82:	d111      	bne.n	8005ea8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e92:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2222      	movs	r2, #34	; 0x22
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2228      	movs	r2, #40	; 0x28
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff f992 	bl	80051cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d012      	beq.n	8005ee8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f0e:	2b28      	cmp	r3, #40	; 0x28
 8005f10:	d127      	bne.n	8005f62 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f20:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	089b      	lsrs	r3, r3, #2
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	81bb      	strh	r3, [r7, #12]
 8005f44:	e002      	b.n	8005f4c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005f54:	89ba      	ldrh	r2, [r7, #12]
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff f940 	bl	80051e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005f60:	e00e      	b.n	8005f80 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f62:	2300      	movs	r3, #0
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f96:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fa6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60bb      	str	r3, [r7, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	60bb      	str	r3, [r7, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe4:	d172      	bne.n	80060cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2b22      	cmp	r3, #34	; 0x22
 8005fea:	d002      	beq.n	8005ff2 <I2C_Slave_STOPF+0x6a>
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff0:	d135      	bne.n	800605e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f043 0204 	orr.w	r2, r3, #4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006024:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fa96 	bl	800455c <HAL_DMA_GetState>
 8006030:	4603      	mov	r3, r0
 8006032:	2b01      	cmp	r3, #1
 8006034:	d049      	beq.n	80060ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	4a69      	ldr	r2, [pc, #420]	; (80061e0 <I2C_Slave_STOPF+0x258>)
 800603c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe f8de 	bl	8004204 <HAL_DMA_Abort_IT>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d03d      	beq.n	80060ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006058:	4610      	mov	r0, r2
 800605a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800605c:	e035      	b.n	80060ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	b29a      	uxth	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f043 0204 	orr.w	r2, r3, #4
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006090:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe fa60 	bl	800455c <HAL_DMA_GetState>
 800609c:	4603      	mov	r3, r0
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d014      	beq.n	80060cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a6:	4a4e      	ldr	r2, [pc, #312]	; (80061e0 <I2C_Slave_STOPF+0x258>)
 80060a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe f8a8 	bl	8004204 <HAL_DMA_Abort_IT>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d008      	beq.n	80060cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060c4:	4610      	mov	r0, r2
 80060c6:	4798      	blx	r3
 80060c8:	e000      	b.n	80060cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d03e      	beq.n	8006154 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d112      	bne.n	800610a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d112      	bne.n	800613e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	f043 0204 	orr.w	r2, r3, #4
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8b3 	bl	80062c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006162:	e039      	b.n	80061d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b2a      	cmp	r3, #42	; 0x2a
 8006168:	d109      	bne.n	800617e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2228      	movs	r2, #40	; 0x28
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff f827 	bl	80051cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b28      	cmp	r3, #40	; 0x28
 8006188:	d111      	bne.n	80061ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <I2C_Slave_STOPF+0x25c>)
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff f828 	bl	80051fc <HAL_I2C_ListenCpltCallback>
}
 80061ac:	e014      	b.n	80061d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	2b22      	cmp	r3, #34	; 0x22
 80061b4:	d002      	beq.n	80061bc <I2C_Slave_STOPF+0x234>
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	2b22      	cmp	r3, #34	; 0x22
 80061ba:	d10d      	bne.n	80061d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fe fffa 	bl	80051cc <HAL_I2C_SlaveRxCpltCallback>
}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	0800652d 	.word	0x0800652d
 80061e4:	ffff0000 	.word	0xffff0000

080061e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b08      	cmp	r3, #8
 8006202:	d002      	beq.n	800620a <I2C_Slave_AF+0x22>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b20      	cmp	r3, #32
 8006208:	d129      	bne.n	800625e <I2C_Slave_AF+0x76>
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b28      	cmp	r3, #40	; 0x28
 800620e:	d126      	bne.n	800625e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a2c      	ldr	r2, [pc, #176]	; (80062c4 <I2C_Slave_AF+0xdc>)
 8006214:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006224:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800622e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800623e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fe ffd0 	bl	80051fc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800625c:	e02e      	b.n	80062bc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	2b21      	cmp	r3, #33	; 0x21
 8006262:	d126      	bne.n	80062b2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <I2C_Slave_AF+0xdc>)
 8006268:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2221      	movs	r2, #33	; 0x21
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800628e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006298:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fe ff84 	bl	80051b8 <HAL_I2C_SlaveTxCpltCallback>
}
 80062b0:	e004      	b.n	80062bc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062ba:	615a      	str	r2, [r3, #20]
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	ffff0000 	.word	0xffff0000

080062c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	2b10      	cmp	r3, #16
 80062e4:	d002      	beq.n	80062ec <I2C_ITError+0x24>
 80062e6:	7bbb      	ldrb	r3, [r7, #14]
 80062e8:	2b40      	cmp	r3, #64	; 0x40
 80062ea:	d10a      	bne.n	8006302 <I2C_ITError+0x3a>
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	2b22      	cmp	r3, #34	; 0x22
 80062f0:	d107      	bne.n	8006302 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006300:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006308:	2b28      	cmp	r3, #40	; 0x28
 800630a:	d107      	bne.n	800631c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2228      	movs	r2, #40	; 0x28
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800631a:	e015      	b.n	8006348 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632a:	d00a      	beq.n	8006342 <I2C_ITError+0x7a>
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	2b60      	cmp	r3, #96	; 0x60
 8006330:	d007      	beq.n	8006342 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006356:	d162      	bne.n	800641e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006366:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b01      	cmp	r3, #1
 8006374:	d020      	beq.n	80063b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	4a6a      	ldr	r2, [pc, #424]	; (8006524 <I2C_ITError+0x25c>)
 800637c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	4618      	mov	r0, r3
 8006384:	f7fd ff3e 	bl	8004204 <HAL_DMA_Abort_IT>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 8089 	beq.w	80064a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063b2:	4610      	mov	r0, r2
 80063b4:	4798      	blx	r3
 80063b6:	e074      	b.n	80064a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	4a59      	ldr	r2, [pc, #356]	; (8006524 <I2C_ITError+0x25c>)
 80063be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fd ff1d 	bl	8004204 <HAL_DMA_Abort_IT>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d068      	beq.n	80064a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d10b      	bne.n	80063f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0201 	bic.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006418:	4610      	mov	r0, r2
 800641a:	4798      	blx	r3
 800641c:	e041      	b.n	80064a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b60      	cmp	r3, #96	; 0x60
 8006428:	d125      	bne.n	8006476 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b40      	cmp	r3, #64	; 0x40
 8006444:	d10b      	bne.n	800645e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0201 	bic.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fe feec 	bl	800524c <HAL_I2C_AbortCpltCallback>
 8006474:	e015      	b.n	80064a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d10b      	bne.n	800649c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fe fecb 	bl	8005238 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10e      	bne.n	80064d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d109      	bne.n	80064d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d113      	bne.n	800651c <I2C_ITError+0x254>
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b28      	cmp	r3, #40	; 0x28
 80064f8:	d110      	bne.n	800651c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a0a      	ldr	r2, [pc, #40]	; (8006528 <I2C_ITError+0x260>)
 80064fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fe fe70 	bl	80051fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	0800652d 	.word	0x0800652d
 8006528:	ffff0000 	.word	0xffff0000

0800652c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006544:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006546:	4b4b      	ldr	r3, [pc, #300]	; (8006674 <I2C_DMAAbort+0x148>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	08db      	lsrs	r3, r3, #3
 800654c:	4a4a      	ldr	r2, [pc, #296]	; (8006678 <I2C_DMAAbort+0x14c>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	0a1a      	lsrs	r2, r3, #8
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	00da      	lsls	r2, r3, #3
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006572:	e00a      	b.n	800658a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3b01      	subs	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006588:	d0ea      	beq.n	8006560 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	2200      	movs	r2, #0
 8006598:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	2200      	movs	r2, #0
 80065a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2200      	movs	r2, #0
 80065be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065cc:	2200      	movs	r2, #0
 80065ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	2200      	movs	r2, #0
 80065de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b60      	cmp	r3, #96	; 0x60
 80065fa:	d10e      	bne.n	800661a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2200      	movs	r2, #0
 8006610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006612:	6978      	ldr	r0, [r7, #20]
 8006614:	f7fe fe1a 	bl	800524c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006618:	e027      	b.n	800666a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800661a:	7cfb      	ldrb	r3, [r7, #19]
 800661c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006620:	2b28      	cmp	r3, #40	; 0x28
 8006622:	d117      	bne.n	8006654 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006642:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2200      	movs	r2, #0
 8006648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2228      	movs	r2, #40	; 0x28
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006652:	e007      	b.n	8006664 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006664:	6978      	ldr	r0, [r7, #20]
 8006666:	f7fe fde7 	bl	8005238 <HAL_I2C_ErrorCallback>
}
 800666a:	bf00      	nop
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000004 	.word	0x20000004
 8006678:	14f8b589 	.word	0x14f8b589

0800667c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006688:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	08db      	lsrs	r3, r3, #3
 800668e:	4a13      	ldr	r2, [pc, #76]	; (80066dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006690:	fba2 2303 	umull	r2, r3, r2, r3
 8006694:	0a1a      	lsrs	r2, r3, #8
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d107      	bne.n	80066ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f043 0220 	orr.w	r2, r3, #32
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e008      	b.n	80066cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c8:	d0e9      	beq.n	800669e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	20000004 	.word	0x20000004
 80066dc:	14f8b589 	.word	0x14f8b589

080066e0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066f0:	d103      	bne.n	80066fa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80066f8:	e007      	b.n	800670a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006702:	d102      	bne.n	800670a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2208      	movs	r2, #8
 8006708:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e267      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d075      	beq.n	8006822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006736:	4b88      	ldr	r3, [pc, #544]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 030c 	and.w	r3, r3, #12
 800673e:	2b04      	cmp	r3, #4
 8006740:	d00c      	beq.n	800675c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006742:	4b85      	ldr	r3, [pc, #532]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800674a:	2b08      	cmp	r3, #8
 800674c:	d112      	bne.n	8006774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800674e:	4b82      	ldr	r3, [pc, #520]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800675a:	d10b      	bne.n	8006774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800675c:	4b7e      	ldr	r3, [pc, #504]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d05b      	beq.n	8006820 <HAL_RCC_OscConfig+0x108>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d157      	bne.n	8006820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e242      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800677c:	d106      	bne.n	800678c <HAL_RCC_OscConfig+0x74>
 800677e:	4b76      	ldr	r3, [pc, #472]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a75      	ldr	r2, [pc, #468]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 8006784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	e01d      	b.n	80067c8 <HAL_RCC_OscConfig+0xb0>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006794:	d10c      	bne.n	80067b0 <HAL_RCC_OscConfig+0x98>
 8006796:	4b70      	ldr	r3, [pc, #448]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a6f      	ldr	r2, [pc, #444]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 800679c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	4b6d      	ldr	r3, [pc, #436]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a6c      	ldr	r2, [pc, #432]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80067a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	e00b      	b.n	80067c8 <HAL_RCC_OscConfig+0xb0>
 80067b0:	4b69      	ldr	r3, [pc, #420]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a68      	ldr	r2, [pc, #416]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80067b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	4b66      	ldr	r3, [pc, #408]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a65      	ldr	r2, [pc, #404]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80067c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d013      	beq.n	80067f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d0:	f7fc fd78 	bl	80032c4 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067d8:	f7fc fd74 	bl	80032c4 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b64      	cmp	r3, #100	; 0x64
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e207      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ea:	4b5b      	ldr	r3, [pc, #364]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f0      	beq.n	80067d8 <HAL_RCC_OscConfig+0xc0>
 80067f6:	e014      	b.n	8006822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f8:	f7fc fd64 	bl	80032c4 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006800:	f7fc fd60 	bl	80032c4 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b64      	cmp	r3, #100	; 0x64
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e1f3      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006812:	4b51      	ldr	r3, [pc, #324]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1f0      	bne.n	8006800 <HAL_RCC_OscConfig+0xe8>
 800681e:	e000      	b.n	8006822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d063      	beq.n	80068f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800682e:	4b4a      	ldr	r3, [pc, #296]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 030c 	and.w	r3, r3, #12
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800683a:	4b47      	ldr	r3, [pc, #284]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006842:	2b08      	cmp	r3, #8
 8006844:	d11c      	bne.n	8006880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006846:	4b44      	ldr	r3, [pc, #272]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d116      	bne.n	8006880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006852:	4b41      	ldr	r3, [pc, #260]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_RCC_OscConfig+0x152>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d001      	beq.n	800686a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e1c7      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686a:	4b3b      	ldr	r3, [pc, #236]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	4937      	ldr	r1, [pc, #220]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 800687a:	4313      	orrs	r3, r2
 800687c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800687e:	e03a      	b.n	80068f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d020      	beq.n	80068ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006888:	4b34      	ldr	r3, [pc, #208]	; (800695c <HAL_RCC_OscConfig+0x244>)
 800688a:	2201      	movs	r2, #1
 800688c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688e:	f7fc fd19 	bl	80032c4 <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006896:	f7fc fd15 	bl	80032c4 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e1a8      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a8:	4b2b      	ldr	r3, [pc, #172]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0f0      	beq.n	8006896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b4:	4b28      	ldr	r3, [pc, #160]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4925      	ldr	r1, [pc, #148]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	600b      	str	r3, [r1, #0]
 80068c8:	e015      	b.n	80068f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068ca:	4b24      	ldr	r3, [pc, #144]	; (800695c <HAL_RCC_OscConfig+0x244>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d0:	f7fc fcf8 	bl	80032c4 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068d8:	f7fc fcf4 	bl	80032c4 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e187      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ea:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1f0      	bne.n	80068d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d036      	beq.n	8006970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d016      	beq.n	8006938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800690a:	4b15      	ldr	r3, [pc, #84]	; (8006960 <HAL_RCC_OscConfig+0x248>)
 800690c:	2201      	movs	r2, #1
 800690e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006910:	f7fc fcd8 	bl	80032c4 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006918:	f7fc fcd4 	bl	80032c4 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e167      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800692a:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <HAL_RCC_OscConfig+0x240>)
 800692c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCC_OscConfig+0x200>
 8006936:	e01b      	b.n	8006970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006938:	4b09      	ldr	r3, [pc, #36]	; (8006960 <HAL_RCC_OscConfig+0x248>)
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800693e:	f7fc fcc1 	bl	80032c4 <HAL_GetTick>
 8006942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006944:	e00e      	b.n	8006964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006946:	f7fc fcbd 	bl	80032c4 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d907      	bls.n	8006964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e150      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
 8006958:	40023800 	.word	0x40023800
 800695c:	42470000 	.word	0x42470000
 8006960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006964:	4b88      	ldr	r3, [pc, #544]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1ea      	bne.n	8006946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 8097 	beq.w	8006aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800697e:	2300      	movs	r3, #0
 8006980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006982:	4b81      	ldr	r3, [pc, #516]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10f      	bne.n	80069ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	4b7d      	ldr	r3, [pc, #500]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	4a7c      	ldr	r2, [pc, #496]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800699c:	6413      	str	r3, [r2, #64]	; 0x40
 800699e:	4b7a      	ldr	r3, [pc, #488]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a6:	60bb      	str	r3, [r7, #8]
 80069a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ae:	4b77      	ldr	r3, [pc, #476]	; (8006b8c <HAL_RCC_OscConfig+0x474>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d118      	bne.n	80069ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ba:	4b74      	ldr	r3, [pc, #464]	; (8006b8c <HAL_RCC_OscConfig+0x474>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a73      	ldr	r2, [pc, #460]	; (8006b8c <HAL_RCC_OscConfig+0x474>)
 80069c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069c6:	f7fc fc7d 	bl	80032c4 <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069cc:	e008      	b.n	80069e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ce:	f7fc fc79 	bl	80032c4 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e10c      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e0:	4b6a      	ldr	r3, [pc, #424]	; (8006b8c <HAL_RCC_OscConfig+0x474>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0f0      	beq.n	80069ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d106      	bne.n	8006a02 <HAL_RCC_OscConfig+0x2ea>
 80069f4:	4b64      	ldr	r3, [pc, #400]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	4a63      	ldr	r2, [pc, #396]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006a00:	e01c      	b.n	8006a3c <HAL_RCC_OscConfig+0x324>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	2b05      	cmp	r3, #5
 8006a08:	d10c      	bne.n	8006a24 <HAL_RCC_OscConfig+0x30c>
 8006a0a:	4b5f      	ldr	r3, [pc, #380]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	4a5e      	ldr	r2, [pc, #376]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006a10:	f043 0304 	orr.w	r3, r3, #4
 8006a14:	6713      	str	r3, [r2, #112]	; 0x70
 8006a16:	4b5c      	ldr	r3, [pc, #368]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1a:	4a5b      	ldr	r2, [pc, #364]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006a1c:	f043 0301 	orr.w	r3, r3, #1
 8006a20:	6713      	str	r3, [r2, #112]	; 0x70
 8006a22:	e00b      	b.n	8006a3c <HAL_RCC_OscConfig+0x324>
 8006a24:	4b58      	ldr	r3, [pc, #352]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a28:	4a57      	ldr	r2, [pc, #348]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a30:	4b55      	ldr	r3, [pc, #340]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a34:	4a54      	ldr	r2, [pc, #336]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006a36:	f023 0304 	bic.w	r3, r3, #4
 8006a3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d015      	beq.n	8006a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a44:	f7fc fc3e 	bl	80032c4 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a4a:	e00a      	b.n	8006a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a4c:	f7fc fc3a 	bl	80032c4 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e0cb      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a62:	4b49      	ldr	r3, [pc, #292]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0ee      	beq.n	8006a4c <HAL_RCC_OscConfig+0x334>
 8006a6e:	e014      	b.n	8006a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a70:	f7fc fc28 	bl	80032c4 <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a76:	e00a      	b.n	8006a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a78:	f7fc fc24 	bl	80032c4 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e0b5      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a8e:	4b3e      	ldr	r3, [pc, #248]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1ee      	bne.n	8006a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d105      	bne.n	8006aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aa0:	4b39      	ldr	r3, [pc, #228]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	4a38      	ldr	r2, [pc, #224]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 80a1 	beq.w	8006bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ab6:	4b34      	ldr	r3, [pc, #208]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 030c 	and.w	r3, r3, #12
 8006abe:	2b08      	cmp	r3, #8
 8006ac0:	d05c      	beq.n	8006b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d141      	bne.n	8006b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aca:	4b31      	ldr	r3, [pc, #196]	; (8006b90 <HAL_RCC_OscConfig+0x478>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad0:	f7fc fbf8 	bl	80032c4 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fc fbf4 	bl	80032c4 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e087      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aea:	4b27      	ldr	r3, [pc, #156]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69da      	ldr	r2, [r3, #28]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	019b      	lsls	r3, r3, #6
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	041b      	lsls	r3, r3, #16
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	061b      	lsls	r3, r3, #24
 8006b1a:	491b      	ldr	r1, [pc, #108]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b20:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <HAL_RCC_OscConfig+0x478>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b26:	f7fc fbcd 	bl	80032c4 <HAL_GetTick>
 8006b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b2e:	f7fc fbc9 	bl	80032c4 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e05c      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b40:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f0      	beq.n	8006b2e <HAL_RCC_OscConfig+0x416>
 8006b4c:	e054      	b.n	8006bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b4e:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <HAL_RCC_OscConfig+0x478>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b54:	f7fc fbb6 	bl	80032c4 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b5c:	f7fc fbb2 	bl	80032c4 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e045      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6e:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <HAL_RCC_OscConfig+0x470>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f0      	bne.n	8006b5c <HAL_RCC_OscConfig+0x444>
 8006b7a:	e03d      	b.n	8006bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d107      	bne.n	8006b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e038      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	40007000 	.word	0x40007000
 8006b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b94:	4b1b      	ldr	r3, [pc, #108]	; (8006c04 <HAL_RCC_OscConfig+0x4ec>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d028      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d121      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d11a      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d111      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d107      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d001      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e000      	b.n	8006bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40023800 	.word	0x40023800

08006c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e0cc      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c1c:	4b68      	ldr	r3, [pc, #416]	; (8006dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d90c      	bls.n	8006c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c2a:	4b65      	ldr	r3, [pc, #404]	; (8006dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c32:	4b63      	ldr	r3, [pc, #396]	; (8006dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d001      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0b8      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d020      	beq.n	8006c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c5c:	4b59      	ldr	r3, [pc, #356]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	4a58      	ldr	r2, [pc, #352]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c74:	4b53      	ldr	r3, [pc, #332]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	4a52      	ldr	r2, [pc, #328]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c80:	4b50      	ldr	r3, [pc, #320]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	494d      	ldr	r1, [pc, #308]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d044      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d107      	bne.n	8006cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca6:	4b47      	ldr	r3, [pc, #284]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d119      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e07f      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d003      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d107      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cc6:	4b3f      	ldr	r3, [pc, #252]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e06f      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd6:	4b3b      	ldr	r3, [pc, #236]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e067      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ce6:	4b37      	ldr	r3, [pc, #220]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f023 0203 	bic.w	r2, r3, #3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4934      	ldr	r1, [pc, #208]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cf8:	f7fc fae4 	bl	80032c4 <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cfe:	e00a      	b.n	8006d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d00:	f7fc fae0 	bl	80032c4 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e04f      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d16:	4b2b      	ldr	r3, [pc, #172]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 020c 	and.w	r2, r3, #12
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1eb      	bne.n	8006d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d28:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d20c      	bcs.n	8006d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d36:	4b22      	ldr	r3, [pc, #136]	; (8006dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d3e:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d001      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e032      	b.n	8006db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d5c:	4b19      	ldr	r3, [pc, #100]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	4916      	ldr	r1, [pc, #88]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d7a:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	490e      	ldr	r1, [pc, #56]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d8e:	f000 f821 	bl	8006dd4 <HAL_RCC_GetSysClockFreq>
 8006d92:	4602      	mov	r2, r0
 8006d94:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	490a      	ldr	r1, [pc, #40]	; (8006dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006da0:	5ccb      	ldrb	r3, [r1, r3]
 8006da2:	fa22 f303 	lsr.w	r3, r2, r3
 8006da6:	4a09      	ldr	r2, [pc, #36]	; (8006dcc <HAL_RCC_ClockConfig+0x1c4>)
 8006da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fc fa44 	bl	800323c <HAL_InitTick>

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	40023c00 	.word	0x40023c00
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	080093bc 	.word	0x080093bc
 8006dcc:	20000004 	.word	0x20000004
 8006dd0:	20000008 	.word	0x20000008

08006dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dd8:	b094      	sub	sp, #80	; 0x50
 8006dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	647b      	str	r3, [r7, #68]	; 0x44
 8006de0:	2300      	movs	r3, #0
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de4:	2300      	movs	r3, #0
 8006de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dec:	4b79      	ldr	r3, [pc, #484]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 030c 	and.w	r3, r3, #12
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d00d      	beq.n	8006e14 <HAL_RCC_GetSysClockFreq+0x40>
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	f200 80e1 	bhi.w	8006fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <HAL_RCC_GetSysClockFreq+0x34>
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d003      	beq.n	8006e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8006e06:	e0db      	b.n	8006fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e08:	4b73      	ldr	r3, [pc, #460]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006e0c:	e0db      	b.n	8006fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e0e:	4b73      	ldr	r3, [pc, #460]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8006e10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e12:	e0d8      	b.n	8006fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e14:	4b6f      	ldr	r3, [pc, #444]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e1e:	4b6d      	ldr	r3, [pc, #436]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d063      	beq.n	8006ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e2a:	4b6a      	ldr	r3, [pc, #424]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	099b      	lsrs	r3, r3, #6
 8006e30:	2200      	movs	r2, #0
 8006e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e3e:	2300      	movs	r3, #0
 8006e40:	637b      	str	r3, [r7, #52]	; 0x34
 8006e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e46:	4622      	mov	r2, r4
 8006e48:	462b      	mov	r3, r5
 8006e4a:	f04f 0000 	mov.w	r0, #0
 8006e4e:	f04f 0100 	mov.w	r1, #0
 8006e52:	0159      	lsls	r1, r3, #5
 8006e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e58:	0150      	lsls	r0, r2, #5
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4621      	mov	r1, r4
 8006e60:	1a51      	subs	r1, r2, r1
 8006e62:	6139      	str	r1, [r7, #16]
 8006e64:	4629      	mov	r1, r5
 8006e66:	eb63 0301 	sbc.w	r3, r3, r1
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e78:	4659      	mov	r1, fp
 8006e7a:	018b      	lsls	r3, r1, #6
 8006e7c:	4651      	mov	r1, sl
 8006e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e82:	4651      	mov	r1, sl
 8006e84:	018a      	lsls	r2, r1, #6
 8006e86:	4651      	mov	r1, sl
 8006e88:	ebb2 0801 	subs.w	r8, r2, r1
 8006e8c:	4659      	mov	r1, fp
 8006e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8006e92:	f04f 0200 	mov.w	r2, #0
 8006e96:	f04f 0300 	mov.w	r3, #0
 8006e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ea6:	4690      	mov	r8, r2
 8006ea8:	4699      	mov	r9, r3
 8006eaa:	4623      	mov	r3, r4
 8006eac:	eb18 0303 	adds.w	r3, r8, r3
 8006eb0:	60bb      	str	r3, [r7, #8]
 8006eb2:	462b      	mov	r3, r5
 8006eb4:	eb49 0303 	adc.w	r3, r9, r3
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	f04f 0200 	mov.w	r2, #0
 8006ebe:	f04f 0300 	mov.w	r3, #0
 8006ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	024b      	lsls	r3, r1, #9
 8006eca:	4621      	mov	r1, r4
 8006ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	024a      	lsls	r2, r1, #9
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eda:	2200      	movs	r2, #0
 8006edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ee4:	f7f9 f976 	bl	80001d4 <__aeabi_uldivmod>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4613      	mov	r3, r2
 8006eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef0:	e058      	b.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ef2:	4b38      	ldr	r3, [pc, #224]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	099b      	lsrs	r3, r3, #6
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	4611      	mov	r1, r2
 8006efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f02:	623b      	str	r3, [r7, #32]
 8006f04:	2300      	movs	r3, #0
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
 8006f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	464b      	mov	r3, r9
 8006f10:	f04f 0000 	mov.w	r0, #0
 8006f14:	f04f 0100 	mov.w	r1, #0
 8006f18:	0159      	lsls	r1, r3, #5
 8006f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f1e:	0150      	lsls	r0, r2, #5
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4641      	mov	r1, r8
 8006f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	f04f 0300 	mov.w	r3, #0
 8006f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f44:	ebb2 040a 	subs.w	r4, r2, sl
 8006f48:	eb63 050b 	sbc.w	r5, r3, fp
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	00eb      	lsls	r3, r5, #3
 8006f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f5a:	00e2      	lsls	r2, r4, #3
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	461d      	mov	r5, r3
 8006f60:	4643      	mov	r3, r8
 8006f62:	18e3      	adds	r3, r4, r3
 8006f64:	603b      	str	r3, [r7, #0]
 8006f66:	464b      	mov	r3, r9
 8006f68:	eb45 0303 	adc.w	r3, r5, r3
 8006f6c:	607b      	str	r3, [r7, #4]
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f04f 0300 	mov.w	r3, #0
 8006f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	028b      	lsls	r3, r1, #10
 8006f7e:	4621      	mov	r1, r4
 8006f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f84:	4621      	mov	r1, r4
 8006f86:	028a      	lsls	r2, r1, #10
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8e:	2200      	movs	r2, #0
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	61fa      	str	r2, [r7, #28]
 8006f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f98:	f7f9 f91c 	bl	80001d4 <__aeabi_uldivmod>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	0c1b      	lsrs	r3, r3, #16
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	3301      	adds	r3, #1
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fbe:	e002      	b.n	8006fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3750      	adds	r7, #80	; 0x50
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	00f42400 	.word	0x00f42400
 8006fdc:	007a1200 	.word	0x007a1200

08006fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fe4:	4b03      	ldr	r3, [pc, #12]	; (8006ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000004 	.word	0x20000004

08006ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ffc:	f7ff fff0 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 8007000:	4602      	mov	r2, r0
 8007002:	4b05      	ldr	r3, [pc, #20]	; (8007018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	0a9b      	lsrs	r3, r3, #10
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	4903      	ldr	r1, [pc, #12]	; (800701c <HAL_RCC_GetPCLK1Freq+0x24>)
 800700e:	5ccb      	ldrb	r3, [r1, r3]
 8007010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007014:	4618      	mov	r0, r3
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40023800 	.word	0x40023800
 800701c:	080093cc 	.word	0x080093cc

08007020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007024:	f7ff ffdc 	bl	8006fe0 <HAL_RCC_GetHCLKFreq>
 8007028:	4602      	mov	r2, r0
 800702a:	4b05      	ldr	r3, [pc, #20]	; (8007040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	0b5b      	lsrs	r3, r3, #13
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	4903      	ldr	r1, [pc, #12]	; (8007044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007036:	5ccb      	ldrb	r3, [r1, r3]
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800703c:	4618      	mov	r0, r3
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40023800 	.word	0x40023800
 8007044:	080093cc 	.word	0x080093cc

08007048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e041      	b.n	80070de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fb ff24 	bl	8002ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f000 fcae 	bl	80079e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d001      	beq.n	8007100 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e03c      	b.n	800717a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a1e      	ldr	r2, [pc, #120]	; (8007188 <HAL_TIM_Base_Start+0xa0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d018      	beq.n	8007144 <HAL_TIM_Base_Start+0x5c>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711a:	d013      	beq.n	8007144 <HAL_TIM_Base_Start+0x5c>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a1a      	ldr	r2, [pc, #104]	; (800718c <HAL_TIM_Base_Start+0xa4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00e      	beq.n	8007144 <HAL_TIM_Base_Start+0x5c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a19      	ldr	r2, [pc, #100]	; (8007190 <HAL_TIM_Base_Start+0xa8>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d009      	beq.n	8007144 <HAL_TIM_Base_Start+0x5c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a17      	ldr	r2, [pc, #92]	; (8007194 <HAL_TIM_Base_Start+0xac>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d004      	beq.n	8007144 <HAL_TIM_Base_Start+0x5c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a16      	ldr	r2, [pc, #88]	; (8007198 <HAL_TIM_Base_Start+0xb0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d111      	bne.n	8007168 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b06      	cmp	r3, #6
 8007154:	d010      	beq.n	8007178 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0201 	orr.w	r2, r2, #1
 8007164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007166:	e007      	b.n	8007178 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40010000 	.word	0x40010000
 800718c:	40000400 	.word	0x40000400
 8007190:	40000800 	.word	0x40000800
 8007194:	40000c00 	.word	0x40000c00
 8007198:	40014000 	.word	0x40014000

0800719c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d001      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e044      	b.n	800723e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0201 	orr.w	r2, r2, #1
 80071ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1e      	ldr	r2, [pc, #120]	; (800724c <HAL_TIM_Base_Start_IT+0xb0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d018      	beq.n	8007208 <HAL_TIM_Base_Start_IT+0x6c>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071de:	d013      	beq.n	8007208 <HAL_TIM_Base_Start_IT+0x6c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a1a      	ldr	r2, [pc, #104]	; (8007250 <HAL_TIM_Base_Start_IT+0xb4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00e      	beq.n	8007208 <HAL_TIM_Base_Start_IT+0x6c>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a19      	ldr	r2, [pc, #100]	; (8007254 <HAL_TIM_Base_Start_IT+0xb8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d009      	beq.n	8007208 <HAL_TIM_Base_Start_IT+0x6c>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a17      	ldr	r2, [pc, #92]	; (8007258 <HAL_TIM_Base_Start_IT+0xbc>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_TIM_Base_Start_IT+0x6c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a16      	ldr	r2, [pc, #88]	; (800725c <HAL_TIM_Base_Start_IT+0xc0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d111      	bne.n	800722c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b06      	cmp	r3, #6
 8007218:	d010      	beq.n	800723c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f042 0201 	orr.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722a:	e007      	b.n	800723c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0201 	orr.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40010000 	.word	0x40010000
 8007250:	40000400 	.word	0x40000400
 8007254:	40000800 	.word	0x40000800
 8007258:	40000c00 	.word	0x40000c00
 800725c:	40014000 	.word	0x40014000

08007260 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e041      	b.n	80072f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d106      	bne.n	800728c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f839 	bl	80072fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f000 fba2 	bl	80079e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
	...

08007314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <HAL_TIM_PWM_Start+0x24>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b01      	cmp	r3, #1
 800732e:	bf14      	ite	ne
 8007330:	2301      	movne	r3, #1
 8007332:	2300      	moveq	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	e022      	b.n	800737e <HAL_TIM_PWM_Start+0x6a>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b04      	cmp	r3, #4
 800733c:	d109      	bne.n	8007352 <HAL_TIM_PWM_Start+0x3e>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b01      	cmp	r3, #1
 8007348:	bf14      	ite	ne
 800734a:	2301      	movne	r3, #1
 800734c:	2300      	moveq	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	e015      	b.n	800737e <HAL_TIM_PWM_Start+0x6a>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d109      	bne.n	800736c <HAL_TIM_PWM_Start+0x58>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	bf14      	ite	ne
 8007364:	2301      	movne	r3, #1
 8007366:	2300      	moveq	r3, #0
 8007368:	b2db      	uxtb	r3, r3
 800736a:	e008      	b.n	800737e <HAL_TIM_PWM_Start+0x6a>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b01      	cmp	r3, #1
 8007376:	bf14      	ite	ne
 8007378:	2301      	movne	r3, #1
 800737a:	2300      	moveq	r3, #0
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e068      	b.n	8007458 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d104      	bne.n	8007396 <HAL_TIM_PWM_Start+0x82>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007394:	e013      	b.n	80073be <HAL_TIM_PWM_Start+0xaa>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b04      	cmp	r3, #4
 800739a:	d104      	bne.n	80073a6 <HAL_TIM_PWM_Start+0x92>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073a4:	e00b      	b.n	80073be <HAL_TIM_PWM_Start+0xaa>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d104      	bne.n	80073b6 <HAL_TIM_PWM_Start+0xa2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073b4:	e003      	b.n	80073be <HAL_TIM_PWM_Start+0xaa>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2202      	movs	r2, #2
 80073ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2201      	movs	r2, #1
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fdb4 	bl	8007f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a23      	ldr	r2, [pc, #140]	; (8007460 <HAL_TIM_PWM_Start+0x14c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d107      	bne.n	80073e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1d      	ldr	r2, [pc, #116]	; (8007460 <HAL_TIM_PWM_Start+0x14c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d018      	beq.n	8007422 <HAL_TIM_PWM_Start+0x10e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f8:	d013      	beq.n	8007422 <HAL_TIM_PWM_Start+0x10e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a19      	ldr	r2, [pc, #100]	; (8007464 <HAL_TIM_PWM_Start+0x150>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00e      	beq.n	8007422 <HAL_TIM_PWM_Start+0x10e>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a17      	ldr	r2, [pc, #92]	; (8007468 <HAL_TIM_PWM_Start+0x154>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d009      	beq.n	8007422 <HAL_TIM_PWM_Start+0x10e>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a16      	ldr	r2, [pc, #88]	; (800746c <HAL_TIM_PWM_Start+0x158>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d004      	beq.n	8007422 <HAL_TIM_PWM_Start+0x10e>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a14      	ldr	r2, [pc, #80]	; (8007470 <HAL_TIM_PWM_Start+0x15c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d111      	bne.n	8007446 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b06      	cmp	r3, #6
 8007432:	d010      	beq.n	8007456 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007444:	e007      	b.n	8007456 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0201 	orr.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40010000 	.word	0x40010000
 8007464:	40000400 	.word	0x40000400
 8007468:	40000800 	.word	0x40000800
 800746c:	40000c00 	.word	0x40000c00
 8007470:	40014000 	.word	0x40014000

08007474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b02      	cmp	r3, #2
 8007488:	d122      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b02      	cmp	r3, #2
 8007496:	d11b      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0202 	mvn.w	r2, #2
 80074a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa77 	bl	80079aa <HAL_TIM_IC_CaptureCallback>
 80074bc:	e005      	b.n	80074ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa69 	bl	8007996 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fa7a 	bl	80079be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d122      	bne.n	8007524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d11b      	bne.n	8007524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0204 	mvn.w	r2, #4
 80074f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa4d 	bl	80079aa <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa3f 	bl	8007996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fa50 	bl	80079be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0308 	and.w	r3, r3, #8
 800752e:	2b08      	cmp	r3, #8
 8007530:	d122      	bne.n	8007578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b08      	cmp	r3, #8
 800753e:	d11b      	bne.n	8007578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0208 	mvn.w	r2, #8
 8007548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2204      	movs	r2, #4
 800754e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa23 	bl	80079aa <HAL_TIM_IC_CaptureCallback>
 8007564:	e005      	b.n	8007572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa15 	bl	8007996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fa26 	bl	80079be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0310 	and.w	r3, r3, #16
 8007582:	2b10      	cmp	r3, #16
 8007584:	d122      	bne.n	80075cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	2b10      	cmp	r3, #16
 8007592:	d11b      	bne.n	80075cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0210 	mvn.w	r2, #16
 800759c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2208      	movs	r2, #8
 80075a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9f9 	bl	80079aa <HAL_TIM_IC_CaptureCallback>
 80075b8:	e005      	b.n	80075c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9eb 	bl	8007996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f9fc 	bl	80079be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d10e      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d107      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0201 	mvn.w	r2, #1
 80075f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7f8 ffd0 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007602:	2b80      	cmp	r3, #128	; 0x80
 8007604:	d10e      	bne.n	8007624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d107      	bne.n	8007624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800761c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fd26 	bl	8008070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762e:	2b40      	cmp	r3, #64	; 0x40
 8007630:	d10e      	bne.n	8007650 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763c:	2b40      	cmp	r3, #64	; 0x40
 800763e:	d107      	bne.n	8007650 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9c1 	bl	80079d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b20      	cmp	r3, #32
 800765c:	d10e      	bne.n	800767c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b20      	cmp	r3, #32
 800766a:	d107      	bne.n	800767c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f06f 0220 	mvn.w	r2, #32
 8007674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fcf0 	bl	800805c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800769e:	2302      	movs	r3, #2
 80076a0:	e0ae      	b.n	8007800 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b0c      	cmp	r3, #12
 80076ae:	f200 809f 	bhi.w	80077f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076ed 	.word	0x080076ed
 80076bc:	080077f1 	.word	0x080077f1
 80076c0:	080077f1 	.word	0x080077f1
 80076c4:	080077f1 	.word	0x080077f1
 80076c8:	0800772d 	.word	0x0800772d
 80076cc:	080077f1 	.word	0x080077f1
 80076d0:	080077f1 	.word	0x080077f1
 80076d4:	080077f1 	.word	0x080077f1
 80076d8:	0800776f 	.word	0x0800776f
 80076dc:	080077f1 	.word	0x080077f1
 80076e0:	080077f1 	.word	0x080077f1
 80076e4:	080077f1 	.word	0x080077f1
 80076e8:	080077af 	.word	0x080077af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f9f8 	bl	8007ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0208 	orr.w	r2, r2, #8
 8007706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0204 	bic.w	r2, r2, #4
 8007716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6999      	ldr	r1, [r3, #24]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	619a      	str	r2, [r3, #24]
      break;
 800772a:	e064      	b.n	80077f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fa3e 	bl	8007bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699a      	ldr	r2, [r3, #24]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6999      	ldr	r1, [r3, #24]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	021a      	lsls	r2, r3, #8
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	619a      	str	r2, [r3, #24]
      break;
 800776c:	e043      	b.n	80077f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fa89 	bl	8007c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 0208 	orr.w	r2, r2, #8
 8007788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0204 	bic.w	r2, r2, #4
 8007798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69d9      	ldr	r1, [r3, #28]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	61da      	str	r2, [r3, #28]
      break;
 80077ac:	e023      	b.n	80077f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 fad3 	bl	8007d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69da      	ldr	r2, [r3, #28]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69d9      	ldr	r1, [r3, #28]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	021a      	lsls	r2, r3, #8
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	61da      	str	r2, [r3, #28]
      break;
 80077ee:	e002      	b.n	80077f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	75fb      	strb	r3, [r7, #23]
      break;
 80077f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_TIM_ConfigClockSource+0x1c>
 8007820:	2302      	movs	r3, #2
 8007822:	e0b4      	b.n	800798e <HAL_TIM_ConfigClockSource+0x186>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800784a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785c:	d03e      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0xd4>
 800785e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007862:	f200 8087 	bhi.w	8007974 <HAL_TIM_ConfigClockSource+0x16c>
 8007866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786a:	f000 8086 	beq.w	800797a <HAL_TIM_ConfigClockSource+0x172>
 800786e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007872:	d87f      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x16c>
 8007874:	2b70      	cmp	r3, #112	; 0x70
 8007876:	d01a      	beq.n	80078ae <HAL_TIM_ConfigClockSource+0xa6>
 8007878:	2b70      	cmp	r3, #112	; 0x70
 800787a:	d87b      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x16c>
 800787c:	2b60      	cmp	r3, #96	; 0x60
 800787e:	d050      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x11a>
 8007880:	2b60      	cmp	r3, #96	; 0x60
 8007882:	d877      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x16c>
 8007884:	2b50      	cmp	r3, #80	; 0x50
 8007886:	d03c      	beq.n	8007902 <HAL_TIM_ConfigClockSource+0xfa>
 8007888:	2b50      	cmp	r3, #80	; 0x50
 800788a:	d873      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x16c>
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d058      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x13a>
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	d86f      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x16c>
 8007894:	2b30      	cmp	r3, #48	; 0x30
 8007896:	d064      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x15a>
 8007898:	2b30      	cmp	r3, #48	; 0x30
 800789a:	d86b      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x16c>
 800789c:	2b20      	cmp	r3, #32
 800789e:	d060      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x15a>
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d867      	bhi.n	8007974 <HAL_TIM_ConfigClockSource+0x16c>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d05c      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x15a>
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d05a      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x15a>
 80078ac:	e062      	b.n	8007974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6899      	ldr	r1, [r3, #8]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f000 fb19 	bl	8007ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	609a      	str	r2, [r3, #8]
      break;
 80078da:	e04f      	b.n	800797c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	6899      	ldr	r1, [r3, #8]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f000 fb02 	bl	8007ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078fe:	609a      	str	r2, [r3, #8]
      break;
 8007900:	e03c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	6859      	ldr	r1, [r3, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	461a      	mov	r2, r3
 8007910:	f000 fa76 	bl	8007e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2150      	movs	r1, #80	; 0x50
 800791a:	4618      	mov	r0, r3
 800791c:	f000 facf 	bl	8007ebe <TIM_ITRx_SetConfig>
      break;
 8007920:	e02c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6859      	ldr	r1, [r3, #4]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	461a      	mov	r2, r3
 8007930:	f000 fa95 	bl	8007e5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2160      	movs	r1, #96	; 0x60
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fabf 	bl	8007ebe <TIM_ITRx_SetConfig>
      break;
 8007940:	e01c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6859      	ldr	r1, [r3, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	461a      	mov	r2, r3
 8007950:	f000 fa56 	bl	8007e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2140      	movs	r1, #64	; 0x40
 800795a:	4618      	mov	r0, r3
 800795c:	f000 faaf 	bl	8007ebe <TIM_ITRx_SetConfig>
      break;
 8007960:	e00c      	b.n	800797c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f000 faa6 	bl	8007ebe <TIM_ITRx_SetConfig>
      break;
 8007972:	e003      	b.n	800797c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	73fb      	strb	r3, [r7, #15]
      break;
 8007978:	e000      	b.n	800797c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800797a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a34      	ldr	r2, [pc, #208]	; (8007acc <TIM_Base_SetConfig+0xe4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00f      	beq.n	8007a20 <TIM_Base_SetConfig+0x38>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a06:	d00b      	beq.n	8007a20 <TIM_Base_SetConfig+0x38>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a31      	ldr	r2, [pc, #196]	; (8007ad0 <TIM_Base_SetConfig+0xe8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d007      	beq.n	8007a20 <TIM_Base_SetConfig+0x38>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a30      	ldr	r2, [pc, #192]	; (8007ad4 <TIM_Base_SetConfig+0xec>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d003      	beq.n	8007a20 <TIM_Base_SetConfig+0x38>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a2f      	ldr	r2, [pc, #188]	; (8007ad8 <TIM_Base_SetConfig+0xf0>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d108      	bne.n	8007a32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a25      	ldr	r2, [pc, #148]	; (8007acc <TIM_Base_SetConfig+0xe4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d01b      	beq.n	8007a72 <TIM_Base_SetConfig+0x8a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a40:	d017      	beq.n	8007a72 <TIM_Base_SetConfig+0x8a>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a22      	ldr	r2, [pc, #136]	; (8007ad0 <TIM_Base_SetConfig+0xe8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d013      	beq.n	8007a72 <TIM_Base_SetConfig+0x8a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a21      	ldr	r2, [pc, #132]	; (8007ad4 <TIM_Base_SetConfig+0xec>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00f      	beq.n	8007a72 <TIM_Base_SetConfig+0x8a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a20      	ldr	r2, [pc, #128]	; (8007ad8 <TIM_Base_SetConfig+0xf0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00b      	beq.n	8007a72 <TIM_Base_SetConfig+0x8a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a1f      	ldr	r2, [pc, #124]	; (8007adc <TIM_Base_SetConfig+0xf4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d007      	beq.n	8007a72 <TIM_Base_SetConfig+0x8a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a1e      	ldr	r2, [pc, #120]	; (8007ae0 <TIM_Base_SetConfig+0xf8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d003      	beq.n	8007a72 <TIM_Base_SetConfig+0x8a>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <TIM_Base_SetConfig+0xfc>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d108      	bne.n	8007a84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a08      	ldr	r2, [pc, #32]	; (8007acc <TIM_Base_SetConfig+0xe4>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d103      	bne.n	8007ab8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	615a      	str	r2, [r3, #20]
}
 8007abe:	bf00      	nop
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40010000 	.word	0x40010000
 8007ad0:	40000400 	.word	0x40000400
 8007ad4:	40000800 	.word	0x40000800
 8007ad8:	40000c00 	.word	0x40000c00
 8007adc:	40014000 	.word	0x40014000
 8007ae0:	40014400 	.word	0x40014400
 8007ae4:	40014800 	.word	0x40014800

08007ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f023 0201 	bic.w	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0303 	bic.w	r3, r3, #3
 8007b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f023 0302 	bic.w	r3, r3, #2
 8007b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a1c      	ldr	r2, [pc, #112]	; (8007bb0 <TIM_OC1_SetConfig+0xc8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d10c      	bne.n	8007b5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f023 0308 	bic.w	r3, r3, #8
 8007b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f023 0304 	bic.w	r3, r3, #4
 8007b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a13      	ldr	r2, [pc, #76]	; (8007bb0 <TIM_OC1_SetConfig+0xc8>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d111      	bne.n	8007b8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	621a      	str	r2, [r3, #32]
}
 8007ba4:	bf00      	nop
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	40010000 	.word	0x40010000

08007bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0210 	bic.w	r2, r3, #16
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 0320 	bic.w	r3, r3, #32
 8007bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	011b      	lsls	r3, r3, #4
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a1e      	ldr	r2, [pc, #120]	; (8007c88 <TIM_OC2_SetConfig+0xd4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d10d      	bne.n	8007c30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a15      	ldr	r2, [pc, #84]	; (8007c88 <TIM_OC2_SetConfig+0xd4>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d113      	bne.n	8007c60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	621a      	str	r2, [r3, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	40010000 	.word	0x40010000

08007c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0303 	bic.w	r3, r3, #3
 8007cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a1d      	ldr	r2, [pc, #116]	; (8007d5c <TIM_OC3_SetConfig+0xd0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d10d      	bne.n	8007d06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a14      	ldr	r2, [pc, #80]	; (8007d5c <TIM_OC3_SetConfig+0xd0>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d113      	bne.n	8007d36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	621a      	str	r2, [r3, #32]
}
 8007d50:	bf00      	nop
 8007d52:	371c      	adds	r7, #28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	40010000 	.word	0x40010000

08007d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	031b      	lsls	r3, r3, #12
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a10      	ldr	r2, [pc, #64]	; (8007dfc <TIM_OC4_SetConfig+0x9c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d109      	bne.n	8007dd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	019b      	lsls	r3, r3, #6
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40010000 	.word	0x40010000

08007e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	f023 0201 	bic.w	r2, r3, #1
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f023 030a 	bic.w	r3, r3, #10
 8007e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	621a      	str	r2, [r3, #32]
}
 8007e52:	bf00      	nop
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b087      	sub	sp, #28
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	60f8      	str	r0, [r7, #12]
 8007e66:	60b9      	str	r1, [r7, #8]
 8007e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	f023 0210 	bic.w	r2, r3, #16
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	031b      	lsls	r3, r3, #12
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	621a      	str	r2, [r3, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b085      	sub	sp, #20
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	f043 0307 	orr.w	r3, r3, #7
 8007ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	609a      	str	r2, [r3, #8]
}
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	021a      	lsls	r2, r3, #8
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	431a      	orrs	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	609a      	str	r2, [r3, #8]
}
 8007f28:	bf00      	nop
 8007f2a:	371c      	adds	r7, #28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f003 031f 	and.w	r3, r3, #31
 8007f46:	2201      	movs	r2, #1
 8007f48:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6a1a      	ldr	r2, [r3, #32]
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	43db      	mvns	r3, r3
 8007f56:	401a      	ands	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a1a      	ldr	r2, [r3, #32]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f003 031f 	and.w	r3, r3, #31
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	621a      	str	r2, [r3, #32]
}
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e050      	b.n	800803a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a1c      	ldr	r2, [pc, #112]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d018      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe4:	d013      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a18      	ldr	r2, [pc, #96]	; (800804c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00e      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a16      	ldr	r2, [pc, #88]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d009      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a15      	ldr	r2, [pc, #84]	; (8008054 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d004      	beq.n	800800e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a13      	ldr	r2, [pc, #76]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d10c      	bne.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	4313      	orrs	r3, r2
 800801e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40010000 	.word	0x40010000
 800804c:	40000400 	.word	0x40000400
 8008050:	40000800 	.word	0x40000800
 8008054:	40000c00 	.word	0x40000c00
 8008058:	40014000 	.word	0x40014000

0800805c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e03f      	b.n	8008116 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fa ff7e 	bl	8002fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2224      	movs	r2, #36	; 0x24
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fdb3 	bl	8008c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695a      	ldr	r2, [r3, #20]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2220      	movs	r2, #32
 8008110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	4613      	mov	r3, r2
 800812a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b20      	cmp	r3, #32
 8008136:	d11d      	bne.n	8008174 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <HAL_UART_Receive_IT+0x26>
 800813e:	88fb      	ldrh	r3, [r7, #6]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e016      	b.n	8008176 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <HAL_UART_Receive_IT+0x38>
 8008152:	2302      	movs	r3, #2
 8008154:	e00f      	b.n	8008176 <HAL_UART_Receive_IT+0x58>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008164:	88fb      	ldrh	r3, [r7, #6]
 8008166:	461a      	mov	r2, r3
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fb72 	bl	8008854 <UART_Start_Receive_IT>
 8008170:	4603      	mov	r3, r0
 8008172:	e000      	b.n	8008176 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b09a      	sub	sp, #104	; 0x68
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	330c      	adds	r3, #12
 800818e:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800819a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800819e:	667b      	str	r3, [r7, #100]	; 0x64
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081a8:	657a      	str	r2, [r7, #84]	; 0x54
 80081aa:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e5      	bne.n	8008188 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3314      	adds	r3, #20
 80081c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	e853 3f00 	ldrex	r3, [r3]
 80081ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	f023 0301 	bic.w	r3, r3, #1
 80081d2:	663b      	str	r3, [r7, #96]	; 0x60
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3314      	adds	r3, #20
 80081da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081dc:	643a      	str	r2, [r7, #64]	; 0x40
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081e4:	e841 2300 	strex	r3, r2, [r1]
 80081e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e5      	bne.n	80081bc <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d119      	bne.n	800822c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	330c      	adds	r3, #12
 80081fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	e853 3f00 	ldrex	r3, [r3]
 8008206:	61fb      	str	r3, [r7, #28]
   return(result);
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	f023 0310 	bic.w	r3, r3, #16
 800820e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	330c      	adds	r3, #12
 8008216:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008218:	62fa      	str	r2, [r7, #44]	; 0x2c
 800821a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800821e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008220:	e841 2300 	strex	r3, r2, [r1]
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e5      	bne.n	80081f8 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008236:	2b40      	cmp	r3, #64	; 0x40
 8008238:	d13f      	bne.n	80082ba <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3314      	adds	r3, #20
 8008240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	60bb      	str	r3, [r7, #8]
   return(result);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008250:	65bb      	str	r3, [r7, #88]	; 0x58
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3314      	adds	r3, #20
 8008258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800825a:	61ba      	str	r2, [r7, #24]
 800825c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6979      	ldr	r1, [r7, #20]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	613b      	str	r3, [r7, #16]
   return(result);
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	4a19      	ldr	r2, [pc, #100]	; (80082e0 <HAL_UART_AbortReceive_IT+0x160>)
 800827c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	4618      	mov	r0, r3
 8008284:	f7fb ffbe 	bl	8004204 <HAL_DMA_Abort_IT>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d022      	beq.n	80082d4 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	e01a      	b.n	80082d4 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fab8 	bl	8008828 <HAL_UART_AbortReceiveCpltCallback>
 80082b8:	e00c      	b.n	80082d4 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 faaa 	bl	8008828 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3768      	adds	r7, #104	; 0x68
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	080089bf 	.word	0x080089bf

080082e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b0ba      	sub	sp, #232	; 0xe8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800830a:	2300      	movs	r3, #0
 800830c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008310:	2300      	movs	r3, #0
 8008312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10f      	bne.n	800834a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800832a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <HAL_UART_IRQHandler+0x66>
 8008336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fbbb 	bl	8008abe <UART_Receive_IT>
      return;
 8008348:	e256      	b.n	80087f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800834a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 80de 	beq.w	8008510 <HAL_UART_IRQHandler+0x22c>
 8008354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008364:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 80d1 	beq.w	8008510 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800836e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00b      	beq.n	8008392 <HAL_UART_IRQHandler+0xae>
 800837a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800837e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008382:	2b00      	cmp	r3, #0
 8008384:	d005      	beq.n	8008392 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	f043 0201 	orr.w	r2, r3, #1
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00b      	beq.n	80083b6 <HAL_UART_IRQHandler+0xd2>
 800839e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d005      	beq.n	80083b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	f043 0202 	orr.w	r2, r3, #2
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00b      	beq.n	80083da <HAL_UART_IRQHandler+0xf6>
 80083c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d005      	beq.n	80083da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	f043 0204 	orr.w	r2, r3, #4
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80083da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d011      	beq.n	800840a <HAL_UART_IRQHandler+0x126>
 80083e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d105      	bne.n	80083fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f043 0208 	orr.w	r2, r3, #8
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 81ed 	beq.w	80087ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008418:	f003 0320 	and.w	r3, r3, #32
 800841c:	2b00      	cmp	r3, #0
 800841e:	d008      	beq.n	8008432 <HAL_UART_IRQHandler+0x14e>
 8008420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fb46 	bl	8008abe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843c:	2b40      	cmp	r3, #64	; 0x40
 800843e:	bf0c      	ite	eq
 8008440:	2301      	moveq	r3, #1
 8008442:	2300      	movne	r3, #0
 8008444:	b2db      	uxtb	r3, r3
 8008446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f003 0308 	and.w	r3, r3, #8
 8008452:	2b00      	cmp	r3, #0
 8008454:	d103      	bne.n	800845e <HAL_UART_IRQHandler+0x17a>
 8008456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800845a:	2b00      	cmp	r3, #0
 800845c:	d04f      	beq.n	80084fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fa36 	bl	80088d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	d141      	bne.n	80084f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3314      	adds	r3, #20
 8008478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800848c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3314      	adds	r3, #20
 800849a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800849e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80084b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1d9      	bne.n	8008472 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d013      	beq.n	80084ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	4a7d      	ldr	r2, [pc, #500]	; (80086c0 <HAL_UART_IRQHandler+0x3dc>)
 80084cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fb fe96 	bl	8004204 <HAL_DMA_Abort_IT>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d016      	beq.n	800850c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ec:	e00e      	b.n	800850c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f990 	bl	8008814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f4:	e00a      	b.n	800850c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f98c 	bl	8008814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fc:	e006      	b.n	800850c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f988 	bl	8008814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800850a:	e170      	b.n	80087ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800850c:	bf00      	nop
    return;
 800850e:	e16e      	b.n	80087ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008514:	2b01      	cmp	r3, #1
 8008516:	f040 814a 	bne.w	80087ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800851a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851e:	f003 0310 	and.w	r3, r3, #16
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 8143 	beq.w	80087ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800852c:	f003 0310 	and.w	r3, r3, #16
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 813c 	beq.w	80087ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008536:	2300      	movs	r3, #0
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	60bb      	str	r3, [r7, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	60bb      	str	r3, [r7, #8]
 800854a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008556:	2b40      	cmp	r3, #64	; 0x40
 8008558:	f040 80b4 	bne.w	80086c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008568:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 8140 	beq.w	80087f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800857a:	429a      	cmp	r2, r3
 800857c:	f080 8139 	bcs.w	80087f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008586:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008592:	f000 8088 	beq.w	80086a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	330c      	adds	r3, #12
 800859c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	330c      	adds	r3, #12
 80085be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80085c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1d9      	bne.n	8008596 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3314      	adds	r3, #20
 80085e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3314      	adds	r3, #20
 8008602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800860a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800860e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008612:	e841 2300 	strex	r3, r2, [r1]
 8008616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1e1      	bne.n	80085e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3314      	adds	r3, #20
 8008624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800862e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3314      	adds	r3, #20
 800863e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800864a:	e841 2300 	strex	r3, r2, [r1]
 800864e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e3      	bne.n	800861e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2220      	movs	r2, #32
 800865a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	330c      	adds	r3, #12
 800866a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008676:	f023 0310 	bic.w	r3, r3, #16
 800867a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	330c      	adds	r3, #12
 8008684:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008688:	65ba      	str	r2, [r7, #88]	; 0x58
 800868a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800868e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e3      	bne.n	8008664 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fb fd3f 	bl	8004124 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f8c0 	bl	800883c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086bc:	e099      	b.n	80087f2 <HAL_UART_IRQHandler+0x50e>
 80086be:	bf00      	nop
 80086c0:	08008997 	.word	0x08008997
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 808b 	beq.w	80087f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80086e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8086 	beq.w	80087f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	330c      	adds	r3, #12
 80086f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	330c      	adds	r3, #12
 800870a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800870e:	647a      	str	r2, [r7, #68]	; 0x44
 8008710:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800871c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e3      	bne.n	80086ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3314      	adds	r3, #20
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	623b      	str	r3, [r7, #32]
   return(result);
 8008732:	6a3b      	ldr	r3, [r7, #32]
 8008734:	f023 0301 	bic.w	r3, r3, #1
 8008738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3314      	adds	r3, #20
 8008742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008746:	633a      	str	r2, [r7, #48]	; 0x30
 8008748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800874c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e3      	bne.n	8008722 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2220      	movs	r2, #32
 800875e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	330c      	adds	r3, #12
 800876e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	60fb      	str	r3, [r7, #12]
   return(result);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0310 	bic.w	r3, r3, #16
 800877e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	330c      	adds	r3, #12
 8008788:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800878c:	61fa      	str	r2, [r7, #28]
 800878e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	69b9      	ldr	r1, [r7, #24]
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	617b      	str	r3, [r7, #20]
   return(result);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e3      	bne.n	8008768 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f848 	bl	800883c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087ac:	e023      	b.n	80087f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d009      	beq.n	80087ce <HAL_UART_IRQHandler+0x4ea>
 80087ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f911 	bl	80089ee <UART_Transmit_IT>
    return;
 80087cc:	e014      	b.n	80087f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00e      	beq.n	80087f8 <HAL_UART_IRQHandler+0x514>
 80087da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d008      	beq.n	80087f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f951 	bl	8008a8e <UART_EndTransmit_IT>
    return;
 80087ec:	e004      	b.n	80087f8 <HAL_UART_IRQHandler+0x514>
    return;
 80087ee:	bf00      	nop
 80087f0:	e002      	b.n	80087f8 <HAL_UART_IRQHandler+0x514>
      return;
 80087f2:	bf00      	nop
 80087f4:	e000      	b.n	80087f8 <HAL_UART_IRQHandler+0x514>
      return;
 80087f6:	bf00      	nop
  }
}
 80087f8:	37e8      	adds	r7, #232	; 0xe8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop

08008800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	4613      	mov	r3, r2
 8008860:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	88fa      	ldrh	r2, [r7, #6]
 800886c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	88fa      	ldrh	r2, [r7, #6]
 8008872:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2222      	movs	r2, #34	; 0x22
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d007      	beq.n	80088a2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	695a      	ldr	r2, [r3, #20]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f042 0201 	orr.w	r2, r2, #1
 80088b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68da      	ldr	r2, [r3, #12]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0220 	orr.w	r2, r2, #32
 80088c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b095      	sub	sp, #84	; 0x54
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	330c      	adds	r3, #12
 80088de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088f8:	643a      	str	r2, [r7, #64]	; 0x40
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e5      	bne.n	80088d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3314      	adds	r3, #20
 8008912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	61fb      	str	r3, [r7, #28]
   return(result);
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f023 0301 	bic.w	r3, r3, #1
 8008922:	64bb      	str	r3, [r7, #72]	; 0x48
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3314      	adds	r3, #20
 800892a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800892c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e5      	bne.n	800890c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	2b01      	cmp	r3, #1
 8008946:	d119      	bne.n	800897c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	330c      	adds	r3, #12
 800894e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	60bb      	str	r3, [r7, #8]
   return(result);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f023 0310 	bic.w	r3, r3, #16
 800895e:	647b      	str	r3, [r7, #68]	; 0x44
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	330c      	adds	r3, #12
 8008966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008968:	61ba      	str	r2, [r7, #24]
 800896a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6979      	ldr	r1, [r7, #20]
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	613b      	str	r3, [r7, #16]
   return(result);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e5      	bne.n	8008948 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	631a      	str	r2, [r3, #48]	; 0x30
}
 800898a:	bf00      	nop
 800898c:	3754      	adds	r7, #84	; 0x54
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f7ff ff2f 	bl	8008814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b6:	bf00      	nop
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2220      	movs	r2, #32
 80089d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff ff21 	bl	8008828 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b085      	sub	sp, #20
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b21      	cmp	r3, #33	; 0x21
 8008a00:	d13e      	bne.n	8008a80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0a:	d114      	bne.n	8008a36 <UART_Transmit_IT+0x48>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d110      	bne.n	8008a36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	1c9a      	adds	r2, r3, #2
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	621a      	str	r2, [r3, #32]
 8008a34:	e008      	b.n	8008a48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	1c59      	adds	r1, r3, #1
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6211      	str	r1, [r2, #32]
 8008a40:	781a      	ldrb	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	4619      	mov	r1, r3
 8008a56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10f      	bne.n	8008a7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e000      	b.n	8008a82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a80:	2302      	movs	r3, #2
  }
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff fea6 	bl	8008800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b08c      	sub	sp, #48	; 0x30
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b22      	cmp	r3, #34	; 0x22
 8008ad0:	f040 80ab 	bne.w	8008c2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008adc:	d117      	bne.n	8008b0e <UART_Receive_IT+0x50>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d113      	bne.n	8008b0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b06:	1c9a      	adds	r2, r3, #2
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8008b0c:	e026      	b.n	8008b5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b20:	d007      	beq.n	8008b32 <UART_Receive_IT+0x74>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <UART_Receive_IT+0x82>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d106      	bne.n	8008b40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	701a      	strb	r2, [r3, #0]
 8008b3e:	e008      	b.n	8008b52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	3b01      	subs	r3, #1
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d15a      	bne.n	8008c26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f022 0220 	bic.w	r2, r2, #32
 8008b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	695a      	ldr	r2, [r3, #20]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0201 	bic.w	r2, r2, #1
 8008b9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d135      	bne.n	8008c1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	330c      	adds	r3, #12
 8008bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f023 0310 	bic.w	r3, r3, #16
 8008bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	330c      	adds	r3, #12
 8008bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd6:	623a      	str	r2, [r7, #32]
 8008bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	69f9      	ldr	r1, [r7, #28]
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e5      	bne.n	8008bb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b10      	cmp	r3, #16
 8008bf6:	d10a      	bne.n	8008c0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff fe11 	bl	800883c <HAL_UARTEx_RxEventCallback>
 8008c1a:	e002      	b.n	8008c22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7f7 fc5b 	bl	80004d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	e002      	b.n	8008c2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	e000      	b.n	8008c2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008c2a:	2302      	movs	r3, #2
  }
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3730      	adds	r7, #48	; 0x30
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c38:	b0c0      	sub	sp, #256	; 0x100
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c50:	68d9      	ldr	r1, [r3, #12]
 8008c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	ea40 0301 	orr.w	r3, r0, r1
 8008c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c62:	689a      	ldr	r2, [r3, #8]
 8008c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	431a      	orrs	r2, r3
 8008c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c8c:	f021 010c 	bic.w	r1, r1, #12
 8008c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c9a:	430b      	orrs	r3, r1
 8008c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cae:	6999      	ldr	r1, [r3, #24]
 8008cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	ea40 0301 	orr.w	r3, r0, r1
 8008cba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	4b8f      	ldr	r3, [pc, #572]	; (8008f00 <UART_SetConfig+0x2cc>)
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d005      	beq.n	8008cd4 <UART_SetConfig+0xa0>
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	4b8d      	ldr	r3, [pc, #564]	; (8008f04 <UART_SetConfig+0x2d0>)
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d104      	bne.n	8008cde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cd4:	f7fe f9a4 	bl	8007020 <HAL_RCC_GetPCLK2Freq>
 8008cd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008cdc:	e003      	b.n	8008ce6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cde:	f7fe f98b 	bl	8006ff8 <HAL_RCC_GetPCLK1Freq>
 8008ce2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf0:	f040 810c 	bne.w	8008f0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d06:	4622      	mov	r2, r4
 8008d08:	462b      	mov	r3, r5
 8008d0a:	1891      	adds	r1, r2, r2
 8008d0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d0e:	415b      	adcs	r3, r3
 8008d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d16:	4621      	mov	r1, r4
 8008d18:	eb12 0801 	adds.w	r8, r2, r1
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	eb43 0901 	adc.w	r9, r3, r1
 8008d22:	f04f 0200 	mov.w	r2, #0
 8008d26:	f04f 0300 	mov.w	r3, #0
 8008d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d36:	4690      	mov	r8, r2
 8008d38:	4699      	mov	r9, r3
 8008d3a:	4623      	mov	r3, r4
 8008d3c:	eb18 0303 	adds.w	r3, r8, r3
 8008d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d44:	462b      	mov	r3, r5
 8008d46:	eb49 0303 	adc.w	r3, r9, r3
 8008d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d62:	460b      	mov	r3, r1
 8008d64:	18db      	adds	r3, r3, r3
 8008d66:	653b      	str	r3, [r7, #80]	; 0x50
 8008d68:	4613      	mov	r3, r2
 8008d6a:	eb42 0303 	adc.w	r3, r2, r3
 8008d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d78:	f7f7 fa2c 	bl	80001d4 <__aeabi_uldivmod>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4b61      	ldr	r3, [pc, #388]	; (8008f08 <UART_SetConfig+0x2d4>)
 8008d82:	fba3 2302 	umull	r2, r3, r3, r2
 8008d86:	095b      	lsrs	r3, r3, #5
 8008d88:	011c      	lsls	r4, r3, #4
 8008d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d9c:	4642      	mov	r2, r8
 8008d9e:	464b      	mov	r3, r9
 8008da0:	1891      	adds	r1, r2, r2
 8008da2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008da4:	415b      	adcs	r3, r3
 8008da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008da8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008dac:	4641      	mov	r1, r8
 8008dae:	eb12 0a01 	adds.w	sl, r2, r1
 8008db2:	4649      	mov	r1, r9
 8008db4:	eb43 0b01 	adc.w	fp, r3, r1
 8008db8:	f04f 0200 	mov.w	r2, #0
 8008dbc:	f04f 0300 	mov.w	r3, #0
 8008dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dcc:	4692      	mov	sl, r2
 8008dce:	469b      	mov	fp, r3
 8008dd0:	4643      	mov	r3, r8
 8008dd2:	eb1a 0303 	adds.w	r3, sl, r3
 8008dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dda:	464b      	mov	r3, r9
 8008ddc:	eb4b 0303 	adc.w	r3, fp, r3
 8008de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008df0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	18db      	adds	r3, r3, r3
 8008dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8008dfe:	4613      	mov	r3, r2
 8008e00:	eb42 0303 	adc.w	r3, r2, r3
 8008e04:	647b      	str	r3, [r7, #68]	; 0x44
 8008e06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e0e:	f7f7 f9e1 	bl	80001d4 <__aeabi_uldivmod>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4611      	mov	r1, r2
 8008e18:	4b3b      	ldr	r3, [pc, #236]	; (8008f08 <UART_SetConfig+0x2d4>)
 8008e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	2264      	movs	r2, #100	; 0x64
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
 8008e26:	1acb      	subs	r3, r1, r3
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e2e:	4b36      	ldr	r3, [pc, #216]	; (8008f08 <UART_SetConfig+0x2d4>)
 8008e30:	fba3 2302 	umull	r2, r3, r3, r2
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e3c:	441c      	add	r4, r3
 8008e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e42:	2200      	movs	r2, #0
 8008e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e50:	4642      	mov	r2, r8
 8008e52:	464b      	mov	r3, r9
 8008e54:	1891      	adds	r1, r2, r2
 8008e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e58:	415b      	adcs	r3, r3
 8008e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e60:	4641      	mov	r1, r8
 8008e62:	1851      	adds	r1, r2, r1
 8008e64:	6339      	str	r1, [r7, #48]	; 0x30
 8008e66:	4649      	mov	r1, r9
 8008e68:	414b      	adcs	r3, r1
 8008e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e6c:	f04f 0200 	mov.w	r2, #0
 8008e70:	f04f 0300 	mov.w	r3, #0
 8008e74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e78:	4659      	mov	r1, fp
 8008e7a:	00cb      	lsls	r3, r1, #3
 8008e7c:	4651      	mov	r1, sl
 8008e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e82:	4651      	mov	r1, sl
 8008e84:	00ca      	lsls	r2, r1, #3
 8008e86:	4610      	mov	r0, r2
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4642      	mov	r2, r8
 8008e8e:	189b      	adds	r3, r3, r2
 8008e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e94:	464b      	mov	r3, r9
 8008e96:	460a      	mov	r2, r1
 8008e98:	eb42 0303 	adc.w	r3, r2, r3
 8008e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008eac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	18db      	adds	r3, r3, r3
 8008eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eba:	4613      	mov	r3, r2
 8008ebc:	eb42 0303 	adc.w	r3, r2, r3
 8008ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008eca:	f7f7 f983 	bl	80001d4 <__aeabi_uldivmod>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <UART_SetConfig+0x2d4>)
 8008ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed8:	095b      	lsrs	r3, r3, #5
 8008eda:	2164      	movs	r1, #100	; 0x64
 8008edc:	fb01 f303 	mul.w	r3, r1, r3
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	3332      	adds	r3, #50	; 0x32
 8008ee6:	4a08      	ldr	r2, [pc, #32]	; (8008f08 <UART_SetConfig+0x2d4>)
 8008ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8008eec:	095b      	lsrs	r3, r3, #5
 8008eee:	f003 0207 	and.w	r2, r3, #7
 8008ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4422      	add	r2, r4
 8008efa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008efc:	e105      	b.n	800910a <UART_SetConfig+0x4d6>
 8008efe:	bf00      	nop
 8008f00:	40011000 	.word	0x40011000
 8008f04:	40011400 	.word	0x40011400
 8008f08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f10:	2200      	movs	r2, #0
 8008f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f1e:	4642      	mov	r2, r8
 8008f20:	464b      	mov	r3, r9
 8008f22:	1891      	adds	r1, r2, r2
 8008f24:	6239      	str	r1, [r7, #32]
 8008f26:	415b      	adcs	r3, r3
 8008f28:	627b      	str	r3, [r7, #36]	; 0x24
 8008f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f2e:	4641      	mov	r1, r8
 8008f30:	1854      	adds	r4, r2, r1
 8008f32:	4649      	mov	r1, r9
 8008f34:	eb43 0501 	adc.w	r5, r3, r1
 8008f38:	f04f 0200 	mov.w	r2, #0
 8008f3c:	f04f 0300 	mov.w	r3, #0
 8008f40:	00eb      	lsls	r3, r5, #3
 8008f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f46:	00e2      	lsls	r2, r4, #3
 8008f48:	4614      	mov	r4, r2
 8008f4a:	461d      	mov	r5, r3
 8008f4c:	4643      	mov	r3, r8
 8008f4e:	18e3      	adds	r3, r4, r3
 8008f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f54:	464b      	mov	r3, r9
 8008f56:	eb45 0303 	adc.w	r3, r5, r3
 8008f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f6e:	f04f 0200 	mov.w	r2, #0
 8008f72:	f04f 0300 	mov.w	r3, #0
 8008f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	008b      	lsls	r3, r1, #2
 8008f7e:	4621      	mov	r1, r4
 8008f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f84:	4621      	mov	r1, r4
 8008f86:	008a      	lsls	r2, r1, #2
 8008f88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f8c:	f7f7 f922 	bl	80001d4 <__aeabi_uldivmod>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4b60      	ldr	r3, [pc, #384]	; (8009118 <UART_SetConfig+0x4e4>)
 8008f96:	fba3 2302 	umull	r2, r3, r3, r2
 8008f9a:	095b      	lsrs	r3, r3, #5
 8008f9c:	011c      	lsls	r4, r3, #4
 8008f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008fac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008fb0:	4642      	mov	r2, r8
 8008fb2:	464b      	mov	r3, r9
 8008fb4:	1891      	adds	r1, r2, r2
 8008fb6:	61b9      	str	r1, [r7, #24]
 8008fb8:	415b      	adcs	r3, r3
 8008fba:	61fb      	str	r3, [r7, #28]
 8008fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fc0:	4641      	mov	r1, r8
 8008fc2:	1851      	adds	r1, r2, r1
 8008fc4:	6139      	str	r1, [r7, #16]
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	414b      	adcs	r3, r1
 8008fca:	617b      	str	r3, [r7, #20]
 8008fcc:	f04f 0200 	mov.w	r2, #0
 8008fd0:	f04f 0300 	mov.w	r3, #0
 8008fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fd8:	4659      	mov	r1, fp
 8008fda:	00cb      	lsls	r3, r1, #3
 8008fdc:	4651      	mov	r1, sl
 8008fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fe2:	4651      	mov	r1, sl
 8008fe4:	00ca      	lsls	r2, r1, #3
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4603      	mov	r3, r0
 8008fec:	4642      	mov	r2, r8
 8008fee:	189b      	adds	r3, r3, r2
 8008ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	460a      	mov	r2, r1
 8008ff8:	eb42 0303 	adc.w	r3, r2, r3
 8008ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	67bb      	str	r3, [r7, #120]	; 0x78
 800900a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800900c:	f04f 0200 	mov.w	r2, #0
 8009010:	f04f 0300 	mov.w	r3, #0
 8009014:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009018:	4649      	mov	r1, r9
 800901a:	008b      	lsls	r3, r1, #2
 800901c:	4641      	mov	r1, r8
 800901e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009022:	4641      	mov	r1, r8
 8009024:	008a      	lsls	r2, r1, #2
 8009026:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800902a:	f7f7 f8d3 	bl	80001d4 <__aeabi_uldivmod>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4b39      	ldr	r3, [pc, #228]	; (8009118 <UART_SetConfig+0x4e4>)
 8009034:	fba3 1302 	umull	r1, r3, r3, r2
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	2164      	movs	r1, #100	; 0x64
 800903c:	fb01 f303 	mul.w	r3, r1, r3
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	011b      	lsls	r3, r3, #4
 8009044:	3332      	adds	r3, #50	; 0x32
 8009046:	4a34      	ldr	r2, [pc, #208]	; (8009118 <UART_SetConfig+0x4e4>)
 8009048:	fba2 2303 	umull	r2, r3, r2, r3
 800904c:	095b      	lsrs	r3, r3, #5
 800904e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009052:	441c      	add	r4, r3
 8009054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009058:	2200      	movs	r2, #0
 800905a:	673b      	str	r3, [r7, #112]	; 0x70
 800905c:	677a      	str	r2, [r7, #116]	; 0x74
 800905e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009062:	4642      	mov	r2, r8
 8009064:	464b      	mov	r3, r9
 8009066:	1891      	adds	r1, r2, r2
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	415b      	adcs	r3, r3
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009072:	4641      	mov	r1, r8
 8009074:	1851      	adds	r1, r2, r1
 8009076:	6039      	str	r1, [r7, #0]
 8009078:	4649      	mov	r1, r9
 800907a:	414b      	adcs	r3, r1
 800907c:	607b      	str	r3, [r7, #4]
 800907e:	f04f 0200 	mov.w	r2, #0
 8009082:	f04f 0300 	mov.w	r3, #0
 8009086:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800908a:	4659      	mov	r1, fp
 800908c:	00cb      	lsls	r3, r1, #3
 800908e:	4651      	mov	r1, sl
 8009090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009094:	4651      	mov	r1, sl
 8009096:	00ca      	lsls	r2, r1, #3
 8009098:	4610      	mov	r0, r2
 800909a:	4619      	mov	r1, r3
 800909c:	4603      	mov	r3, r0
 800909e:	4642      	mov	r2, r8
 80090a0:	189b      	adds	r3, r3, r2
 80090a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80090a4:	464b      	mov	r3, r9
 80090a6:	460a      	mov	r2, r1
 80090a8:	eb42 0303 	adc.w	r3, r2, r3
 80090ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	663b      	str	r3, [r7, #96]	; 0x60
 80090b8:	667a      	str	r2, [r7, #100]	; 0x64
 80090ba:	f04f 0200 	mov.w	r2, #0
 80090be:	f04f 0300 	mov.w	r3, #0
 80090c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80090c6:	4649      	mov	r1, r9
 80090c8:	008b      	lsls	r3, r1, #2
 80090ca:	4641      	mov	r1, r8
 80090cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090d0:	4641      	mov	r1, r8
 80090d2:	008a      	lsls	r2, r1, #2
 80090d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80090d8:	f7f7 f87c 	bl	80001d4 <__aeabi_uldivmod>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4b0d      	ldr	r3, [pc, #52]	; (8009118 <UART_SetConfig+0x4e4>)
 80090e2:	fba3 1302 	umull	r1, r3, r3, r2
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	2164      	movs	r1, #100	; 0x64
 80090ea:	fb01 f303 	mul.w	r3, r1, r3
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	011b      	lsls	r3, r3, #4
 80090f2:	3332      	adds	r3, #50	; 0x32
 80090f4:	4a08      	ldr	r2, [pc, #32]	; (8009118 <UART_SetConfig+0x4e4>)
 80090f6:	fba2 2303 	umull	r2, r3, r2, r3
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	f003 020f 	and.w	r2, r3, #15
 8009100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4422      	add	r2, r4
 8009108:	609a      	str	r2, [r3, #8]
}
 800910a:	bf00      	nop
 800910c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009110:	46bd      	mov	sp, r7
 8009112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009116:	bf00      	nop
 8009118:	51eb851f 	.word	0x51eb851f

0800911c <__libc_init_array>:
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	4d0d      	ldr	r5, [pc, #52]	; (8009154 <__libc_init_array+0x38>)
 8009120:	4c0d      	ldr	r4, [pc, #52]	; (8009158 <__libc_init_array+0x3c>)
 8009122:	1b64      	subs	r4, r4, r5
 8009124:	10a4      	asrs	r4, r4, #2
 8009126:	2600      	movs	r6, #0
 8009128:	42a6      	cmp	r6, r4
 800912a:	d109      	bne.n	8009140 <__libc_init_array+0x24>
 800912c:	4d0b      	ldr	r5, [pc, #44]	; (800915c <__libc_init_array+0x40>)
 800912e:	4c0c      	ldr	r4, [pc, #48]	; (8009160 <__libc_init_array+0x44>)
 8009130:	f000 f82e 	bl	8009190 <_init>
 8009134:	1b64      	subs	r4, r4, r5
 8009136:	10a4      	asrs	r4, r4, #2
 8009138:	2600      	movs	r6, #0
 800913a:	42a6      	cmp	r6, r4
 800913c:	d105      	bne.n	800914a <__libc_init_array+0x2e>
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	f855 3b04 	ldr.w	r3, [r5], #4
 8009144:	4798      	blx	r3
 8009146:	3601      	adds	r6, #1
 8009148:	e7ee      	b.n	8009128 <__libc_init_array+0xc>
 800914a:	f855 3b04 	ldr.w	r3, [r5], #4
 800914e:	4798      	blx	r3
 8009150:	3601      	adds	r6, #1
 8009152:	e7f2      	b.n	800913a <__libc_init_array+0x1e>
 8009154:	080093e4 	.word	0x080093e4
 8009158:	080093e4 	.word	0x080093e4
 800915c:	080093e4 	.word	0x080093e4
 8009160:	080093e8 	.word	0x080093e8

08009164 <memcpy>:
 8009164:	440a      	add	r2, r1
 8009166:	4291      	cmp	r1, r2
 8009168:	f100 33ff 	add.w	r3, r0, #4294967295
 800916c:	d100      	bne.n	8009170 <memcpy+0xc>
 800916e:	4770      	bx	lr
 8009170:	b510      	push	{r4, lr}
 8009172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800917a:	4291      	cmp	r1, r2
 800917c:	d1f9      	bne.n	8009172 <memcpy+0xe>
 800917e:	bd10      	pop	{r4, pc}

08009180 <memset>:
 8009180:	4402      	add	r2, r0
 8009182:	4603      	mov	r3, r0
 8009184:	4293      	cmp	r3, r2
 8009186:	d100      	bne.n	800918a <memset+0xa>
 8009188:	4770      	bx	lr
 800918a:	f803 1b01 	strb.w	r1, [r3], #1
 800918e:	e7f9      	b.n	8009184 <memset+0x4>

08009190 <_init>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	bf00      	nop
 8009194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009196:	bc08      	pop	{r3}
 8009198:	469e      	mov	lr, r3
 800919a:	4770      	bx	lr

0800919c <_fini>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	bf00      	nop
 80091a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a2:	bc08      	pop	{r3}
 80091a4:	469e      	mov	lr, r3
 80091a6:	4770      	bx	lr
